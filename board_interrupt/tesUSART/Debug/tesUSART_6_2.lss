
tesUSART_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00002808  0000289c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b4  00802024  00802024  000028c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00002938  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000109f1  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f0c  00000000  00000000  000137f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000082e4  00000000  00000000  00018705  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001668  00000000  00000000  000209ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003131f  00000000  00000000  00022054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078df  00000000  00000000  00053373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  0005ac52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bfc3  00000000  00000000  0005b1e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c5       	rjmp	.+2746   	; 0xaf4 <__vector_14>
      3a:	00 00       	nop
      3c:	88 c5       	rjmp	.+2832   	; 0xb4e <__vector_15>
      3e:	00 00       	nop
      40:	b3 c5       	rjmp	.+2918   	; 0xba8 <__vector_16>
      42:	00 00       	nop
      44:	de c5       	rjmp	.+3004   	; 0xc02 <__vector_17>
      46:	00 00       	nop
      48:	09 c6       	rjmp	.+3090   	; 0xc5c <__vector_18>
      4a:	00 00       	nop
      4c:	34 c6       	rjmp	.+3176   	; 0xcb6 <__vector_19>
      4e:	00 00       	nop
      50:	5f c6       	rjmp	.+3262   	; 0xd10 <__vector_20>
      52:	00 00       	nop
      54:	8a c6       	rjmp	.+3348   	; 0xd6a <__vector_21>
      56:	00 00       	nop
      58:	b5 c6       	rjmp	.+3434   	; 0xdc4 <__vector_22>
      5a:	00 00       	nop
      5c:	e0 c6       	rjmp	.+3520   	; 0xe1e <__vector_23>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_47>
      c0:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_48>
      c4:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_49>
      c8:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_50>
      cc:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_51>
      d0:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_52>
      d4:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_53>
      d8:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_54>
      dc:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_55>
      e0:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	a1 c6       	rjmp	.+3394   	; 0xe78 <__vector_77>
     136:	00 00       	nop
     138:	cc c6       	rjmp	.+3480   	; 0xed2 <__vector_78>
     13a:	00 00       	nop
     13c:	f7 c6       	rjmp	.+3566   	; 0xf2c <__vector_79>
     13e:	00 00       	nop
     140:	22 c7       	rjmp	.+3652   	; 0xf86 <__vector_80>
     142:	00 00       	nop
     144:	4d c7       	rjmp	.+3738   	; 0xfe0 <__vector_81>
     146:	00 00       	nop
     148:	78 c7       	rjmp	.+3824   	; 0x103a <__vector_82>
     14a:	00 00       	nop
     14c:	a3 c7       	rjmp	.+3910   	; 0x1094 <__vector_83>
     14e:	00 00       	nop
     150:	ce c7       	rjmp	.+3996   	; 0x10ee <__vector_84>
     152:	00 00       	nop
     154:	f9 c7       	rjmp	.+4082   	; 0x1148 <__vector_85>
     156:	00 00       	nop
     158:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__vector_108>
     1b4:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_109>
     1b8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_110>
     1bc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_111>
     1c0:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_112>
     1c4:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dc8>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65b0>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6588>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55b0>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d88>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e8 e0       	ldi	r30, 0x08	; 8
     4a6:	f8 e2       	ldi	r31, 0x28	; 40
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a4 32       	cpi	r26, 0x24	; 36
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a4 e2       	ldi	r26, 0x24	; 36
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a8 3d       	cpi	r26, 0xD8	; 216
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 af 13 	call	0x275e	; 0x275e <main>
     4cc:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	81 09       	sbc	r24, r1
     4d8:	91 09       	sbc	r25, r1
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <__portable_avr_delay_cycles>
}
     4dc:	08 95       	ret

000004de <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	1f 92       	push	r1
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	16 e0       	ldi	r17, 0x06	; 6
     4fa:	68 94       	set
     4fc:	ff 24       	eor	r15, r15
     4fe:	f3 f8       	bld	r15, 3
     500:	f8 01       	movw	r30, r16
     502:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     504:	65 e3       	ldi	r22, 0x35	; 53
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	e2 df       	rcall	.-60     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     50e:	f8 01       	movw	r30, r16
     510:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     512:	65 e3       	ldi	r22, 0x35	; 53
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	db df       	rcall	.-74     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     51c:	0f 2e       	mov	r0, r31
     51e:	fb e2       	ldi	r31, 0x2B	; 43
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
     524:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     526:	80 ea       	ldi	r24, 0xA0	; 160
     528:	99 e0       	ldi	r25, 0x09	; 9
     52a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     52e:	c1 2c       	mov	r12, r1
     530:	d1 2c       	mov	r13, r1
     532:	76 01       	movw	r14, r12
     534:	00 e4       	ldi	r16, 0x40	; 64
     536:	12 e4       	ldi	r17, 0x42	; 66
     538:	2f e0       	ldi	r18, 0x0F	; 15
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	43 e0       	ldi	r20, 0x03	; 3
     53e:	be 01       	movw	r22, r28
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	0e 94 9a 10 	call	0x2134	; 0x2134 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     54c:	00 e6       	ldi	r16, 0x60	; 96
     54e:	16 e0       	ldi	r17, 0x06	; 6
     550:	ff 24       	eor	r15, r15
     552:	f3 94       	inc	r15
     554:	f8 01       	movw	r30, r16
     556:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     558:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     568:	f8 01       	movw	r30, r16
     56a:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     56c:	e0 ea       	ldi	r30, 0xA0	; 160
     56e:	f9 e0       	ldi	r31, 0x09	; 9
     570:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     572:	85 ff       	sbrs	r24, 5
     574:	fd cf       	rjmp	.-6      	; 0x570 <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     576:	80 ea       	ldi	r24, 0xA0	; 160
     578:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     57c:	e0 ea       	ldi	r30, 0xA0	; 160
     57e:	f9 e0       	ldi	r31, 0x09	; 9
     580:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     582:	86 ff       	sbrs	r24, 6
     584:	fd cf       	rjmp	.-6      	; 0x580 <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	80 e4       	ldi	r24, 0x40	; 64
     58c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     58e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     590:	be 01       	movw	r22, r28
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	80 ea       	ldi	r24, 0xA0	; 160
     598:	99 e0       	ldi	r25, 0x09	; 9
     59a:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     59e:	8b e2       	ldi	r24, 0x2B	; 43
     5a0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 ea       	ldi	r24, 0xA0	; 160
     5aa:	99 e0       	ldi	r25, 0x09	; 9
     5ac:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
     5d6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
     5e4:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e8:	8b e2       	ldi	r24, 0x2B	; 43
     5ea:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ec:	be 01       	movw	r22, r28
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	80 ea       	ldi	r24, 0xA0	; 160
     5f4:	99 e0       	ldi	r25, 0x09	; 9
     5f6:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     600:	e0 ea       	ldi	r30, 0xA0	; 160
     602:	f9 e0       	ldi	r31, 0x09	; 9
     604:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     606:	85 ff       	sbrs	r24, 5
     608:	fd cf       	rjmp	.-6      	; 0x604 <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     60a:	88 ec       	ldi	r24, 0xC8	; 200
     60c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     610:	e0 ea       	ldi	r30, 0xA0	; 160
     612:	f9 e0       	ldi	r31, 0x09	; 9
     614:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     616:	86 ff       	sbrs	r24, 6
     618:	fd cf       	rjmp	.-6      	; 0x614 <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	f9 e0       	ldi	r31, 0x09	; 9
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     622:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     624:	be 01       	movw	r22, r28
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	80 ea       	ldi	r24, 0xA0	; 160
     62c:	99 e0       	ldi	r25, 0x09	; 9
     62e:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     632:	8b e2       	ldi	r24, 0x2B	; 43
     634:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	80 ea       	ldi	r24, 0xA0	; 160
     63e:	99 e0       	ldi	r25, 0x09	; 9
     640:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     64a:	e0 ea       	ldi	r30, 0xA0	; 160
     64c:	f9 e0       	ldi	r31, 0x09	; 9
     64e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     650:	85 ff       	sbrs	r24, 5
     652:	fd cf       	rjmp	.-6      	; 0x64e <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     654:	82 ea       	ldi	r24, 0xA2	; 162
     656:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     65a:	e0 ea       	ldi	r30, 0xA0	; 160
     65c:	f9 e0       	ldi	r31, 0x09	; 9
     65e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     660:	86 ff       	sbrs	r24, 6
     662:	fd cf       	rjmp	.-6      	; 0x65e <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     664:	e0 ea       	ldi	r30, 0xA0	; 160
     666:	f9 e0       	ldi	r31, 0x09	; 9
     668:	80 e4       	ldi	r24, 0x40	; 64
     66a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     66c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	80 ea       	ldi	r24, 0xA0	; 160
     676:	99 e0       	ldi	r25, 0x09	; 9
     678:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     67c:	8b e2       	ldi	r24, 0x2B	; 43
     67e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     680:	be 01       	movw	r22, r28
     682:	6f 5f       	subi	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	80 ea       	ldi	r24, 0xA0	; 160
     688:	99 e0       	ldi	r25, 0x09	; 9
     68a:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     694:	e0 ea       	ldi	r30, 0xA0	; 160
     696:	f9 e0       	ldi	r31, 0x09	; 9
     698:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     69a:	85 ff       	sbrs	r24, 5
     69c:	fd cf       	rjmp	.-6      	; 0x698 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     69e:	8f e2       	ldi	r24, 0x2F	; 47
     6a0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6a4:	e0 ea       	ldi	r30, 0xA0	; 160
     6a6:	f9 e0       	ldi	r31, 0x09	; 9
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6aa:	86 ff       	sbrs	r24, 6
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	80 e4       	ldi	r24, 0x40	; 64
     6b4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6b6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	80 ea       	ldi	r24, 0xA0	; 160
     6c0:	99 e0       	ldi	r25, 0x09	; 9
     6c2:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6c6:	8b e2       	ldi	r24, 0x2B	; 43
     6c8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	80 ea       	ldi	r24, 0xA0	; 160
     6d2:	99 e0       	ldi	r25, 0x09	; 9
     6d4:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e4:	85 ff       	sbrs	r24, 5
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6e8:	88 ef       	ldi	r24, 0xF8	; 248
     6ea:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ee:	e0 ea       	ldi	r30, 0xA0	; 160
     6f0:	f9 e0       	ldi	r31, 0x09	; 9
     6f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f4:	86 ff       	sbrs	r24, 6
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6f8:	e0 ea       	ldi	r30, 0xA0	; 160
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	80 e4       	ldi	r24, 0x40	; 64
     6fe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     700:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     710:	8b e2       	ldi	r24, 0x2B	; 43
     712:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     714:	be 01       	movw	r22, r28
     716:	6f 5f       	subi	r22, 0xFF	; 255
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	80 ea       	ldi	r24, 0xA0	; 160
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
     72c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72e:	85 ff       	sbrs	r24, 5
     730:	fd cf       	rjmp	.-6      	; 0x72c <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     732:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
     73a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     73c:	86 ff       	sbrs	r24, 6
     73e:	fd cf       	rjmp	.-6      	; 0x73a <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
     744:	80 e4       	ldi	r24, 0x40	; 64
     746:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     748:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	99 e0       	ldi	r25, 0x09	; 9
     754:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     758:	8b e2       	ldi	r24, 0x2B	; 43
     75a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     75c:	be 01       	movw	r22, r28
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	80 ea       	ldi	r24, 0xA0	; 160
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
     774:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     776:	85 ff       	sbrs	r24, 5
     778:	fd cf       	rjmp	.-6      	; 0x774 <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     77a:	81 e2       	ldi	r24, 0x21	; 33
     77c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     780:	e0 ea       	ldi	r30, 0xA0	; 160
     782:	f9 e0       	ldi	r31, 0x09	; 9
     784:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     786:	86 ff       	sbrs	r24, 6
     788:	fd cf       	rjmp	.-6      	; 0x784 <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     78a:	e0 ea       	ldi	r30, 0xA0	; 160
     78c:	f9 e0       	ldi	r31, 0x09	; 9
     78e:	80 e4       	ldi	r24, 0x40	; 64
     790:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     792:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     794:	be 01       	movw	r22, r28
     796:	6f 5f       	subi	r22, 0xFF	; 255
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	80 ea       	ldi	r24, 0xA0	; 160
     79c:	99 e0       	ldi	r25, 0x09	; 9
     79e:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7a2:	8b e2       	ldi	r24, 0x2B	; 43
     7a4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	99 e0       	ldi	r25, 0x09	; 9
     7b0:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ba:	e0 ea       	ldi	r30, 0xA0	; 160
     7bc:	f9 e0       	ldi	r31, 0x09	; 9
     7be:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7c0:	85 ff       	sbrs	r24, 5
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7c4:	81 e8       	ldi	r24, 0x81	; 129
     7c6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ca:	e0 ea       	ldi	r30, 0xA0	; 160
     7cc:	f9 e0       	ldi	r31, 0x09	; 9
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7d0:	86 ff       	sbrs	r24, 6
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7d4:	e0 ea       	ldi	r30, 0xA0	; 160
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	80 e4       	ldi	r24, 0x40	; 64
     7da:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7dc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7de:	be 01       	movw	r22, r28
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	99 e0       	ldi	r25, 0x09	; 9
     7e8:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ec:	8b e2       	ldi	r24, 0x2B	; 43
     7ee:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7f0:	be 01       	movw	r22, r28
     7f2:	6f 5f       	subi	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	80 ea       	ldi	r24, 0xA0	; 160
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     804:	e0 ea       	ldi	r30, 0xA0	; 160
     806:	f9 e0       	ldi	r31, 0x09	; 9
     808:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     80a:	85 ff       	sbrs	r24, 5
     80c:	fd cf       	rjmp	.-6      	; 0x808 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     80e:	81 e2       	ldi	r24, 0x21	; 33
     810:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     814:	e0 ea       	ldi	r30, 0xA0	; 160
     816:	f9 e0       	ldi	r31, 0x09	; 9
     818:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     81a:	86 ff       	sbrs	r24, 6
     81c:	fd cf       	rjmp	.-6      	; 0x818 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     81e:	e0 ea       	ldi	r30, 0xA0	; 160
     820:	f9 e0       	ldi	r31, 0x09	; 9
     822:	80 e4       	ldi	r24, 0x40	; 64
     824:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     826:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 ea       	ldi	r24, 0xA0	; 160
     830:	99 e0       	ldi	r25, 0x09	; 9
     832:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     836:	8b e2       	ldi	r24, 0x2B	; 43
     838:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     83a:	be 01       	movw	r22, r28
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	80 ea       	ldi	r24, 0xA0	; 160
     842:	99 e0       	ldi	r25, 0x09	; 9
     844:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
     852:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     854:	85 ff       	sbrs	r24, 5
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     858:	8f ea       	ldi	r24, 0xAF	; 175
     85a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     85e:	e0 ea       	ldi	r30, 0xA0	; 160
     860:	f9 e0       	ldi	r31, 0x09	; 9
     862:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     864:	86 ff       	sbrs	r24, 6
     866:	fd cf       	rjmp	.-6      	; 0x862 <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     868:	e0 ea       	ldi	r30, 0xA0	; 160
     86a:	f9 e0       	ldi	r31, 0x09	; 9
     86c:	80 e4       	ldi	r24, 0x40	; 64
     86e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     870:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	80 ea       	ldi	r24, 0xA0	; 160
     87a:	99 e0       	ldi	r25, 0x09	; 9
     87c:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	08 95       	ret

00000896 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	08 2f       	mov	r16, r24
     8a8:	f6 2e       	mov	r15, r22
     8aa:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8ac:	0e 94 e5 10 	call	0x21ca	; 0x21ca <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8b0:	0f 70       	andi	r16, 0x0F	; 15
     8b2:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8b4:	8b e2       	ldi	r24, 0x2B	; 43
     8b6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8b8:	be 01       	movw	r22, r28
     8ba:	6f 5f       	subi	r22, 0xFF	; 255
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	80 ea       	ldi	r24, 0xA0	; 160
     8c0:	99 e0       	ldi	r25, 0x09	; 9
     8c2:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8cc:	e0 ea       	ldi	r30, 0xA0	; 160
     8ce:	f9 e0       	ldi	r31, 0x09	; 9
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8d2:	95 ff       	sbrs	r25, 5
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8d6:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8da:	e0 ea       	ldi	r30, 0xA0	; 160
     8dc:	f9 e0       	ldi	r31, 0x09	; 9
     8de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8e0:	86 ff       	sbrs	r24, 6
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	80 e4       	ldi	r24, 0x40	; 64
     8ea:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ec:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	80 ea       	ldi	r24, 0xA0	; 160
     8f6:	99 e0       	ldi	r25, 0x09	; 9
     8f8:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8fc:	0f 2d       	mov	r16, r15
     8fe:	0f 77       	andi	r16, 0x7F	; 127
     900:	02 95       	swap	r16
     902:	0f 70       	andi	r16, 0x0F	; 15
     904:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     906:	8b e2       	ldi	r24, 0x2B	; 43
     908:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	99 e0       	ldi	r25, 0x09	; 9
     914:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     91e:	e0 ea       	ldi	r30, 0xA0	; 160
     920:	f9 e0       	ldi	r31, 0x09	; 9
     922:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     924:	85 ff       	sbrs	r24, 5
     926:	fd cf       	rjmp	.-6      	; 0x922 <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     928:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     92c:	e0 ea       	ldi	r30, 0xA0	; 160
     92e:	f9 e0       	ldi	r31, 0x09	; 9
     930:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     932:	86 ff       	sbrs	r24, 6
     934:	fd cf       	rjmp	.-6      	; 0x930 <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     936:	e0 ea       	ldi	r30, 0xA0	; 160
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	80 e4       	ldi	r24, 0x40	; 64
     93c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     93e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	80 ea       	ldi	r24, 0xA0	; 160
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     94e:	0f 2d       	mov	r16, r15
     950:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     952:	8b e2       	ldi	r24, 0x2B	; 43
     954:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	80 ea       	ldi	r24, 0xA0	; 160
     95e:	99 e0       	ldi	r25, 0x09	; 9
     960:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     96a:	e0 ea       	ldi	r30, 0xA0	; 160
     96c:	f9 e0       	ldi	r31, 0x09	; 9
     96e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     970:	85 ff       	sbrs	r24, 5
     972:	fd cf       	rjmp	.-6      	; 0x96e <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     974:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     978:	e0 ea       	ldi	r30, 0xA0	; 160
     97a:	f9 e0       	ldi	r31, 0x09	; 9
     97c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     97e:	86 ff       	sbrs	r24, 6
     980:	fd cf       	rjmp	.-6      	; 0x97c <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     982:	e0 ea       	ldi	r30, 0xA0	; 160
     984:	f9 e0       	ldi	r31, 0x09	; 9
     986:	80 e4       	ldi	r24, 0x40	; 64
     988:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     98a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     98c:	be 01       	movw	r22, r28
     98e:	6f 5f       	subi	r22, 0xFF	; 255
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	80 ea       	ldi	r24, 0xA0	; 160
     994:	99 e0       	ldi	r25, 0x09	; 9
     996:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     99a:	8b e2       	ldi	r24, 0x2B	; 43
     99c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	80 ea       	ldi	r24, 0xA0	; 160
     9a6:	99 e0       	ldi	r25, 0x09	; 9
     9a8:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9b2:	e0 ea       	ldi	r30, 0xA0	; 160
     9b4:	f9 e0       	ldi	r31, 0x09	; 9
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9b8:	85 ff       	sbrs	r24, 5
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9bc:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9c0:	e0 ea       	ldi	r30, 0xA0	; 160
     9c2:	f9 e0       	ldi	r31, 0x09	; 9
     9c4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9c6:	86 ff       	sbrs	r24, 6
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9ca:	e0 ea       	ldi	r30, 0xA0	; 160
     9cc:	f9 e0       	ldi	r31, 0x09	; 9
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9d2:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	80 ea       	ldi	r24, 0xA0	; 160
     9e2:	99 e0       	ldi	r25, 0x09	; 9
     9e4:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	08 95       	ret

000009f6 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a04:	84 e2       	ldi	r24, 0x24	; 36
     a06:	90 e2       	ldi	r25, 0x20	; 32
     a08:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <gfx_mono_set_framebuffer>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a0c:	68 dd       	rcall	.-1328   	; 0x4de <st7565r_init>
     a0e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	be 01       	movw	r22, r28
     a14:	6f 5f       	subi	r22, 0xFF	; 255
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	80 ea       	ldi	r24, 0xA0	; 160
     a1a:	99 e0       	ldi	r25, 0x09	; 9
     a1c:	0e 94 b4 10 	call	0x2168	; 0x2168 <usart_spi_select_device>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a26:	e0 ea       	ldi	r30, 0xA0	; 160
     a28:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a2a:	81 81       	ldd	r24, Z+1	; 0x01
     a2c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a2e:	fd cf       	rjmp	.-6      	; 0xa2a <gfx_mono_st7565r_init+0x34>
     a30:	80 e4       	ldi	r24, 0x40	; 64
     a32:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a36:	e0 ea       	ldi	r30, 0xA0	; 160
     a38:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a3a:	81 81       	ldd	r24, Z+1	; 0x01
     a3c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <gfx_mono_st7565r_init+0x44>
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f9 e0       	ldi	r31, 0x09	; 9
     a44:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a46:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a48:	80 81       	ld	r24, Z
     a4a:	be 01       	movw	r22, r28
     a4c:	6f 5f       	subi	r22, 0xFF	; 255
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	80 ea       	ldi	r24, 0xA0	; 160
     a52:	99 e0       	ldi	r25, 0x09	; 9
     a54:	0e 94 ca 10 	call	0x2194	; 0x2194 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a58:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a5a:	0a c0       	rjmp	.+20     	; 0xa70 <gfx_mono_st7565r_init+0x7a>
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	61 2f       	mov	r22, r17
     a60:	80 2f       	mov	r24, r16
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a62:	19 df       	rcall	.-462    	; 0x896 <gfx_mono_st7565r_put_byte>
     a64:	1f 5f       	subi	r17, 0xFF	; 255
     a66:	10 38       	cpi	r17, 0x80	; 128

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a68:	c9 f7       	brne	.-14     	; 0xa5c <gfx_mono_st7565r_init+0x66>
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	04 30       	cpi	r16, 0x04	; 4
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a6e:	11 f0       	breq	.+4      	; 0xa74 <gfx_mono_st7565r_init+0x7e>
     a70:	10 e0       	ldi	r17, 0x00	; 0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a72:	f4 cf       	rjmp	.-24     	; 0xa5c <gfx_mono_st7565r_init+0x66>
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a8a:	88 23       	and	r24, r24
     a8c:	54 f1       	brlt	.+84     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x62>
     a8e:	60 32       	cpi	r22, 0x20	; 32
     a90:	40 f5       	brcc	.+80     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x62>
     a92:	d4 2f       	mov	r29, r20
     a94:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a96:	f6 2e       	mov	r15, r22
     a98:	f6 94       	lsr	r15
     a9a:	f6 94       	lsr	r15
     a9c:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	f8 9e       	mul	r15, r24
     aa4:	60 19       	sub	r22, r0
     aa6:	71 09       	sbc	r23, r1
     aa8:	11 24       	eor	r1, r1
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	8c 01       	movw	r16, r24
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <gfx_mono_st7565r_draw_pixel+0x36>
     ab2:	00 0f       	add	r16, r16
     ab4:	11 1f       	adc	r17, r17
     ab6:	6a 95       	dec	r22
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aba:	6c 2f       	mov	r22, r28
     abc:	8f 2d       	mov	r24, r15
     abe:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ac2:	d1 30       	cpi	r29, 0x01	; 1
     ac4:	21 f0       	breq	.+8      	; 0xace <gfx_mono_st7565r_draw_pixel+0x4e>
     ac6:	28 f0       	brcs	.+10     	; 0xad2 <gfx_mono_st7565r_draw_pixel+0x52>
     ac8:	d2 30       	cpi	r29, 0x02	; 2
     aca:	31 f0       	breq	.+12     	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x58>
     acc:	06 c0       	rjmp	.+12     	; 0xada <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ace:	80 2b       	or	r24, r16
		break;
     ad0:	04 c0       	rjmp	.+8      	; 0xada <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     ad2:	00 95       	com	r16
     ad4:	80 23       	and	r24, r16
		break;
     ad6:	01 c0       	rjmp	.+2      	; 0xada <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ad8:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ada:	48 2f       	mov	r20, r24
     adc:	6c 2f       	mov	r22, r28
     ade:	8f 2d       	mov	r24, r15
     ae0:	da de       	rcall	.-588    	; 0x896 <gfx_mono_st7565r_put_byte>
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	08 95       	ret

00000aee <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aee:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     af2:	08 95       	ret

00000af4 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	0b b6       	in	r0, 0x3b	; 59
     b00:	0f 92       	push	r0
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <tc_tcc0_ovf_callback>
     b1e:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <tc_tcc0_ovf_callback+0x1>
     b22:	30 97       	sbiw	r30, 0x00	; 0
     b24:	09 f0       	breq	.+2      	; 0xb28 <__vector_14+0x34>
     b26:	19 95       	eicall
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	bf 91       	pop	r27
     b2e:	af 91       	pop	r26
     b30:	9f 91       	pop	r25
     b32:	8f 91       	pop	r24
     b34:	7f 91       	pop	r23
     b36:	6f 91       	pop	r22
     b38:	5f 91       	pop	r21
     b3a:	4f 91       	pop	r20
     b3c:	3f 91       	pop	r19
     b3e:	2f 91       	pop	r18
     b40:	0f 90       	pop	r0
     b42:	0b be       	out	0x3b, r0	; 59
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_15>:
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	0b b6       	in	r0, 0x3b	; 59
     b5a:	0f 92       	push	r0
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
     b74:	e0 91 68 22 	lds	r30, 0x2268	; 0x802268 <tc_tcc0_err_callback>
     b78:	f0 91 69 22 	lds	r31, 0x2269	; 0x802269 <tc_tcc0_err_callback+0x1>
     b7c:	30 97       	sbiw	r30, 0x00	; 0
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__vector_15+0x34>
     b80:	19 95       	eicall
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0b be       	out	0x3b, r0	; 59
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_16>:
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	0b b6       	in	r0, 0x3b	; 59
     bb4:	0f 92       	push	r0
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	e0 91 66 22 	lds	r30, 0x2266	; 0x802266 <tc_tcc0_cca_callback>
     bd2:	f0 91 67 22 	lds	r31, 0x2267	; 0x802267 <tc_tcc0_cca_callback+0x1>
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__vector_16+0x34>
     bda:	19 95       	eicall
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0b be       	out	0x3b, r0	; 59
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_17>:
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
     c28:	e0 91 64 22 	lds	r30, 0x2264	; 0x802264 <tc_tcc0_ccb_callback>
     c2c:	f0 91 65 22 	lds	r31, 0x2265	; 0x802265 <tc_tcc0_ccb_callback+0x1>
     c30:	30 97       	sbiw	r30, 0x00	; 0
     c32:	09 f0       	breq	.+2      	; 0xc36 <__vector_17+0x34>
     c34:	19 95       	eicall
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_18>:
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	2f 93       	push	r18
     c6c:	3f 93       	push	r19
     c6e:	4f 93       	push	r20
     c70:	5f 93       	push	r21
     c72:	6f 93       	push	r22
     c74:	7f 93       	push	r23
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	ef 93       	push	r30
     c80:	ff 93       	push	r31
     c82:	e0 91 62 22 	lds	r30, 0x2262	; 0x802262 <tc_tcc0_ccc_callback>
     c86:	f0 91 63 22 	lds	r31, 0x2263	; 0x802263 <tc_tcc0_ccc_callback+0x1>
     c8a:	30 97       	sbiw	r30, 0x00	; 0
     c8c:	09 f0       	breq	.+2      	; 0xc90 <__vector_18+0x34>
     c8e:	19 95       	eicall
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0b be       	out	0x3b, r0	; 59
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__vector_19>:
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	0b b6       	in	r0, 0x3b	; 59
     cc2:	0f 92       	push	r0
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
     cdc:	e0 91 60 22 	lds	r30, 0x2260	; 0x802260 <tc_tcc0_ccd_callback>
     ce0:	f0 91 61 22 	lds	r31, 0x2261	; 0x802261 <tc_tcc0_ccd_callback+0x1>
     ce4:	30 97       	sbiw	r30, 0x00	; 0
     ce6:	09 f0       	breq	.+2      	; 0xcea <__vector_19+0x34>
     ce8:	19 95       	eicall
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_20>:
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	0b b6       	in	r0, 0x3b	; 59
     d1c:	0f 92       	push	r0
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
     d36:	e0 91 5e 22 	lds	r30, 0x225E	; 0x80225e <tc_tcc1_ovf_callback>
     d3a:	f0 91 5f 22 	lds	r31, 0x225F	; 0x80225f <tc_tcc1_ovf_callback+0x1>
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_20+0x34>
     d42:	19 95       	eicall
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_21>:
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	e0 91 5c 22 	lds	r30, 0x225C	; 0x80225c <tc_tcc1_err_callback>
     d94:	f0 91 5d 22 	lds	r31, 0x225D	; 0x80225d <tc_tcc1_err_callback+0x1>
     d98:	30 97       	sbiw	r30, 0x00	; 0
     d9a:	09 f0       	breq	.+2      	; 0xd9e <__vector_21+0x34>
     d9c:	19 95       	eicall
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0b be       	out	0x3b, r0	; 59
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <__vector_22>:
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	0b b6       	in	r0, 0x3b	; 59
     dd0:	0f 92       	push	r0
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
     dea:	e0 91 5a 22 	lds	r30, 0x225A	; 0x80225a <tc_tcc1_cca_callback>
     dee:	f0 91 5b 22 	lds	r31, 0x225B	; 0x80225b <tc_tcc1_cca_callback+0x1>
     df2:	30 97       	sbiw	r30, 0x00	; 0
     df4:	09 f0       	breq	.+2      	; 0xdf8 <__vector_22+0x34>
     df6:	19 95       	eicall
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0b be       	out	0x3b, r0	; 59
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_23>:
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	0b b6       	in	r0, 0x3b	; 59
     e2a:	0f 92       	push	r0
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	e0 91 58 22 	lds	r30, 0x2258	; 0x802258 <tc_tcc1_ccb_callback>
     e48:	f0 91 59 22 	lds	r31, 0x2259	; 0x802259 <tc_tcc1_ccb_callback+0x1>
     e4c:	30 97       	sbiw	r30, 0x00	; 0
     e4e:	09 f0       	breq	.+2      	; 0xe52 <__vector_23+0x34>
     e50:	19 95       	eicall
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0b be       	out	0x3b, r0	; 59
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_77>:
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
     e9e:	e0 91 56 22 	lds	r30, 0x2256	; 0x802256 <tc_tcd0_ovf_callback>
     ea2:	f0 91 57 22 	lds	r31, 0x2257	; 0x802257 <tc_tcd0_ovf_callback+0x1>
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_77+0x34>
     eaa:	19 95       	eicall
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_78>:
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <tc_tcd0_err_callback>
     efc:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <tc_tcd0_err_callback+0x1>
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_78+0x34>
     f04:	19 95       	eicall
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_79>:
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	0b b6       	in	r0, 0x3b	; 59
     f38:	0f 92       	push	r0
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	e0 91 52 22 	lds	r30, 0x2252	; 0x802252 <tc_tcd0_cca_callback>
     f56:	f0 91 53 22 	lds	r31, 0x2253	; 0x802253 <tc_tcd0_cca_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_79+0x34>
     f5e:	19 95       	eicall
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <__vector_80>:
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	0b b6       	in	r0, 0x3b	; 59
     f92:	0f 92       	push	r0
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <tc_tcd0_ccb_callback>
     fb0:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <tc_tcd0_ccb_callback+0x1>
     fb4:	30 97       	sbiw	r30, 0x00	; 0
     fb6:	09 f0       	breq	.+2      	; 0xfba <__vector_80+0x34>
     fb8:	19 95       	eicall
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0b be       	out	0x3b, r0	; 59
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <__vector_81>:
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	0b b6       	in	r0, 0x3b	; 59
     fec:	0f 92       	push	r0
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31
    1006:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <tc_tcd0_ccc_callback>
    100a:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <tc_tcd0_ccc_callback+0x1>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	09 f0       	breq	.+2      	; 0x1014 <__vector_81+0x34>
    1012:	19 95       	eicall
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0b be       	out	0x3b, r0	; 59
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_82>:
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	0b b6       	in	r0, 0x3b	; 59
    1046:	0f 92       	push	r0
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	e0 91 4c 22 	lds	r30, 0x224C	; 0x80224c <tc_tcd0_ccd_callback>
    1064:	f0 91 4d 22 	lds	r31, 0x224D	; 0x80224d <tc_tcd0_ccd_callback+0x1>
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	09 f0       	breq	.+2      	; 0x106e <__vector_82+0x34>
    106c:	19 95       	eicall
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	7f 91       	pop	r23
    107c:	6f 91       	pop	r22
    107e:	5f 91       	pop	r21
    1080:	4f 91       	pop	r20
    1082:	3f 91       	pop	r19
    1084:	2f 91       	pop	r18
    1086:	0f 90       	pop	r0
    1088:	0b be       	out	0x3b, r0	; 59
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_83>:
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	0b b6       	in	r0, 0x3b	; 59
    10a0:	0f 92       	push	r0
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	e0 91 4a 22 	lds	r30, 0x224A	; 0x80224a <tc_tcd1_ovf_callback>
    10be:	f0 91 4b 22 	lds	r31, 0x224B	; 0x80224b <tc_tcd1_ovf_callback+0x1>
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__vector_83+0x34>
    10c6:	19 95       	eicall
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0b be       	out	0x3b, r0	; 59
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_84>:
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	0b b6       	in	r0, 0x3b	; 59
    10fa:	0f 92       	push	r0
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <tc_tcd1_err_callback>
    1118:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <tc_tcd1_err_callback+0x1>
    111c:	30 97       	sbiw	r30, 0x00	; 0
    111e:	09 f0       	breq	.+2      	; 0x1122 <__vector_84+0x34>
    1120:	19 95       	eicall
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_85>:
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <tc_tcd1_cca_callback>
    1172:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <tc_tcd1_cca_callback+0x1>
    1176:	30 97       	sbiw	r30, 0x00	; 0
    1178:	09 f0       	breq	.+2      	; 0x117c <__vector_85+0x34>
    117a:	19 95       	eicall
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0b be       	out	0x3b, r0	; 59
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_86>:
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	0b b6       	in	r0, 0x3b	; 59
    11ae:	0f 92       	push	r0
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <tc_tcd1_ccb_callback>
    11cc:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <tc_tcd1_ccb_callback+0x1>
    11d0:	30 97       	sbiw	r30, 0x00	; 0
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__vector_86+0x34>
    11d4:	19 95       	eicall
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0b be       	out	0x3b, r0	; 59
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <__vector_47>:
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	0b b6       	in	r0, 0x3b	; 59
    1208:	0f 92       	push	r0
    120a:	2f 93       	push	r18
    120c:	3f 93       	push	r19
    120e:	4f 93       	push	r20
    1210:	5f 93       	push	r21
    1212:	6f 93       	push	r22
    1214:	7f 93       	push	r23
    1216:	8f 93       	push	r24
    1218:	9f 93       	push	r25
    121a:	af 93       	push	r26
    121c:	bf 93       	push	r27
    121e:	ef 93       	push	r30
    1220:	ff 93       	push	r31
    1222:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <tc_tce0_ovf_callback>
    1226:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <tc_tce0_ovf_callback+0x1>
    122a:	30 97       	sbiw	r30, 0x00	; 0
    122c:	09 f0       	breq	.+2      	; 0x1230 <__vector_47+0x34>
    122e:	19 95       	eicall
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0b be       	out	0x3b, r0	; 59
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	0f 90       	pop	r0
    1252:	1f 90       	pop	r1
    1254:	18 95       	reti

00001256 <__vector_48>:
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	0b b6       	in	r0, 0x3b	; 59
    1262:	0f 92       	push	r0
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    127c:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <tc_tce0_err_callback>
    1280:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <tc_tce0_err_callback+0x1>
    1284:	30 97       	sbiw	r30, 0x00	; 0
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_48+0x34>
    1288:	19 95       	eicall
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0b be       	out	0x3b, r0	; 59
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_49>:
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	0b b6       	in	r0, 0x3b	; 59
    12bc:	0f 92       	push	r0
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	e0 91 3e 22 	lds	r30, 0x223E	; 0x80223e <tc_tce0_cca_callback>
    12da:	f0 91 3f 22 	lds	r31, 0x223F	; 0x80223f <tc_tce0_cca_callback+0x1>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__vector_49+0x34>
    12e2:	19 95       	eicall
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0b be       	out	0x3b, r0	; 59
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_50>:
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
    1330:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <tc_tce0_ccb_callback>
    1334:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <tc_tce0_ccb_callback+0x1>
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	09 f0       	breq	.+2      	; 0x133e <__vector_50+0x34>
    133c:	19 95       	eicall
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0b be       	out	0x3b, r0	; 59
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_51>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	0b b6       	in	r0, 0x3b	; 59
    1370:	0f 92       	push	r0
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	e0 91 3a 22 	lds	r30, 0x223A	; 0x80223a <tc_tce0_ccc_callback>
    138e:	f0 91 3b 22 	lds	r31, 0x223B	; 0x80223b <tc_tce0_ccc_callback+0x1>
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	09 f0       	breq	.+2      	; 0x1398 <__vector_51+0x34>
    1396:	19 95       	eicall
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0b be       	out	0x3b, r0	; 59
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_52>:
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	0b b6       	in	r0, 0x3b	; 59
    13ca:	0f 92       	push	r0
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	e0 91 38 22 	lds	r30, 0x2238	; 0x802238 <tc_tce0_ccd_callback>
    13e8:	f0 91 39 22 	lds	r31, 0x2239	; 0x802239 <tc_tce0_ccd_callback+0x1>
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <__vector_52+0x34>
    13f0:	19 95       	eicall
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0b be       	out	0x3b, r0	; 59
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_53>:
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	0b b6       	in	r0, 0x3b	; 59
    1424:	0f 92       	push	r0
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	e0 91 36 22 	lds	r30, 0x2236	; 0x802236 <tc_tce1_ovf_callback>
    1442:	f0 91 37 22 	lds	r31, 0x2237	; 0x802237 <tc_tce1_ovf_callback+0x1>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	09 f0       	breq	.+2      	; 0x144c <__vector_53+0x34>
    144a:	19 95       	eicall
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0b be       	out	0x3b, r0	; 59
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_54>:
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	0b b6       	in	r0, 0x3b	; 59
    147e:	0f 92       	push	r0
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <tc_tce1_err_callback>
    149c:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <tc_tce1_err_callback+0x1>
    14a0:	30 97       	sbiw	r30, 0x00	; 0
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__vector_54+0x34>
    14a4:	19 95       	eicall
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0b be       	out	0x3b, r0	; 59
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__vector_55>:
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	11 24       	eor	r1, r1
    14d6:	0b b6       	in	r0, 0x3b	; 59
    14d8:	0f 92       	push	r0
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <tc_tce1_cca_callback>
    14f6:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <tc_tce1_cca_callback+0x1>
    14fa:	30 97       	sbiw	r30, 0x00	; 0
    14fc:	09 f0       	breq	.+2      	; 0x1500 <__vector_55+0x34>
    14fe:	19 95       	eicall
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0b be       	out	0x3b, r0	; 59
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_56>:
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	0b b6       	in	r0, 0x3b	; 59
    1532:	0f 92       	push	r0
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
    154c:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <tc_tce1_ccb_callback>
    1550:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <tc_tce1_ccb_callback+0x1>
    1554:	30 97       	sbiw	r30, 0x00	; 0
    1556:	09 f0       	breq	.+2      	; 0x155a <__vector_56+0x34>
    1558:	19 95       	eicall
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0b be       	out	0x3b, r0	; 59
    1576:	0f 90       	pop	r0
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	0f 90       	pop	r0
    157c:	1f 90       	pop	r1
    157e:	18 95       	reti

00001580 <__vector_108>:
    1580:	1f 92       	push	r1
    1582:	0f 92       	push	r0
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	0f 92       	push	r0
    1588:	11 24       	eor	r1, r1
    158a:	0b b6       	in	r0, 0x3b	; 59
    158c:	0f 92       	push	r0
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <tc_tcf0_ovf_callback>
    15aa:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <tc_tcf0_ovf_callback+0x1>
    15ae:	30 97       	sbiw	r30, 0x00	; 0
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <__vector_108+0x34>
    15b2:	19 95       	eicall
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0b be       	out	0x3b, r0	; 59
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_109>:
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	0b b6       	in	r0, 0x3b	; 59
    15e6:	0f 92       	push	r0
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <tc_tcf0_err_callback>
    1604:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <tc_tcf0_err_callback+0x1>
    1608:	30 97       	sbiw	r30, 0x00	; 0
    160a:	09 f0       	breq	.+2      	; 0x160e <__vector_109+0x34>
    160c:	19 95       	eicall
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	0f 90       	pop	r0
    1628:	0b be       	out	0x3b, r0	; 59
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <__vector_110>:
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	0b b6       	in	r0, 0x3b	; 59
    1640:	0f 92       	push	r0
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	e0 91 2a 22 	lds	r30, 0x222A	; 0x80222a <tc_tcf0_cca_callback>
    165e:	f0 91 2b 22 	lds	r31, 0x222B	; 0x80222b <tc_tcf0_cca_callback+0x1>
    1662:	30 97       	sbiw	r30, 0x00	; 0
    1664:	09 f0       	breq	.+2      	; 0x1668 <__vector_110+0x34>
    1666:	19 95       	eicall
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0b be       	out	0x3b, r0	; 59
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_111>:
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	0b b6       	in	r0, 0x3b	; 59
    169a:	0f 92       	push	r0
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
    16b4:	e0 91 28 22 	lds	r30, 0x2228	; 0x802228 <tc_tcf0_ccb_callback>
    16b8:	f0 91 29 22 	lds	r31, 0x2229	; 0x802229 <tc_tcf0_ccb_callback+0x1>
    16bc:	30 97       	sbiw	r30, 0x00	; 0
    16be:	09 f0       	breq	.+2      	; 0x16c2 <__vector_111+0x34>
    16c0:	19 95       	eicall
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0b be       	out	0x3b, r0	; 59
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_112>:
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	0b b6       	in	r0, 0x3b	; 59
    16f4:	0f 92       	push	r0
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	e0 91 26 22 	lds	r30, 0x2226	; 0x802226 <tc_tcf0_ccc_callback>
    1712:	f0 91 27 22 	lds	r31, 0x2227	; 0x802227 <tc_tcf0_ccc_callback+0x1>
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	09 f0       	breq	.+2      	; 0x171c <__vector_112+0x34>
    171a:	19 95       	eicall
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	0f 90       	pop	r0
    1736:	0b be       	out	0x3b, r0	; 59
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_113>:
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	0b b6       	in	r0, 0x3b	; 59
    174e:	0f 92       	push	r0
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	e0 91 24 22 	lds	r30, 0x2224	; 0x802224 <tc_tcf0_ccd_callback>
    176c:	f0 91 25 22 	lds	r31, 0x2225	; 0x802225 <tc_tcf0_ccd_callback+0x1>
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	09 f0       	breq	.+2      	; 0x1776 <__vector_113+0x34>
    1774:	19 95       	eicall
    1776:	ff 91       	pop	r31
    1778:	ef 91       	pop	r30
    177a:	bf 91       	pop	r27
    177c:	af 91       	pop	r26
    177e:	9f 91       	pop	r25
    1780:	8f 91       	pop	r24
    1782:	7f 91       	pop	r23
    1784:	6f 91       	pop	r22
    1786:	5f 91       	pop	r21
    1788:	4f 91       	pop	r20
    178a:	3f 91       	pop	r19
    178c:	2f 91       	pop	r18
    178e:	0f 90       	pop	r0
    1790:	0b be       	out	0x3b, r0	; 59
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <tc_enable>:
    179c:	cf 93       	push	r28
    179e:	cf b7       	in	r28, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	28 2f       	mov	r18, r24
    17a4:	39 2f       	mov	r19, r25
    17a6:	21 15       	cp	r18, r1
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	38 07       	cpc	r19, r24
    17ac:	39 f4       	brne	.+14     	; 0x17bc <tc_enable+0x20>
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	d0 d5       	rcall	.+2976   	; 0x2354 <sysclk_enable_module>
    17b4:	64 e0       	ldi	r22, 0x04	; 4
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	cd d5       	rcall	.+2970   	; 0x2354 <sysclk_enable_module>
    17ba:	43 c0       	rjmp	.+134    	; 0x1842 <tc_enable+0xa6>
    17bc:	20 34       	cpi	r18, 0x40	; 64
    17be:	88 e0       	ldi	r24, 0x08	; 8
    17c0:	38 07       	cpc	r19, r24
    17c2:	39 f4       	brne	.+14     	; 0x17d2 <tc_enable+0x36>
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	c5 d5       	rcall	.+2954   	; 0x2354 <sysclk_enable_module>
    17ca:	64 e0       	ldi	r22, 0x04	; 4
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	c2 d5       	rcall	.+2948   	; 0x2354 <sysclk_enable_module>
    17d0:	38 c0       	rjmp	.+112    	; 0x1842 <tc_enable+0xa6>
    17d2:	21 15       	cp	r18, r1
    17d4:	89 e0       	ldi	r24, 0x09	; 9
    17d6:	38 07       	cpc	r19, r24
    17d8:	39 f4       	brne	.+14     	; 0x17e8 <tc_enable+0x4c>
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	ba d5       	rcall	.+2932   	; 0x2354 <sysclk_enable_module>
    17e0:	64 e0       	ldi	r22, 0x04	; 4
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	b7 d5       	rcall	.+2926   	; 0x2354 <sysclk_enable_module>
    17e6:	2d c0       	rjmp	.+90     	; 0x1842 <tc_enable+0xa6>
    17e8:	20 34       	cpi	r18, 0x40	; 64
    17ea:	89 e0       	ldi	r24, 0x09	; 9
    17ec:	38 07       	cpc	r19, r24
    17ee:	39 f4       	brne	.+14     	; 0x17fe <tc_enable+0x62>
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	af d5       	rcall	.+2910   	; 0x2354 <sysclk_enable_module>
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	ac d5       	rcall	.+2904   	; 0x2354 <sysclk_enable_module>
    17fc:	22 c0       	rjmp	.+68     	; 0x1842 <tc_enable+0xa6>
    17fe:	21 15       	cp	r18, r1
    1800:	8a e0       	ldi	r24, 0x0A	; 10
    1802:	38 07       	cpc	r19, r24
    1804:	39 f4       	brne	.+14     	; 0x1814 <tc_enable+0x78>
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	85 e0       	ldi	r24, 0x05	; 5
    180a:	a4 d5       	rcall	.+2888   	; 0x2354 <sysclk_enable_module>
    180c:	64 e0       	ldi	r22, 0x04	; 4
    180e:	85 e0       	ldi	r24, 0x05	; 5
    1810:	a1 d5       	rcall	.+2882   	; 0x2354 <sysclk_enable_module>
    1812:	17 c0       	rjmp	.+46     	; 0x1842 <tc_enable+0xa6>
    1814:	20 34       	cpi	r18, 0x40	; 64
    1816:	8a e0       	ldi	r24, 0x0A	; 10
    1818:	38 07       	cpc	r19, r24
    181a:	39 f4       	brne	.+14     	; 0x182a <tc_enable+0x8e>
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	99 d5       	rcall	.+2866   	; 0x2354 <sysclk_enable_module>
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	85 e0       	ldi	r24, 0x05	; 5
    1826:	96 d5       	rcall	.+2860   	; 0x2354 <sysclk_enable_module>
    1828:	0c c0       	rjmp	.+24     	; 0x1842 <tc_enable+0xa6>
    182a:	21 15       	cp	r18, r1
    182c:	3b 40       	sbci	r19, 0x0B	; 11
    182e:	39 f4       	brne	.+14     	; 0x183e <tc_enable+0xa2>
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	8f d5       	rcall	.+2846   	; 0x2354 <sysclk_enable_module>
    1836:	64 e0       	ldi	r22, 0x04	; 4
    1838:	86 e0       	ldi	r24, 0x06	; 6
    183a:	8c d5       	rcall	.+2840   	; 0x2354 <sysclk_enable_module>
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <tc_enable+0xa6>
    183e:	cf bf       	out	0x3f, r28	; 63
    1840:	0e c0       	rjmp	.+28     	; 0x185e <tc_enable+0xc2>
    1842:	80 91 d3 22 	lds	r24, 0x22D3	; 0x8022d3 <sleepmgr_locks+0x1>
    1846:	8f 3f       	cpi	r24, 0xFF	; 255
    1848:	09 f4       	brne	.+2      	; 0x184c <tc_enable+0xb0>
    184a:	ff cf       	rjmp	.-2      	; 0x184a <tc_enable+0xae>
    184c:	9f b7       	in	r25, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	e2 ed       	ldi	r30, 0xD2	; 210
    1852:	f2 e2       	ldi	r31, 0x22	; 34
    1854:	81 81       	ldd	r24, Z+1	; 0x01
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	81 83       	std	Z+1, r24	; 0x01
    185a:	9f bf       	out	0x3f, r25	; 63
    185c:	cf bf       	out	0x3f, r28	; 63
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1862:	81 15       	cp	r24, r1
    1864:	28 e0       	ldi	r18, 0x08	; 8
    1866:	92 07       	cpc	r25, r18
    1868:	29 f4       	brne	.+10     	; 0x1874 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    186a:	60 93 6a 22 	sts	0x226A, r22	; 0x80226a <tc_tcc0_ovf_callback>
    186e:	70 93 6b 22 	sts	0x226B, r23	; 0x80226b <tc_tcc0_ovf_callback+0x1>
    1872:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1874:	80 34       	cpi	r24, 0x40	; 64
    1876:	28 e0       	ldi	r18, 0x08	; 8
    1878:	92 07       	cpc	r25, r18
    187a:	29 f4       	brne	.+10     	; 0x1886 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    187c:	60 93 5e 22 	sts	0x225E, r22	; 0x80225e <tc_tcc1_ovf_callback>
    1880:	70 93 5f 22 	sts	0x225F, r23	; 0x80225f <tc_tcc1_ovf_callback+0x1>
    1884:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1886:	81 15       	cp	r24, r1
    1888:	29 e0       	ldi	r18, 0x09	; 9
    188a:	92 07       	cpc	r25, r18
    188c:	29 f4       	brne	.+10     	; 0x1898 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    188e:	60 93 56 22 	sts	0x2256, r22	; 0x802256 <tc_tcd0_ovf_callback>
    1892:	70 93 57 22 	sts	0x2257, r23	; 0x802257 <tc_tcd0_ovf_callback+0x1>
    1896:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1898:	80 34       	cpi	r24, 0x40	; 64
    189a:	29 e0       	ldi	r18, 0x09	; 9
    189c:	92 07       	cpc	r25, r18
    189e:	29 f4       	brne	.+10     	; 0x18aa <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    18a0:	60 93 4a 22 	sts	0x224A, r22	; 0x80224a <tc_tcd1_ovf_callback>
    18a4:	70 93 4b 22 	sts	0x224B, r23	; 0x80224b <tc_tcd1_ovf_callback+0x1>
    18a8:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    18aa:	81 15       	cp	r24, r1
    18ac:	2a e0       	ldi	r18, 0x0A	; 10
    18ae:	92 07       	cpc	r25, r18
    18b0:	29 f4       	brne	.+10     	; 0x18bc <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    18b2:	60 93 42 22 	sts	0x2242, r22	; 0x802242 <tc_tce0_ovf_callback>
    18b6:	70 93 43 22 	sts	0x2243, r23	; 0x802243 <tc_tce0_ovf_callback+0x1>
    18ba:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    18bc:	80 34       	cpi	r24, 0x40	; 64
    18be:	2a e0       	ldi	r18, 0x0A	; 10
    18c0:	92 07       	cpc	r25, r18
    18c2:	29 f4       	brne	.+10     	; 0x18ce <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    18c4:	60 93 36 22 	sts	0x2236, r22	; 0x802236 <tc_tce1_ovf_callback>
    18c8:	70 93 37 22 	sts	0x2237, r23	; 0x802237 <tc_tce1_ovf_callback+0x1>
    18cc:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    18ce:	81 15       	cp	r24, r1
    18d0:	9b 40       	sbci	r25, 0x0B	; 11
    18d2:	21 f4       	brne	.+8      	; 0x18dc <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    18d4:	60 93 2e 22 	sts	0x222E, r22	; 0x80222e <tc_tcf0_ovf_callback>
    18d8:	70 93 2f 22 	sts	0x222F, r23	; 0x80222f <tc_tcf0_ovf_callback+0x1>
    18dc:	08 95       	ret

000018de <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    18de:	fc 01       	movw	r30, r24
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	95 ff       	sbrs	r25, 5
    18e4:	fd cf       	rjmp	.-6      	; 0x18e0 <usart_putchar+0x2>
    18e6:	60 83       	st	Z, r22
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	08 95       	ret

000018ee <usart_getchar>:
    18ee:	fc 01       	movw	r30, r24
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	99 23       	and	r25, r25
    18f4:	ec f7       	brge	.-6      	; 0x18f0 <usart_getchar+0x2>
    18f6:	80 81       	ld	r24, Z
    18f8:	08 95       	ret

000018fa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	7c 01       	movw	r14, r24
    1916:	4a 01       	movw	r8, r20
    1918:	5b 01       	movw	r10, r22
    191a:	28 01       	movw	r4, r16
    191c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    191e:	fc 01       	movw	r30, r24
    1920:	84 81       	ldd	r24, Z+4	; 0x04
    1922:	82 ff       	sbrs	r24, 2
    1924:	16 c0       	rjmp	.+44     	; 0x1952 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1926:	d9 01       	movw	r26, r18
    1928:	c8 01       	movw	r24, r16
    192a:	68 94       	set
    192c:	12 f8       	bld	r1, 2
    192e:	b6 95       	lsr	r27
    1930:	a7 95       	ror	r26
    1932:	97 95       	ror	r25
    1934:	87 95       	ror	r24
    1936:	16 94       	lsr	r1
    1938:	d1 f7       	brne	.-12     	; 0x192e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    193a:	b9 01       	movw	r22, r18
    193c:	a8 01       	movw	r20, r16
    193e:	03 2e       	mov	r0, r19
    1940:	36 e1       	ldi	r19, 0x16	; 22
    1942:	76 95       	lsr	r23
    1944:	67 95       	ror	r22
    1946:	57 95       	ror	r21
    1948:	47 95       	ror	r20
    194a:	3a 95       	dec	r19
    194c:	d1 f7       	brne	.-12     	; 0x1942 <usart_set_baudrate+0x48>
    194e:	30 2d       	mov	r19, r0
    1950:	15 c0       	rjmp	.+42     	; 0x197c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1952:	d9 01       	movw	r26, r18
    1954:	c8 01       	movw	r24, r16
    1956:	68 94       	set
    1958:	13 f8       	bld	r1, 3
    195a:	b6 95       	lsr	r27
    195c:	a7 95       	ror	r26
    195e:	97 95       	ror	r25
    1960:	87 95       	ror	r24
    1962:	16 94       	lsr	r1
    1964:	d1 f7       	brne	.-12     	; 0x195a <usart_set_baudrate+0x60>
		min_rate /= 2;
    1966:	b9 01       	movw	r22, r18
    1968:	a8 01       	movw	r20, r16
    196a:	03 2e       	mov	r0, r19
    196c:	37 e1       	ldi	r19, 0x17	; 23
    196e:	76 95       	lsr	r23
    1970:	67 95       	ror	r22
    1972:	57 95       	ror	r21
    1974:	47 95       	ror	r20
    1976:	3a 95       	dec	r19
    1978:	d1 f7       	brne	.-12     	; 0x196e <usart_set_baudrate+0x74>
    197a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    197c:	88 15       	cp	r24, r8
    197e:	99 05       	cpc	r25, r9
    1980:	aa 05       	cpc	r26, r10
    1982:	bb 05       	cpc	r27, r11
    1984:	08 f4       	brcc	.+2      	; 0x1988 <usart_set_baudrate+0x8e>
    1986:	a2 c0       	rjmp	.+324    	; 0x1acc <usart_set_baudrate+0x1d2>
    1988:	84 16       	cp	r8, r20
    198a:	95 06       	cpc	r9, r21
    198c:	a6 06       	cpc	r10, r22
    198e:	b7 06       	cpc	r11, r23
    1990:	08 f4       	brcc	.+2      	; 0x1994 <usart_set_baudrate+0x9a>
    1992:	9e c0       	rjmp	.+316    	; 0x1ad0 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1994:	f7 01       	movw	r30, r14
    1996:	84 81       	ldd	r24, Z+4	; 0x04
    1998:	82 fd       	sbrc	r24, 2
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <usart_set_baudrate+0xaa>
		baud *= 2;
    199c:	88 0c       	add	r8, r8
    199e:	99 1c       	adc	r9, r9
    19a0:	aa 1c       	adc	r10, r10
    19a2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    19a4:	c3 01       	movw	r24, r6
    19a6:	b2 01       	movw	r22, r4
    19a8:	a5 01       	movw	r20, r10
    19aa:	94 01       	movw	r18, r8
    19ac:	00 d7       	rcall	.+3584   	; 0x27ae <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    19ae:	2f 3f       	cpi	r18, 0xFF	; 255
    19b0:	31 05       	cpc	r19, r1
    19b2:	41 05       	cpc	r20, r1
    19b4:	51 05       	cpc	r21, r1
    19b6:	08 f4       	brcc	.+2      	; 0x19ba <usart_set_baudrate+0xc0>
    19b8:	8d c0       	rjmp	.+282    	; 0x1ad4 <usart_set_baudrate+0x1da>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	c9 ef       	ldi	r28, 0xF9	; 249
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <usart_set_baudrate+0xd6>
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	4a 07       	cpc	r20, r26
    19cc:	5b 07       	cpc	r21, r27
    19ce:	58 f0       	brcs	.+22     	; 0x19e6 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	aa 1f       	adc	r26, r26
    19d6:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    19d8:	cd 3f       	cpi	r28, 0xFD	; 253
    19da:	0c f4       	brge	.+2      	; 0x19de <usart_set_baudrate+0xe4>
			limit |= 1;
    19dc:	81 60       	ori	r24, 0x01	; 1
    19de:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    19e0:	c7 30       	cpi	r28, 0x07	; 7
    19e2:	89 f7       	brne	.-30     	; 0x19c6 <usart_set_baudrate+0xcc>
    19e4:	4d c0       	rjmp	.+154    	; 0x1a80 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    19e6:	cc 23       	and	r28, r28
    19e8:	0c f0       	brlt	.+2      	; 0x19ec <usart_set_baudrate+0xf2>
    19ea:	4a c0       	rjmp	.+148    	; 0x1a80 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    19ec:	d5 01       	movw	r26, r10
    19ee:	c4 01       	movw	r24, r8
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	aa 1f       	adc	r26, r26
    19f6:	bb 1f       	adc	r27, r27
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	aa 1f       	adc	r26, r26
    19fe:	bb 1f       	adc	r27, r27
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	48 1a       	sub	r4, r24
    1a0a:	59 0a       	sbc	r5, r25
    1a0c:	6a 0a       	sbc	r6, r26
    1a0e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1a10:	ce 3f       	cpi	r28, 0xFE	; 254
    1a12:	ec f4       	brge	.+58     	; 0x1a4e <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1a14:	8d ef       	ldi	r24, 0xFD	; 253
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	8c 1b       	sub	r24, r28
    1a1a:	91 09       	sbc	r25, r1
    1a1c:	c7 fd       	sbrc	r28, 7
    1a1e:	93 95       	inc	r25
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <usart_set_baudrate+0x130>
    1a22:	44 0c       	add	r4, r4
    1a24:	55 1c       	adc	r5, r5
    1a26:	66 1c       	adc	r6, r6
    1a28:	77 1c       	adc	r7, r7
    1a2a:	8a 95       	dec	r24
    1a2c:	d2 f7       	brpl	.-12     	; 0x1a22 <usart_set_baudrate+0x128>
    1a2e:	d5 01       	movw	r26, r10
    1a30:	c4 01       	movw	r24, r8
    1a32:	b6 95       	lsr	r27
    1a34:	a7 95       	ror	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	64 0d       	add	r22, r4
    1a40:	75 1d       	adc	r23, r5
    1a42:	86 1d       	adc	r24, r6
    1a44:	97 1d       	adc	r25, r7
    1a46:	a5 01       	movw	r20, r10
    1a48:	94 01       	movw	r18, r8
    1a4a:	b1 d6       	rcall	.+3426   	; 0x27ae <__udivmodsi4>
    1a4c:	35 c0       	rjmp	.+106    	; 0x1ab8 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	8c 0f       	add	r24, r28
    1a52:	a5 01       	movw	r20, r10
    1a54:	94 01       	movw	r18, r8
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <usart_set_baudrate+0x166>
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	44 1f       	adc	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	8a 95       	dec	r24
    1a62:	d2 f7       	brpl	.-12     	; 0x1a58 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    1a64:	da 01       	movw	r26, r20
    1a66:	c9 01       	movw	r24, r18
    1a68:	b6 95       	lsr	r27
    1a6a:	a7 95       	ror	r26
    1a6c:	97 95       	ror	r25
    1a6e:	87 95       	ror	r24
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	64 0d       	add	r22, r4
    1a76:	75 1d       	adc	r23, r5
    1a78:	86 1d       	adc	r24, r6
    1a7a:	97 1d       	adc	r25, r7
    1a7c:	98 d6       	rcall	.+3376   	; 0x27ae <__udivmodsi4>
    1a7e:	1c c0       	rjmp	.+56     	; 0x1ab8 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	8c 0f       	add	r24, r28
    1a84:	a5 01       	movw	r20, r10
    1a86:	94 01       	movw	r18, r8
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <usart_set_baudrate+0x198>
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	44 1f       	adc	r20, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	8a 95       	dec	r24
    1a94:	d2 f7       	brpl	.-12     	; 0x1a8a <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1a96:	da 01       	movw	r26, r20
    1a98:	c9 01       	movw	r24, r18
    1a9a:	b6 95       	lsr	r27
    1a9c:	a7 95       	ror	r26
    1a9e:	97 95       	ror	r25
    1aa0:	87 95       	ror	r24
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	64 0d       	add	r22, r4
    1aa8:	75 1d       	adc	r23, r5
    1aaa:	86 1d       	adc	r24, r6
    1aac:	97 1d       	adc	r25, r7
    1aae:	7f d6       	rcall	.+3326   	; 0x27ae <__udivmodsi4>
    1ab0:	21 50       	subi	r18, 0x01	; 1
    1ab2:	31 09       	sbc	r19, r1
    1ab4:	41 09       	sbc	r20, r1
    1ab6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1ab8:	83 2f       	mov	r24, r19
    1aba:	8f 70       	andi	r24, 0x0F	; 15
    1abc:	c2 95       	swap	r28
    1abe:	c0 7f       	andi	r28, 0xF0	; 240
    1ac0:	c8 2b       	or	r28, r24
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1ac6:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	18 c0       	rjmp	.+48     	; 0x1afc <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	16 c0       	rjmp	.+44     	; 0x1afc <usart_set_baudrate+0x202>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ad4:	d5 01       	movw	r26, r10
    1ad6:	c4 01       	movw	r24, r8
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	aa 1f       	adc	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	aa 1f       	adc	r26, r26
    1aee:	bb 1f       	adc	r27, r27
    1af0:	48 1a       	sub	r4, r24
    1af2:	59 0a       	sbc	r5, r25
    1af4:	6a 0a       	sbc	r6, r26
    1af6:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1af8:	c9 ef       	ldi	r28, 0xF9	; 249
    1afa:	8c cf       	rjmp	.-232    	; 0x1a14 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	08 95       	ret

00001b18 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
    1b22:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <usart_init_rs232+0x12>
    1b28:	e6 c0       	rjmp	.+460    	; 0x1cf6 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1b2a:	80 3c       	cpi	r24, 0xC0	; 192
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	21 f4       	brne	.+8      	; 0x1b38 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1b30:	60 e1       	ldi	r22, 0x10	; 16
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	0f d4       	rcall	.+2078   	; 0x2354 <sysclk_enable_module>
    1b36:	df c0       	rjmp	.+446    	; 0x1cf6 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1b38:	c0 38       	cpi	r28, 0x80	; 128
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	d8 07       	cpc	r29, r24
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1b40:	62 e0       	ldi	r22, 0x02	; 2
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	07 d4       	rcall	.+2062   	; 0x2354 <sysclk_enable_module>
    1b46:	d7 c0       	rjmp	.+430    	; 0x1cf6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1b48:	c1 15       	cp	r28, r1
    1b4a:	e1 e0       	ldi	r30, 0x01	; 1
    1b4c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <usart_init_rs232+0x40>
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	ff d3       	rcall	.+2046   	; 0x2354 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1b56:	cf c0       	rjmp	.+414    	; 0x1cf6 <usart_init_rs232+0x1de>
    1b58:	c0 38       	cpi	r28, 0x80	; 128
    1b5a:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1b5c:	df 07       	cpc	r29, r31
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <usart_init_rs232+0x50>
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	f7 d3       	rcall	.+2030   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1b66:	c7 c0       	rjmp	.+398    	; 0x1cf6 <usart_init_rs232+0x1de>
    1b68:	c0 39       	cpi	r28, 0x90	; 144
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1b6c:	d8 07       	cpc	r29, r24
    1b6e:	21 f4       	brne	.+8      	; 0x1b78 <usart_init_rs232+0x60>
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	ef d3       	rcall	.+2014   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1b76:	bf c0       	rjmp	.+382    	; 0x1cf6 <usart_init_rs232+0x1de>
    1b78:	c1 15       	cp	r28, r1
    1b7a:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1b7c:	de 07       	cpc	r29, r30
    1b7e:	21 f4       	brne	.+8      	; 0x1b88 <usart_init_rs232+0x70>
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1b84:	e7 d3       	rcall	.+1998   	; 0x2354 <sysclk_enable_module>
    1b86:	b7 c0       	rjmp	.+366    	; 0x1cf6 <usart_init_rs232+0x1de>
    1b88:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1b8a:	f2 e0       	ldi	r31, 0x02	; 2
    1b8c:	df 07       	cpc	r29, r31
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <usart_init_rs232+0x80>
    1b90:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	df d3       	rcall	.+1982   	; 0x2354 <sysclk_enable_module>
    1b96:	af c0       	rjmp	.+350    	; 0x1cf6 <usart_init_rs232+0x1de>
    1b98:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	d8 07       	cpc	r29, r24
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <usart_init_rs232+0x90>
    1ba0:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	d7 d3       	rcall	.+1966   	; 0x2354 <sysclk_enable_module>
    1ba6:	a7 c0       	rjmp	.+334    	; 0x1cf6 <usart_init_rs232+0x1de>
    1ba8:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1baa:	e8 e0       	ldi	r30, 0x08	; 8
    1bac:	de 07       	cpc	r29, r30
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <usart_init_rs232+0xa0>
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	cf d3       	rcall	.+1950   	; 0x2354 <sysclk_enable_module>
    1bb6:	9f c0       	rjmp	.+318    	; 0x1cf6 <usart_init_rs232+0x1de>
    1bb8:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1bba:	f9 e0       	ldi	r31, 0x09	; 9
    1bbc:	df 07       	cpc	r29, r31
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <usart_init_rs232+0xb0>
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	c7 d3       	rcall	.+1934   	; 0x2354 <sysclk_enable_module>
    1bc6:	97 c0       	rjmp	.+302    	; 0x1cf6 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1bc8:	c1 15       	cp	r28, r1
    1bca:	8a e0       	ldi	r24, 0x0A	; 10
    1bcc:	d8 07       	cpc	r29, r24
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	85 e0       	ldi	r24, 0x05	; 5
    1bd4:	bf d3       	rcall	.+1918   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1bd6:	8f c0       	rjmp	.+286    	; 0x1cf6 <usart_init_rs232+0x1de>
    1bd8:	c1 15       	cp	r28, r1
    1bda:	eb e0       	ldi	r30, 0x0B	; 11
    1bdc:	de 07       	cpc	r29, r30
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	86 e0       	ldi	r24, 0x06	; 6
    1be4:	b7 d3       	rcall	.+1902   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1be6:	87 c0       	rjmp	.+270    	; 0x1cf6 <usart_init_rs232+0x1de>
    1be8:	c0 34       	cpi	r28, 0x40	; 64
    1bea:	f8 e0       	ldi	r31, 0x08	; 8
    1bec:	df 07       	cpc	r29, r31
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	af d3       	rcall	.+1886   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1bf6:	7f c0       	rjmp	.+254    	; 0x1cf6 <usart_init_rs232+0x1de>
    1bf8:	c0 34       	cpi	r28, 0x40	; 64
    1bfa:	89 e0       	ldi	r24, 0x09	; 9
    1bfc:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <usart_init_rs232+0xf0>
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1c04:	a7 d3       	rcall	.+1870   	; 0x2354 <sysclk_enable_module>
    1c06:	77 c0       	rjmp	.+238    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c08:	c0 34       	cpi	r28, 0x40	; 64
    1c0a:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1c0c:	de 07       	cpc	r29, r30
    1c0e:	21 f4       	brne	.+8      	; 0x1c18 <usart_init_rs232+0x100>
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1c14:	9f d3       	rcall	.+1854   	; 0x2354 <sysclk_enable_module>
    1c16:	6f c0       	rjmp	.+222    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c18:	c0 39       	cpi	r28, 0x90	; 144
    1c1a:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1c1c:	df 07       	cpc	r29, r31
    1c1e:	21 f4       	brne	.+8      	; 0x1c28 <usart_init_rs232+0x110>
    1c20:	64 e0       	ldi	r22, 0x04	; 4
    1c22:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1c24:	97 d3       	rcall	.+1838   	; 0x2354 <sysclk_enable_module>
    1c26:	67 c0       	rjmp	.+206    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c28:	c0 39       	cpi	r28, 0x90	; 144
    1c2a:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1c2c:	d8 07       	cpc	r29, r24
    1c2e:	21 f4       	brne	.+8      	; 0x1c38 <usart_init_rs232+0x120>
    1c30:	64 e0       	ldi	r22, 0x04	; 4
    1c32:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1c34:	8f d3       	rcall	.+1822   	; 0x2354 <sysclk_enable_module>
    1c36:	5f c0       	rjmp	.+190    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c38:	c0 39       	cpi	r28, 0x90	; 144
    1c3a:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1c3c:	de 07       	cpc	r29, r30
    1c3e:	21 f4       	brne	.+8      	; 0x1c48 <usart_init_rs232+0x130>
    1c40:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	87 d3       	rcall	.+1806   	; 0x2354 <sysclk_enable_module>
    1c46:	57 c0       	rjmp	.+174    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c48:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1c4a:	fb e0       	ldi	r31, 0x0B	; 11
    1c4c:	df 07       	cpc	r29, r31
    1c4e:	21 f4       	brne	.+8      	; 0x1c58 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1c50:	64 e0       	ldi	r22, 0x04	; 4
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	7f d3       	rcall	.+1790   	; 0x2354 <sysclk_enable_module>
    1c56:	4f c0       	rjmp	.+158    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c58:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	d8 07       	cpc	r29, r24
    1c5e:	21 f4       	brne	.+8      	; 0x1c68 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1c60:	68 e0       	ldi	r22, 0x08	; 8
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	77 d3       	rcall	.+1774   	; 0x2354 <sysclk_enable_module>
    1c66:	47 c0       	rjmp	.+142    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c68:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1c6a:	e9 e0       	ldi	r30, 0x09	; 9
    1c6c:	de 07       	cpc	r29, r30
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1c70:	68 e0       	ldi	r22, 0x08	; 8
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	6f d3       	rcall	.+1758   	; 0x2354 <sysclk_enable_module>
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1c78:	c0 3a       	cpi	r28, 0xA0	; 160
    1c7a:	f8 e0       	ldi	r31, 0x08	; 8
    1c7c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1c7e:	21 f4       	brne	.+8      	; 0x1c88 <usart_init_rs232+0x170>
    1c80:	60 e1       	ldi	r22, 0x10	; 16
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	67 d3       	rcall	.+1742   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1c86:	37 c0       	rjmp	.+110    	; 0x1cf6 <usart_init_rs232+0x1de>
    1c88:	c0 3a       	cpi	r28, 0xA0	; 160
    1c8a:	89 e0       	ldi	r24, 0x09	; 9
    1c8c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1c8e:	21 f4       	brne	.+8      	; 0x1c98 <usart_init_rs232+0x180>
    1c90:	60 e1       	ldi	r22, 0x10	; 16
    1c92:	84 e0       	ldi	r24, 0x04	; 4
    1c94:	5f d3       	rcall	.+1726   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1c96:	2f c0       	rjmp	.+94     	; 0x1cf6 <usart_init_rs232+0x1de>
    1c98:	c0 3a       	cpi	r28, 0xA0	; 160
    1c9a:	ea e0       	ldi	r30, 0x0A	; 10
    1c9c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1c9e:	21 f4       	brne	.+8      	; 0x1ca8 <usart_init_rs232+0x190>
    1ca0:	60 e1       	ldi	r22, 0x10	; 16
    1ca2:	85 e0       	ldi	r24, 0x05	; 5
    1ca4:	57 d3       	rcall	.+1710   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1ca6:	27 c0       	rjmp	.+78     	; 0x1cf6 <usart_init_rs232+0x1de>
    1ca8:	c0 3a       	cpi	r28, 0xA0	; 160
    1caa:	fb e0       	ldi	r31, 0x0B	; 11
    1cac:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <usart_init_rs232+0x1a0>
    1cb0:	60 e1       	ldi	r22, 0x10	; 16
    1cb2:	86 e0       	ldi	r24, 0x06	; 6
    1cb4:	4f d3       	rcall	.+1694   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1cb6:	1f c0       	rjmp	.+62     	; 0x1cf6 <usart_init_rs232+0x1de>
    1cb8:	c0 3b       	cpi	r28, 0xB0	; 176
    1cba:	88 e0       	ldi	r24, 0x08	; 8
    1cbc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <usart_init_rs232+0x1b0>
    1cc0:	60 e2       	ldi	r22, 0x20	; 32
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	47 d3       	rcall	.+1678   	; 0x2354 <sysclk_enable_module>
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1cc8:	c0 3b       	cpi	r28, 0xB0	; 176
    1cca:	e9 e0       	ldi	r30, 0x09	; 9
    1ccc:	de 07       	cpc	r29, r30
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1cd0:	60 e2       	ldi	r22, 0x20	; 32
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	3f d3       	rcall	.+1662   	; 0x2354 <sysclk_enable_module>
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <usart_init_rs232+0x1de>
    1cd8:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1cda:	f4 e0       	ldi	r31, 0x04	; 4
    1cdc:	df 07       	cpc	r29, r31
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1ce0:	60 e4       	ldi	r22, 0x40	; 64
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	37 d3       	rcall	.+1646   	; 0x2354 <sysclk_enable_module>
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1ce8:	c0 3a       	cpi	r28, 0xA0	; 160
    1cea:	84 e0       	ldi	r24, 0x04	; 4
    1cec:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <usart_init_rs232+0x1de>
    1cf0:	60 e4       	ldi	r22, 0x40	; 64
    1cf2:	85 e0       	ldi	r24, 0x05	; 5
    1cf4:	2f d3       	rcall	.+1630   	; 0x2354 <sysclk_enable_module>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	8f 73       	andi	r24, 0x3F	; 63
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1d00:	84 81       	ldd	r24, Z+4	; 0x04
    1d02:	89 2b       	or	r24, r25
    1d04:	96 81       	ldd	r25, Z+6	; 0x06
    1d06:	91 11       	cpse	r25, r1
    1d08:	98 e0       	ldi	r25, 0x08	; 8
    1d0a:	89 2b       	or	r24, r25
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	f8 01       	movw	r30, r16
    1d10:	40 81       	ld	r20, Z
    1d12:	51 81       	ldd	r21, Z+1	; 0x01
    1d14:	62 81       	ldd	r22, Z+2	; 0x02
    1d16:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1d18:	00 e0       	ldi	r16, 0x00	; 0
    1d1a:	18 e4       	ldi	r17, 0x48	; 72
    1d1c:	28 ee       	ldi	r18, 0xE8	; 232
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1d1e:	31 e0       	ldi	r19, 0x01	; 1
    1d20:	ce 01       	movw	r24, r28
    1d22:	eb dd       	rcall	.-1066   	; 0x18fa <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	98 60       	ori	r25, 0x08	; 8
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	90 61       	ori	r25, 0x10	; 16
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1d4c:	d9 01       	movw	r26, r18
    1d4e:	c8 01       	movw	r24, r16
    1d50:	b6 95       	lsr	r27
    1d52:	a7 95       	ror	r26
    1d54:	97 95       	ror	r25
    1d56:	87 95       	ror	r24
    1d58:	48 17       	cp	r20, r24
    1d5a:	59 07       	cpc	r21, r25
    1d5c:	6a 07       	cpc	r22, r26
    1d5e:	7b 07       	cpc	r23, r27
    1d60:	70 f4       	brcc	.+28     	; 0x1d7e <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1d62:	6a 01       	movw	r12, r20
    1d64:	7b 01       	movw	r14, r22
    1d66:	cc 0c       	add	r12, r12
    1d68:	dd 1c       	adc	r13, r13
    1d6a:	ee 1c       	adc	r14, r14
    1d6c:	ff 1c       	adc	r15, r15
    1d6e:	c9 01       	movw	r24, r18
    1d70:	b8 01       	movw	r22, r16
    1d72:	a7 01       	movw	r20, r14
    1d74:	96 01       	movw	r18, r12
    1d76:	1b d5       	rcall	.+2614   	; 0x27ae <__udivmodsi4>
    1d78:	21 50       	subi	r18, 0x01	; 1
    1d7a:	31 09       	sbc	r19, r1
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1d82:	83 2f       	mov	r24, r19
    1d84:	8f 70       	andi	r24, 0x0F	; 15
    1d86:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1d88:	2e 83       	std	Y+6, r18	; 0x06
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	08 95       	ret

00001d9c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	ec 01       	movw	r28, r24
    1daa:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <usart_init_spi+0x16>
    1db0:	7b c1       	rjmp	.+758    	; 0x20a8 <usart_init_spi+0x30c>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1db2:	80 3c       	cpi	r24, 0xC0	; 192
    1db4:	91 05       	cpc	r25, r1
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <usart_init_spi+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1db8:	60 e1       	ldi	r22, 0x10	; 16
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	cb d2       	rcall	.+1430   	; 0x2354 <sysclk_enable_module>
    1dbe:	74 c1       	rjmp	.+744    	; 0x20a8 <usart_init_spi+0x30c>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1dc0:	80 38       	cpi	r24, 0x80	; 128
    1dc2:	91 40       	sbci	r25, 0x01	; 1
    1dc4:	21 f4       	brne	.+8      	; 0x1dce <usart_init_spi+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	c4 d2       	rcall	.+1416   	; 0x2354 <sysclk_enable_module>
    1dcc:	6d c1       	rjmp	.+730    	; 0x20a8 <usart_init_spi+0x30c>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1dce:	c1 15       	cp	r28, r1
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <usart_init_spi+0x42>
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	bc d2       	rcall	.+1400   	; 0x2354 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ddc:	65 c1       	rjmp	.+714    	; 0x20a8 <usart_init_spi+0x30c>
    1dde:	c0 38       	cpi	r28, 0x80	; 128
    1de0:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1de2:	de 07       	cpc	r29, r30
    1de4:	21 f4       	brne	.+8      	; 0x1dee <usart_init_spi+0x52>
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	b4 d2       	rcall	.+1384   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1dec:	5d c1       	rjmp	.+698    	; 0x20a8 <usart_init_spi+0x30c>
    1dee:	c0 39       	cpi	r28, 0x90	; 144
    1df0:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1df2:	df 07       	cpc	r29, r31
    1df4:	21 f4       	brne	.+8      	; 0x1dfe <usart_init_spi+0x62>
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	ac d2       	rcall	.+1368   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1dfc:	55 c1       	rjmp	.+682    	; 0x20a8 <usart_init_spi+0x30c>
    1dfe:	c1 15       	cp	r28, r1
    1e00:	32 e0       	ldi	r19, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1e02:	d3 07       	cpc	r29, r19
    1e04:	21 f4       	brne	.+8      	; 0x1e0e <usart_init_spi+0x72>
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1e0a:	a4 d2       	rcall	.+1352   	; 0x2354 <sysclk_enable_module>
    1e0c:	4d c1       	rjmp	.+666    	; 0x20a8 <usart_init_spi+0x30c>
    1e0e:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	d8 07       	cpc	r29, r24
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <usart_init_spi+0x82>
    1e16:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	9c d2       	rcall	.+1336   	; 0x2354 <sysclk_enable_module>
    1e1c:	45 c1       	rjmp	.+650    	; 0x20a8 <usart_init_spi+0x30c>
    1e1e:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1e20:	e3 e0       	ldi	r30, 0x03	; 3
    1e22:	de 07       	cpc	r29, r30
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <usart_init_spi+0x92>
    1e26:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	94 d2       	rcall	.+1320   	; 0x2354 <sysclk_enable_module>
    1e2c:	3d c1       	rjmp	.+634    	; 0x20a8 <usart_init_spi+0x30c>
    1e2e:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1e30:	f8 e0       	ldi	r31, 0x08	; 8
    1e32:	df 07       	cpc	r29, r31
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <usart_init_spi+0xa2>
    1e36:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	8c d2       	rcall	.+1304   	; 0x2354 <sysclk_enable_module>
    1e3c:	35 c1       	rjmp	.+618    	; 0x20a8 <usart_init_spi+0x30c>
    1e3e:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1e40:	39 e0       	ldi	r19, 0x09	; 9
    1e42:	d3 07       	cpc	r29, r19
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <usart_init_spi+0xb2>
    1e46:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1e48:	84 e0       	ldi	r24, 0x04	; 4
    1e4a:	84 d2       	rcall	.+1288   	; 0x2354 <sysclk_enable_module>
    1e4c:	2d c1       	rjmp	.+602    	; 0x20a8 <usart_init_spi+0x30c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1e4e:	c1 15       	cp	r28, r1
    1e50:	8a e0       	ldi	r24, 0x0A	; 10
    1e52:	d8 07       	cpc	r29, r24
    1e54:	21 f4       	brne	.+8      	; 0x1e5e <usart_init_spi+0xc2>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	85 e0       	ldi	r24, 0x05	; 5
    1e5a:	7c d2       	rcall	.+1272   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1e5c:	25 c1       	rjmp	.+586    	; 0x20a8 <usart_init_spi+0x30c>
    1e5e:	c1 15       	cp	r28, r1
    1e60:	eb e0       	ldi	r30, 0x0B	; 11
    1e62:	de 07       	cpc	r29, r30
    1e64:	21 f4       	brne	.+8      	; 0x1e6e <usart_init_spi+0xd2>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	74 d2       	rcall	.+1256   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1e6c:	1d c1       	rjmp	.+570    	; 0x20a8 <usart_init_spi+0x30c>
    1e6e:	c0 34       	cpi	r28, 0x40	; 64
    1e70:	f8 e0       	ldi	r31, 0x08	; 8
    1e72:	df 07       	cpc	r29, r31
    1e74:	21 f4       	brne	.+8      	; 0x1e7e <usart_init_spi+0xe2>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	6c d2       	rcall	.+1240   	; 0x2354 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1e7c:	15 c1       	rjmp	.+554    	; 0x20a8 <usart_init_spi+0x30c>
    1e7e:	c0 34       	cpi	r28, 0x40	; 64
    1e80:	39 e0       	ldi	r19, 0x09	; 9
    1e82:	d3 07       	cpc	r29, r19
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <usart_init_spi+0xf2>
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1e8a:	64 d2       	rcall	.+1224   	; 0x2354 <sysclk_enable_module>
    1e8c:	0d c1       	rjmp	.+538    	; 0x20a8 <usart_init_spi+0x30c>
    1e8e:	c0 34       	cpi	r28, 0x40	; 64
    1e90:	8a e0       	ldi	r24, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1e92:	d8 07       	cpc	r29, r24
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <usart_init_spi+0x102>
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1e9a:	5c d2       	rcall	.+1208   	; 0x2354 <sysclk_enable_module>
    1e9c:	05 c1       	rjmp	.+522    	; 0x20a8 <usart_init_spi+0x30c>
    1e9e:	c0 39       	cpi	r28, 0x90	; 144
    1ea0:	e8 e0       	ldi	r30, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1ea2:	de 07       	cpc	r29, r30
    1ea4:	21 f4       	brne	.+8      	; 0x1eae <usart_init_spi+0x112>
    1ea6:	64 e0       	ldi	r22, 0x04	; 4
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1eaa:	54 d2       	rcall	.+1192   	; 0x2354 <sysclk_enable_module>
    1eac:	fd c0       	rjmp	.+506    	; 0x20a8 <usart_init_spi+0x30c>
    1eae:	c0 39       	cpi	r28, 0x90	; 144
    1eb0:	f9 e0       	ldi	r31, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1eb2:	df 07       	cpc	r29, r31
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <usart_init_spi+0x122>
    1eb6:	64 e0       	ldi	r22, 0x04	; 4
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1eba:	4c d2       	rcall	.+1176   	; 0x2354 <sysclk_enable_module>
    1ebc:	f5 c0       	rjmp	.+490    	; 0x20a8 <usart_init_spi+0x30c>
    1ebe:	c0 39       	cpi	r28, 0x90	; 144
    1ec0:	3a e0       	ldi	r19, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ec2:	d3 07       	cpc	r29, r19
    1ec4:	21 f4       	brne	.+8      	; 0x1ece <usart_init_spi+0x132>
    1ec6:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	44 d2       	rcall	.+1160   	; 0x2354 <sysclk_enable_module>
    1ecc:	ed c0       	rjmp	.+474    	; 0x20a8 <usart_init_spi+0x30c>
    1ece:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1ed0:	8b e0       	ldi	r24, 0x0B	; 11
    1ed2:	d8 07       	cpc	r29, r24
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <usart_init_spi+0x142>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1ed6:	64 e0       	ldi	r22, 0x04	; 4
    1ed8:	86 e0       	ldi	r24, 0x06	; 6
    1eda:	3c d2       	rcall	.+1144   	; 0x2354 <sysclk_enable_module>
    1edc:	e5 c0       	rjmp	.+458    	; 0x20a8 <usart_init_spi+0x30c>
    1ede:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1ee0:	e8 e0       	ldi	r30, 0x08	; 8
    1ee2:	de 07       	cpc	r29, r30
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <usart_init_spi+0x152>
    1ee6:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	34 d2       	rcall	.+1128   	; 0x2354 <sysclk_enable_module>
    1eec:	dd c0       	rjmp	.+442    	; 0x20a8 <usart_init_spi+0x30c>
    1eee:	c0 3c       	cpi	r28, 0xC0	; 192
    1ef0:	f9 e0       	ldi	r31, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1ef2:	df 07       	cpc	r29, r31
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <usart_init_spi+0x162>
    1ef6:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	2c d2       	rcall	.+1112   	; 0x2354 <sysclk_enable_module>
    1efc:	d5 c0       	rjmp	.+426    	; 0x20a8 <usart_init_spi+0x30c>
    1efe:	c0 3a       	cpi	r28, 0xA0	; 160
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1f00:	38 e0       	ldi	r19, 0x08	; 8
    1f02:	d3 07       	cpc	r29, r19
    1f04:	61 f4       	brne	.+24     	; 0x1f1e <usart_init_spi+0x182>
    1f06:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	24 d2       	rcall	.+1096   	; 0x2354 <sysclk_enable_module>
    1f0c:	e0 ea       	ldi	r30, 0xA0	; 160
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1f0e:	f8 e0       	ldi	r31, 0x08	; 8
    1f10:	84 81       	ldd	r24, Z+4	; 0x04
    1f12:	8f 7e       	andi	r24, 0xEF	; 239
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1f14:	84 83       	std	Z+4, r24	; 0x04
    1f16:	f7 01       	movw	r30, r14
    1f18:	24 81       	ldd	r18, Z+4	; 0x04
    1f1a:	22 50       	subi	r18, 0x02	; 2
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1f1c:	43 c0       	rjmp	.+134    	; 0x1fa4 <usart_init_spi+0x208>
    1f1e:	c0 3a       	cpi	r28, 0xA0	; 160
    1f20:	f9 e0       	ldi	r31, 0x09	; 9
    1f22:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <usart_init_spi+0x192>
    1f26:	60 e1       	ldi	r22, 0x10	; 16
    1f28:	84 e0       	ldi	r24, 0x04	; 4
    1f2a:	14 d2       	rcall	.+1064   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1f2c:	bd c0       	rjmp	.+378    	; 0x20a8 <usart_init_spi+0x30c>
    1f2e:	c0 3a       	cpi	r28, 0xA0	; 160
    1f30:	3a e0       	ldi	r19, 0x0A	; 10
    1f32:	d3 07       	cpc	r29, r19
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <usart_init_spi+0x1a2>
    1f36:	60 e1       	ldi	r22, 0x10	; 16
    1f38:	85 e0       	ldi	r24, 0x05	; 5
    1f3a:	0c d2       	rcall	.+1048   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1f3c:	b5 c0       	rjmp	.+362    	; 0x20a8 <usart_init_spi+0x30c>
    1f3e:	c0 3a       	cpi	r28, 0xA0	; 160
    1f40:	8b e0       	ldi	r24, 0x0B	; 11
    1f42:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <usart_init_spi+0x1b2>
    1f46:	60 e1       	ldi	r22, 0x10	; 16
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	04 d2       	rcall	.+1032   	; 0x2354 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1f4c:	ad c0       	rjmp	.+346    	; 0x20a8 <usart_init_spi+0x30c>
    1f4e:	c0 3b       	cpi	r28, 0xB0	; 176
    1f50:	e8 e0       	ldi	r30, 0x08	; 8
    1f52:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1f54:	21 f4       	brne	.+8      	; 0x1f5e <usart_init_spi+0x1c2>
    1f56:	60 e2       	ldi	r22, 0x20	; 32
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	fc d1       	rcall	.+1016   	; 0x2354 <sysclk_enable_module>
    1f5c:	a5 c0       	rjmp	.+330    	; 0x20a8 <usart_init_spi+0x30c>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1f5e:	c0 3b       	cpi	r28, 0xB0	; 176
    1f60:	f9 e0       	ldi	r31, 0x09	; 9
    1f62:	df 07       	cpc	r29, r31
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1f66:	60 e2       	ldi	r22, 0x20	; 32
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	f4 d1       	rcall	.+1000   	; 0x2354 <sysclk_enable_module>
    1f6c:	9d c0       	rjmp	.+314    	; 0x20a8 <usart_init_spi+0x30c>
    1f6e:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1f70:	34 e0       	ldi	r19, 0x04	; 4
    1f72:	d3 07       	cpc	r29, r19
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <usart_init_spi+0x1e2>
    1f76:	60 e4       	ldi	r22, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	ec d1       	rcall	.+984    	; 0x2354 <sysclk_enable_module>
    1f7c:	95 c0       	rjmp	.+298    	; 0x20a8 <usart_init_spi+0x30c>
    1f7e:	c0 3a       	cpi	r28, 0xA0	; 160
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	d8 07       	cpc	r29, r24
    1f84:	21 f4       	brne	.+8      	; 0x1f8e <usart_init_spi+0x1f2>
    1f86:	60 e4       	ldi	r22, 0x40	; 64
    1f88:	85 e0       	ldi	r24, 0x05	; 5
    1f8a:	e4 d1       	rcall	.+968    	; 0x2354 <sysclk_enable_module>
    1f8c:	8d c0       	rjmp	.+282    	; 0x20a8 <usart_init_spi+0x30c>
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	8f 7e       	andi	r24, 0xEF	; 239
    1f92:	8c 83       	std	Y+4, r24	; 0x04
    1f94:	fb 01       	movw	r30, r22
    1f96:	24 81       	ldd	r18, Z+4	; 0x04
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1f98:	22 50       	subi	r18, 0x02	; 2
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	c0 3a       	cpi	r28, 0xA0	; 160
    1f9e:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1fa0:	df 07       	cpc	r29, r31
    1fa2:	31 f4       	brne	.+12     	; 0x1fb0 <usart_init_spi+0x214>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1fa4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1fa8:	84 fd       	sbrc	r24, 4
    1faa:	86 c0       	rjmp	.+268    	; 0x20b8 <usart_init_spi+0x31c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1fac:	11 e1       	ldi	r17, 0x11	; 17
    1fae:	85 c0       	rjmp	.+266    	; 0x20ba <usart_init_spi+0x31e>
    1fb0:	80 3b       	cpi	r24, 0xB0	; 176
    1fb2:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1fb4:	93 07       	cpc	r25, r19
    1fb6:	79 f0       	breq	.+30     	; 0x1fd6 <usart_init_spi+0x23a>
    1fb8:	80 3a       	cpi	r24, 0xA0	; 160
    1fba:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1fbc:	9e 07       	cpc	r25, r30
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <usart_init_spi+0x230>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1fc0:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1fc4:	34 fd       	sbrc	r19, 4
    1fc6:	7c c0       	rjmp	.+248    	; 0x20c0 <usart_init_spi+0x324>
    1fc8:	19 e1       	ldi	r17, 0x19	; 25
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <usart_init_spi+0x250>
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1fcc:	80 3b       	cpi	r24, 0xB0	; 176
    1fce:	f9 e0       	ldi	r31, 0x09	; 9
    1fd0:	9f 07       	cpc	r25, r31
    1fd2:	a9 f0       	breq	.+42     	; 0x1ffe <usart_init_spi+0x262>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <usart_init_spi+0x23c>
    1fd6:	15 e1       	ldi	r17, 0x15	; 21
    1fd8:	80 3a       	cpi	r24, 0xA0	; 160
    1fda:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1fdc:	93 07       	cpc	r25, r19
    1fde:	31 f4       	brne	.+12     	; 0x1fec <usart_init_spi+0x250>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1fe0:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1fe4:	84 fd       	sbrc	r24, 4
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1fe6:	6e c0       	rjmp	.+220    	; 0x20c4 <usart_init_spi+0x328>
    1fe8:	11 e2       	ldi	r17, 0x21	; 33
    1fea:	0c c0       	rjmp	.+24     	; 0x2004 <usart_init_spi+0x268>
    1fec:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1fee:	9b 40       	sbci	r25, 0x0B	; 11
    1ff0:	49 f4       	brne	.+18     	; 0x2004 <usart_init_spi+0x268>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1ff2:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1ff6:	84 fd       	sbrc	r24, 4
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <usart_init_spi+0x266>
    1ffa:	19 e2       	ldi	r17, 0x29	; 41
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <usart_init_spi+0x268>
    1ffe:	1d e1       	ldi	r17, 0x1D	; 29
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <usart_init_spi+0x268>
    2002:	1d e2       	ldi	r17, 0x2D	; 45
    2004:	e1 2f       	mov	r30, r17
    2006:	e6 95       	lsr	r30
    2008:	e6 95       	lsr	r30
    200a:	e6 95       	lsr	r30
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    200c:	30 e2       	ldi	r19, 0x20	; 32
    200e:	e3 9f       	mul	r30, r19
    2010:	f0 01       	movw	r30, r0
    2012:	11 24       	eor	r1, r1
    2014:	fa 5f       	subi	r31, 0xFA	; 250
    2016:	17 70       	andi	r17, 0x07	; 7
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    201c:	01 2e       	mov	r0, r17
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <usart_init_spi+0x288>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <usart_init_spi+0x284>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    2028:	81 83       	std	Z+1, r24	; 0x01
    202a:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    202c:	10 f0       	brcs	.+4      	; 0x2032 <usart_init_spi+0x296>
    202e:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <usart_init_spi+0x298>
	cpu_irq_disable();
    2032:	40 e4       	ldi	r20, 0x40	; 64
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    2034:	df 01       	movw	r26, r30
    2036:	50 96       	adiw	r26, 0x10	; 16
    2038:	a1 0f       	add	r26, r17
	*pin_ctrl |= mode;
    203a:	b1 1d       	adc	r27, r1
    203c:	3f b7       	in	r19, 0x3f	; 63
    203e:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2040:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2042:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    2044:	2c 93       	st	X, r18
    2046:	9c 91       	ld	r25, X
    2048:	94 2b       	or	r25, r20
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    204a:	9c 93       	st	X, r25
    204c:	3f bf       	out	0x3f, r19	; 63
    204e:	85 83       	std	Z+5, r24	; 0x05
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
		usart->CTRLC |= USART_UCPHA_bm;
    2052:	80 6c       	ori	r24, 0xC0	; 192
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	f7 01       	movw	r30, r14
    2058:	84 81       	ldd	r24, Z+4	; 0x04
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    205a:	8d 7f       	andi	r24, 0xFD	; 253
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	21 f4       	brne	.+8      	; 0x2068 <usart_init_spi+0x2cc>
	}
	if (opt->data_order) {
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	82 60       	ori	r24, 0x02	; 2
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	03 c0       	rjmp	.+6      	; 0x206e <usart_init_spi+0x2d2>
		(usart)->CTRLC |= USART_DORD_bm;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	8d 7f       	andi	r24, 0xFD	; 253
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	f7 01       	movw	r30, r14
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    2070:	85 81       	ldd	r24, Z+5	; 0x05
    2072:	88 23       	and	r24, r24
    2074:	21 f0       	breq	.+8      	; 0x207e <usart_init_spi+0x2e2>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	84 60       	ori	r24, 0x04	; 4
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <usart_init_spi+0x2e8>
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	8b 7f       	andi	r24, 0xFB	; 251
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	f7 01       	movw	r30, r14
    2086:	40 81       	ld	r20, Z
    2088:	51 81       	ldd	r21, Z+1	; 0x01
    208a:	62 81       	ldd	r22, Z+2	; 0x02
    208c:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    208e:	00 e0       	ldi	r16, 0x00	; 0
    2090:	18 e4       	ldi	r17, 0x48	; 72
    2092:	28 ee       	ldi	r18, 0xE8	; 232
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2094:	31 e0       	ldi	r19, 0x01	; 1
    2096:	ce 01       	movw	r24, r28
    2098:	50 de       	rcall	.-864    	; 0x1d3a <usart_spi_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    209c:	88 60       	ori	r24, 0x08	; 8
    209e:	8c 83       	std	Y+4, r24	; 0x04
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    20a2:	80 61       	ori	r24, 0x10	; 16
    20a4:	8c 83       	std	Y+4, r24	; 0x04
    20a6:	10 c0       	rjmp	.+32     	; 0x20c8 <usart_init_spi+0x32c>
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    20ac:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    20ae:	f7 01       	movw	r30, r14
    20b0:	24 81       	ldd	r18, Z+4	; 0x04
    20b2:	22 50       	subi	r18, 0x02	; 2
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    20b4:	ce 01       	movw	r24, r28
    20b6:	7c cf       	rjmp	.-264    	; 0x1fb0 <usart_init_spi+0x214>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    20b8:	15 e1       	ldi	r17, 0x15	; 21
    20ba:	80 ea       	ldi	r24, 0xA0	; 160
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    20bc:	98 e0       	ldi	r25, 0x08	; 8
    20be:	86 cf       	rjmp	.-244    	; 0x1fcc <usart_init_spi+0x230>
    20c0:	1d e1       	ldi	r17, 0x1D	; 29
    20c2:	94 cf       	rjmp	.-216    	; 0x1fec <usart_init_spi+0x250>
    20c4:	15 e2       	ldi	r17, 0x25	; 37
    20c6:	9e cf       	rjmp	.-196    	; 0x2004 <usart_init_spi+0x268>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	08 95       	ret

000020d6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    20d6:	80 3a       	cpi	r24, 0xA0	; 160
    20d8:	28 e0       	ldi	r18, 0x08	; 8
    20da:	92 07       	cpc	r25, r18
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <usart_spi_init+0x10>
    20de:	60 e1       	ldi	r22, 0x10	; 16
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	38 c1       	rjmp	.+624    	; 0x2354 <sysclk_enable_module>
    20e4:	08 95       	ret
    20e6:	80 3b       	cpi	r24, 0xB0	; 176
    20e8:	28 e0       	ldi	r18, 0x08	; 8
    20ea:	92 07       	cpc	r25, r18
    20ec:	21 f4       	brne	.+8      	; 0x20f6 <usart_spi_init+0x20>
    20ee:	60 e2       	ldi	r22, 0x20	; 32
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	30 c1       	rjmp	.+608    	; 0x2354 <sysclk_enable_module>
    20f4:	08 95       	ret
    20f6:	80 3a       	cpi	r24, 0xA0	; 160
    20f8:	29 e0       	ldi	r18, 0x09	; 9
    20fa:	92 07       	cpc	r25, r18
    20fc:	21 f4       	brne	.+8      	; 0x2106 <usart_spi_init+0x30>
    20fe:	60 e1       	ldi	r22, 0x10	; 16
    2100:	84 e0       	ldi	r24, 0x04	; 4
    2102:	28 c1       	rjmp	.+592    	; 0x2354 <sysclk_enable_module>
    2104:	08 95       	ret
    2106:	80 3b       	cpi	r24, 0xB0	; 176
    2108:	29 e0       	ldi	r18, 0x09	; 9
    210a:	92 07       	cpc	r25, r18
    210c:	21 f4       	brne	.+8      	; 0x2116 <usart_spi_init+0x40>
    210e:	60 e2       	ldi	r22, 0x20	; 32
    2110:	84 e0       	ldi	r24, 0x04	; 4
    2112:	20 c1       	rjmp	.+576    	; 0x2354 <sysclk_enable_module>
    2114:	08 95       	ret
    2116:	80 3a       	cpi	r24, 0xA0	; 160
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	92 07       	cpc	r25, r18
    211c:	21 f4       	brne	.+8      	; 0x2126 <usart_spi_init+0x50>
    211e:	60 e1       	ldi	r22, 0x10	; 16
    2120:	85 e0       	ldi	r24, 0x05	; 5
    2122:	18 c1       	rjmp	.+560    	; 0x2354 <sysclk_enable_module>
    2124:	08 95       	ret
    2126:	80 3a       	cpi	r24, 0xA0	; 160
    2128:	9b 40       	sbci	r25, 0x0B	; 11
    212a:	19 f4       	brne	.+6      	; 0x2132 <usart_spi_init+0x5c>
    212c:	60 e1       	ldi	r22, 0x10	; 16
    212e:	86 e0       	ldi	r24, 0x06	; 6
    2130:	11 c1       	rjmp	.+546    	; 0x2354 <sysclk_enable_module>
    2132:	08 95       	ret

00002134 <usart_spi_setup_device>:
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	00 d0       	rcall	.+0      	; 0x213e <usart_spi_setup_device+0xa>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <usart_spi_setup_device+0xc>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	09 83       	std	Y+1, r16	; 0x01
    2146:	1a 83       	std	Y+2, r17	; 0x02
    2148:	2b 83       	std	Y+3, r18	; 0x03
    214a:	3c 83       	std	Y+4, r19	; 0x04
    214c:	4d 83       	std	Y+5, r20	; 0x05
    214e:	1e 82       	std	Y+6, r1	; 0x06
    2150:	be 01       	movw	r22, r28
    2152:	6f 5f       	subi	r22, 0xFF	; 255
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	22 de       	rcall	.-956    	; 0x1d9c <usart_init_spi>
    2158:	26 96       	adiw	r28, 0x06	; 6
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    2168:	fb 01       	movw	r30, r22
    216a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    216c:	e8 2f       	mov	r30, r24
    216e:	e6 95       	lsr	r30
    2170:	e6 95       	lsr	r30
    2172:	e6 95       	lsr	r30
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	e4 9f       	mul	r30, r20
    2178:	f0 01       	movw	r30, r0
    217a:	11 24       	eor	r1, r1
    217c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    217e:	87 70       	andi	r24, 0x07	; 7
    2180:	21 e0       	ldi	r18, 0x01	; 1
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	a9 01       	movw	r20, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <usart_spi_select_device+0x24>
    2188:	44 0f       	add	r20, r20
    218a:	55 1f       	adc	r21, r21
    218c:	8a 95       	dec	r24
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2190:	46 83       	std	Z+6, r20	; 0x06
    2192:	08 95       	ret

00002194 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2194:	fb 01       	movw	r30, r22
    2196:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2198:	e8 2f       	mov	r30, r24
    219a:	e6 95       	lsr	r30
    219c:	e6 95       	lsr	r30
    219e:	e6 95       	lsr	r30
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	e4 9f       	mul	r30, r20
    21a4:	f0 01       	movw	r30, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    21aa:	87 70       	andi	r24, 0x07	; 7
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	a9 01       	movw	r20, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <usart_spi_deselect_device+0x24>
    21b4:	44 0f       	add	r20, r20
    21b6:	55 1f       	adc	r21, r21
    21b8:	8a 95       	dec	r24
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    21bc:	45 83       	std	Z+5, r20	; 0x05
    21be:	08 95       	ret

000021c0 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    21c0:	80 93 6c 22 	sts	0x226C, r24	; 0x80226c <fbpointer>
    21c4:	90 93 6d 22 	sts	0x226D, r25	; 0x80226d <fbpointer+0x1>
    21c8:	08 95       	ret

000021ca <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    21ca:	20 91 6c 22 	lds	r18, 0x226C	; 0x80226c <fbpointer>
    21ce:	30 91 6d 22 	lds	r19, 0x226D	; 0x80226d <fbpointer+0x1>
    21d2:	90 e8       	ldi	r25, 0x80	; 128
    21d4:	89 9f       	mul	r24, r25
    21d6:	20 0d       	add	r18, r0
    21d8:	31 1d       	adc	r19, r1
    21da:	11 24       	eor	r1, r1
    21dc:	f9 01       	movw	r30, r18
    21de:	e6 0f       	add	r30, r22
    21e0:	f1 1d       	adc	r31, r1
    21e2:	40 83       	st	Z, r20
    21e4:	08 95       	ret

000021e6 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    21e6:	20 91 6c 22 	lds	r18, 0x226C	; 0x80226c <fbpointer>
    21ea:	30 91 6d 22 	lds	r19, 0x226D	; 0x80226d <fbpointer+0x1>
    21ee:	90 e8       	ldi	r25, 0x80	; 128
    21f0:	89 9f       	mul	r24, r25
    21f2:	20 0d       	add	r18, r0
    21f4:	31 1d       	adc	r19, r1
    21f6:	11 24       	eor	r1, r1
    21f8:	f9 01       	movw	r30, r18
    21fa:	e6 0f       	add	r30, r22
    21fc:	f1 1d       	adc	r31, r1
}
    21fe:	80 81       	ld	r24, Z
    2200:	08 95       	ret

00002202 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	e4 2f       	mov	r30, r20
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	e8 0f       	add	r30, r24
    2212:	f1 1d       	adc	r31, r1
    2214:	e1 38       	cpi	r30, 0x81	; 129
    2216:	f1 05       	cpc	r31, r1
    2218:	1c f0       	brlt	.+6      	; 0x2220 <gfx_mono_generic_draw_horizontal_line+0x1e>
    221a:	c0 e8       	ldi	r28, 0x80	; 128
    221c:	4c 2f       	mov	r20, r28
    221e:	48 1b       	sub	r20, r24
    2220:	44 23       	and	r20, r20
    2222:	09 f4       	brne	.+2      	; 0x2226 <gfx_mono_generic_draw_horizontal_line+0x24>
    2224:	50 c0       	rjmp	.+160    	; 0x22c6 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2226:	d6 2f       	mov	r29, r22
    2228:	d6 95       	lsr	r29
    222a:	d6 95       	lsr	r29
    222c:	d6 95       	lsr	r29
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	98 e0       	ldi	r25, 0x08	; 8
    2232:	d9 9f       	mul	r29, r25
    2234:	60 19       	sub	r22, r0
    2236:	71 09       	sbc	r23, r1
    2238:	11 24       	eor	r1, r1
    223a:	e1 e0       	ldi	r30, 0x01	; 1
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	df 01       	movw	r26, r30
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <gfx_mono_generic_draw_horizontal_line+0x44>
    2242:	aa 0f       	add	r26, r26
    2244:	bb 1f       	adc	r27, r27
    2246:	6a 95       	dec	r22
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <gfx_mono_generic_draw_horizontal_line+0x40>
    224a:	fa 2e       	mov	r15, r26
    224c:	21 30       	cpi	r18, 0x01	; 1
    224e:	21 f0       	breq	.+8      	; 0x2258 <gfx_mono_generic_draw_horizontal_line+0x56>
    2250:	a8 f0       	brcs	.+42     	; 0x227c <gfx_mono_generic_draw_horizontal_line+0x7a>
    2252:	22 30       	cpi	r18, 0x02	; 2
    2254:	39 f1       	breq	.+78     	; 0x22a4 <gfx_mono_generic_draw_horizontal_line+0xa2>
    2256:	37 c0       	rjmp	.+110    	; 0x22c6 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2258:	c4 2f       	mov	r28, r20
    225a:	1f ef       	ldi	r17, 0xFF	; 255
    225c:	18 0f       	add	r17, r24
    225e:	01 2f       	mov	r16, r17
    2260:	0c 0f       	add	r16, r28
    2262:	60 2f       	mov	r22, r16
    2264:	8d 2f       	mov	r24, r29
    2266:	0e 94 77 05 	call	0xaee	; 0xaee <gfx_mono_st7565r_get_byte>
    226a:	4f 2d       	mov	r20, r15
    226c:	48 2b       	or	r20, r24
    226e:	60 2f       	mov	r22, r16
    2270:	8d 2f       	mov	r24, r29
    2272:	0e 94 4b 04 	call	0x896	; 0x896 <gfx_mono_st7565r_put_byte>
    2276:	c1 50       	subi	r28, 0x01	; 1
    2278:	91 f7       	brne	.-28     	; 0x225e <gfx_mono_generic_draw_horizontal_line+0x5c>
    227a:	25 c0       	rjmp	.+74     	; 0x22c6 <gfx_mono_generic_draw_horizontal_line+0xc4>
    227c:	c4 2f       	mov	r28, r20
    227e:	1f ef       	ldi	r17, 0xFF	; 255
    2280:	18 0f       	add	r17, r24
    2282:	fa 2e       	mov	r15, r26
    2284:	f0 94       	com	r15
    2286:	01 2f       	mov	r16, r17
    2288:	0c 0f       	add	r16, r28
    228a:	60 2f       	mov	r22, r16
    228c:	8d 2f       	mov	r24, r29
    228e:	0e 94 77 05 	call	0xaee	; 0xaee <gfx_mono_st7565r_get_byte>
    2292:	4f 2d       	mov	r20, r15
    2294:	48 23       	and	r20, r24
    2296:	60 2f       	mov	r22, r16
    2298:	8d 2f       	mov	r24, r29
    229a:	0e 94 4b 04 	call	0x896	; 0x896 <gfx_mono_st7565r_put_byte>
    229e:	c1 50       	subi	r28, 0x01	; 1
    22a0:	91 f7       	brne	.-28     	; 0x2286 <gfx_mono_generic_draw_horizontal_line+0x84>
    22a2:	11 c0       	rjmp	.+34     	; 0x22c6 <gfx_mono_generic_draw_horizontal_line+0xc4>
    22a4:	c4 2f       	mov	r28, r20
    22a6:	1f ef       	ldi	r17, 0xFF	; 255
    22a8:	18 0f       	add	r17, r24
    22aa:	01 2f       	mov	r16, r17
    22ac:	0c 0f       	add	r16, r28
    22ae:	60 2f       	mov	r22, r16
    22b0:	8d 2f       	mov	r24, r29
    22b2:	0e 94 77 05 	call	0xaee	; 0xaee <gfx_mono_st7565r_get_byte>
    22b6:	4f 2d       	mov	r20, r15
    22b8:	48 27       	eor	r20, r24
    22ba:	60 2f       	mov	r22, r16
    22bc:	8d 2f       	mov	r24, r29
    22be:	0e 94 4b 04 	call	0x896	; 0x896 <gfx_mono_st7565r_put_byte>
    22c2:	c1 50       	subi	r28, 0x01	; 1
    22c4:	91 f7       	brne	.-28     	; 0x22aa <gfx_mono_generic_draw_horizontal_line+0xa8>
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	08 95       	ret

000022d2 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
	if (height == 0) {
    22dc:	22 23       	and	r18, r18
    22de:	69 f0       	breq	.+26     	; 0x22fa <gfx_mono_generic_draw_filled_rect+0x28>
    22e0:	f4 2e       	mov	r15, r20
    22e2:	18 2f       	mov	r17, r24
    22e4:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    22e6:	df ef       	ldi	r29, 0xFF	; 255
    22e8:	d6 0f       	add	r29, r22
    22ea:	6d 2f       	mov	r22, r29
    22ec:	6c 0f       	add	r22, r28
    22ee:	20 2f       	mov	r18, r16
    22f0:	4f 2d       	mov	r20, r15
    22f2:	81 2f       	mov	r24, r17
    22f4:	86 df       	rcall	.-244    	; 0x2202 <gfx_mono_generic_draw_horizontal_line>
    22f6:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    22f8:	c1 f7       	brne	.-16     	; 0x22ea <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	08 95       	ret

00002306 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    230c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2310:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2314:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2318:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    231c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2320:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2324:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2326:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2328:	e0 e5       	ldi	r30, 0x50	; 80
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	82 60       	ori	r24, 0x02	; 2
    2330:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2332:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2334:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2336:	81 ff       	sbrs	r24, 1
    2338:	fd cf       	rjmp	.-6      	; 0x2334 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	80 e4       	ldi	r24, 0x40	; 64
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9c d0       	rcall	.+312    	; 0x247a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2342:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2344:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2346:	e0 e5       	ldi	r30, 0x50	; 80
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8e 7f       	andi	r24, 0xFE	; 254
    234e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2350:	9f bf       	out	0x3f, r25	; 63
    2352:	08 95       	ret

00002354 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2354:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2356:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2358:	e8 2f       	mov	r30, r24
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	e0 59       	subi	r30, 0x90	; 144
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 95       	com	r22
    2362:	80 81       	ld	r24, Z
    2364:	68 23       	and	r22, r24
    2366:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2368:	9f bf       	out	0x3f, r25	; 63
    236a:	08 95       	ret

0000236c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    236c:	af 92       	push	r10
    236e:	bf 92       	push	r11
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	c8 2f       	mov	r28, r24
    2382:	e6 2e       	mov	r14, r22
    2384:	b4 2e       	mov	r11, r20
    2386:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    2388:	00 e0       	ldi	r16, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	24 81       	ldd	r18, Z+4	; 0x04
    238e:	43 81       	ldd	r20, Z+3	; 0x03
    2390:	6b 2d       	mov	r22, r11
    2392:	8e 2d       	mov	r24, r14
    2394:	9e df       	rcall	.-196    	; 0x22d2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    2396:	f6 01       	movw	r30, r12
    2398:	80 81       	ld	r24, Z
    239a:	81 11       	cpse	r24, r1
    239c:	3a c0       	rjmp	.+116    	; 0x2412 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	28 2f       	mov	r18, r24
    23a2:	26 95       	lsr	r18
    23a4:	26 95       	lsr	r18
    23a6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    23a8:	87 70       	andi	r24, 0x07	; 7
    23aa:	09 f0       	breq	.+2      	; 0x23ae <gfx_mono_draw_char+0x42>
		char_row_size++;
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    23ae:	f6 01       	movw	r30, r12
    23b0:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    23b2:	8c 2f       	mov	r24, r28
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	35 81       	ldd	r19, Z+5	; 0x05
    23b8:	83 1b       	sub	r24, r19
    23ba:	91 09       	sbc	r25, r1
    23bc:	2a 9d       	mul	r18, r10
    23be:	90 01       	movw	r18, r0
    23c0:	11 24       	eor	r1, r1
    23c2:	82 9f       	mul	r24, r18
    23c4:	a0 01       	movw	r20, r0
    23c6:	83 9f       	mul	r24, r19
    23c8:	50 0d       	add	r21, r0
    23ca:	92 9f       	mul	r25, r18
    23cc:	50 0d       	add	r21, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	01 81       	ldd	r16, Z+1	; 0x01
    23d2:	12 81       	ldd	r17, Z+2	; 0x02
    23d4:	04 0f       	add	r16, r20
    23d6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    23d8:	f6 01       	movw	r30, r12
    23da:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    23dc:	ff 20       	and	r15, r15
    23de:	a9 f0       	breq	.+42     	; 0x240a <gfx_mono_draw_char+0x9e>
    23e0:	d0 e0       	ldi	r29, 0x00	; 0
    23e2:	c0 e0       	ldi	r28, 0x00	; 0
    23e4:	8e 2d       	mov	r24, r14
    23e6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    23e8:	9c 2f       	mov	r25, r28
    23ea:	97 70       	andi	r25, 0x07	; 7
    23ec:	21 f4       	brne	.+8      	; 0x23f6 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    23ee:	f8 01       	movw	r30, r16
    23f0:	d4 91       	lpm	r29, Z
				glyph_data++;
    23f2:	0f 5f       	subi	r16, 0xFF	; 255
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    23f6:	dd 23       	and	r29, r29
    23f8:	24 f4       	brge	.+8      	; 0x2402 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	6b 2d       	mov	r22, r11
    23fe:	0e 94 40 05 	call	0xa80	; 0xa80 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2402:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2404:	cf 5f       	subi	r28, 0xFF	; 255
    2406:	fc 12       	cpse	r15, r28
    2408:	ed cf       	rjmp	.-38     	; 0x23e4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    240a:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    240c:	aa 94       	dec	r10
	} while (rows_left > 0);
    240e:	a1 10       	cpse	r10, r1
    2410:	e3 cf       	rjmp	.-58     	; 0x23d8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
    2422:	bf 90       	pop	r11
    2424:	af 90       	pop	r10
    2426:	08 95       	ret

00002428 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	d6 2e       	mov	r13, r22
    2438:	04 2f       	mov	r16, r20
    243a:	79 01       	movw	r14, r18
    243c:	ec 01       	movw	r28, r24
    243e:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2440:	89 91       	ld	r24, Y+
    2442:	8a 30       	cpi	r24, 0x0A	; 10
    2444:	31 f4       	brne	.+12     	; 0x2452 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    2446:	f7 01       	movw	r30, r14
    2448:	84 81       	ldd	r24, Z+4	; 0x04
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    244e:	1d 2d       	mov	r17, r13
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    2452:	8d 30       	cpi	r24, 0x0D	; 13
    2454:	39 f0       	breq	.+14     	; 0x2464 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    2456:	97 01       	movw	r18, r14
    2458:	40 2f       	mov	r20, r16
    245a:	61 2f       	mov	r22, r17
    245c:	87 df       	rcall	.-242    	; 0x236c <gfx_mono_draw_char>
			x += font->width;
    245e:	f7 01       	movw	r30, r14
    2460:	83 81       	ldd	r24, Z+3	; 0x03
    2462:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    2464:	88 81       	ld	r24, Y
    2466:	81 11       	cpse	r24, r1
    2468:	eb cf       	rjmp	.-42     	; 0x2440 <gfx_mono_draw_string+0x18>
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	08 95       	ret

0000247a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    247a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    247c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    247e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2480:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2482:	60 83       	st	Z, r22
	ret                             // Return to caller
    2484:	08 95       	ret

00002486 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2490:	c6 2f       	mov	r28, r22
    2492:	d0 e0       	ldi	r29, 0x00	; 0
    2494:	de 01       	movw	r26, r28
    2496:	02 2e       	mov	r0, r18
    2498:	02 c0       	rjmp	.+4      	; 0x249e <ioport_configure_port_pin+0x18>
    249a:	b5 95       	asr	r27
    249c:	a7 95       	ror	r26
    249e:	0a 94       	dec	r0
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <ioport_configure_port_pin+0x14>
    24a2:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    24a4:	50 8b       	std	Z+16, r21	; 0x10
    24a6:	2f 5f       	subi	r18, 0xFF	; 255
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    24ac:	28 30       	cpi	r18, 0x08	; 8
    24ae:	31 05       	cpc	r19, r1
    24b0:	89 f7       	brne	.-30     	; 0x2494 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    24b2:	40 ff       	sbrs	r20, 0
    24b4:	0a c0       	rjmp	.+20     	; 0x24ca <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    24b6:	41 ff       	sbrs	r20, 1
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    24ba:	fc 01       	movw	r30, r24
    24bc:	65 83       	std	Z+5, r22	; 0x05
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    24c0:	fc 01       	movw	r30, r24
    24c2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    24c4:	fc 01       	movw	r30, r24
    24c6:	61 83       	std	Z+1, r22	; 0x01
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    24ca:	fc 01       	movw	r30, r24
    24cc:	62 83       	std	Z+2, r22	; 0x02
	}
}
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	08 95       	ret

000024d4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    24d4:	43 e0       	ldi	r20, 0x03	; 3
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	61 e0       	ldi	r22, 0x01	; 1
    24da:	80 ee       	ldi	r24, 0xE0	; 224
    24dc:	97 e0       	ldi	r25, 0x07	; 7
    24de:	d3 df       	rcall	.-90     	; 0x2486 <ioport_configure_port_pin>
    24e0:	43 e0       	ldi	r20, 0x03	; 3
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	62 e0       	ldi	r22, 0x02	; 2
    24e6:	80 ee       	ldi	r24, 0xE0	; 224
    24e8:	97 e0       	ldi	r25, 0x07	; 7
    24ea:	cd df       	rcall	.-102    	; 0x2486 <ioport_configure_port_pin>
    24ec:	43 e0       	ldi	r20, 0x03	; 3
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	60 e1       	ldi	r22, 0x10	; 16
    24f2:	80 e6       	ldi	r24, 0x60	; 96
    24f4:	96 e0       	ldi	r25, 0x06	; 6
    24f6:	c7 df       	rcall	.-114    	; 0x2486 <ioport_configure_port_pin>
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	50 e4       	ldi	r21, 0x40	; 64
    24fc:	60 e2       	ldi	r22, 0x20	; 32
    24fe:	80 e6       	ldi	r24, 0x60	; 96
    2500:	96 e0       	ldi	r25, 0x06	; 6
    2502:	c1 df       	rcall	.-126    	; 0x2486 <ioport_configure_port_pin>
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	5b e1       	ldi	r21, 0x1B	; 27
    2508:	60 e2       	ldi	r22, 0x20	; 32
    250a:	80 e8       	ldi	r24, 0x80	; 128
    250c:	96 e0       	ldi	r25, 0x06	; 6
    250e:	bb df       	rcall	.-138    	; 0x2486 <ioport_configure_port_pin>
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	5b e1       	ldi	r21, 0x1B	; 27
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	80 ea       	ldi	r24, 0xA0	; 160
    2518:	96 e0       	ldi	r25, 0x06	; 6
    251a:	b5 df       	rcall	.-150    	; 0x2486 <ioport_configure_port_pin>
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	5b e1       	ldi	r21, 0x1B	; 27
    2520:	64 e0       	ldi	r22, 0x04	; 4
    2522:	80 ea       	ldi	r24, 0xA0	; 160
    2524:	96 e0       	ldi	r25, 0x06	; 6
    2526:	af df       	rcall	.-162    	; 0x2486 <ioport_configure_port_pin>
    2528:	43 e0       	ldi	r20, 0x03	; 3
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	80 e6       	ldi	r24, 0x60	; 96
    2530:	96 e0       	ldi	r25, 0x06	; 6
    2532:	a9 df       	rcall	.-174    	; 0x2486 <ioport_configure_port_pin>
    2534:	43 e0       	ldi	r20, 0x03	; 3
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	68 e0       	ldi	r22, 0x08	; 8
    253a:	80 e6       	ldi	r24, 0x60	; 96
    253c:	96 e0       	ldi	r25, 0x06	; 6
    253e:	a3 df       	rcall	.-186    	; 0x2486 <ioport_configure_port_pin>
    2540:	43 e0       	ldi	r20, 0x03	; 3
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	68 e0       	ldi	r22, 0x08	; 8
    2546:	80 ea       	ldi	r24, 0xA0	; 160
    2548:	96 e0       	ldi	r25, 0x06	; 6
    254a:	9d df       	rcall	.-198    	; 0x2486 <ioport_configure_port_pin>
    254c:	43 e0       	ldi	r20, 0x03	; 3
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	80 e6       	ldi	r24, 0x60	; 96
    2554:	96 e0       	ldi	r25, 0x06	; 6
    2556:	97 df       	rcall	.-210    	; 0x2486 <ioport_configure_port_pin>
    2558:	43 e0       	ldi	r20, 0x03	; 3
    255a:	50 e0       	ldi	r21, 0x00	; 0
    255c:	68 e0       	ldi	r22, 0x08	; 8
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	96 e0       	ldi	r25, 0x06	; 6
    2562:	91 df       	rcall	.-222    	; 0x2486 <ioport_configure_port_pin>
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	60 e1       	ldi	r22, 0x10	; 16
    256a:	80 e8       	ldi	r24, 0x80	; 128
    256c:	96 e0       	ldi	r25, 0x06	; 6
    256e:	8b df       	rcall	.-234    	; 0x2486 <ioport_configure_port_pin>
    2570:	43 e0       	ldi	r20, 0x03	; 3
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	62 e0       	ldi	r22, 0x02	; 2
    2576:	80 e6       	ldi	r24, 0x60	; 96
    2578:	96 e0       	ldi	r25, 0x06	; 6
    257a:	85 df       	rcall	.-246    	; 0x2486 <ioport_configure_port_pin>
    257c:	43 e0       	ldi	r20, 0x03	; 3
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	68 e0       	ldi	r22, 0x08	; 8
    2582:	80 e6       	ldi	r24, 0x60	; 96
    2584:	96 e0       	ldi	r25, 0x06	; 6
    2586:	7f df       	rcall	.-258    	; 0x2486 <ioport_configure_port_pin>
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	80 e6       	ldi	r24, 0x60	; 96
    2590:	96 e0       	ldi	r25, 0x06	; 6
    2592:	79 df       	rcall	.-270    	; 0x2486 <ioport_configure_port_pin>
    2594:	43 e0       	ldi	r20, 0x03	; 3
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	60 e1       	ldi	r22, 0x10	; 16
    259a:	80 ea       	ldi	r24, 0xA0	; 160
    259c:	96 e0       	ldi	r25, 0x06	; 6
    259e:	73 df       	rcall	.-282    	; 0x2486 <ioport_configure_port_pin>
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	96 e0       	ldi	r25, 0x06	; 6
    25aa:	6d df       	rcall	.-294    	; 0x2486 <ioport_configure_port_pin>
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	96 e0       	ldi	r25, 0x06	; 6
    25b6:	67 df       	rcall	.-306    	; 0x2486 <ioport_configure_port_pin>
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	96 e0       	ldi	r25, 0x06	; 6
    25c2:	61 df       	rcall	.-318    	; 0x2486 <ioport_configure_port_pin>
    25c4:	43 e0       	ldi	r20, 0x03	; 3
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	68 e0       	ldi	r22, 0x08	; 8
    25ca:	80 e4       	ldi	r24, 0x40	; 64
    25cc:	96 e0       	ldi	r25, 0x06	; 6
    25ce:	5b df       	rcall	.-330    	; 0x2486 <ioport_configure_port_pin>
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	64 e0       	ldi	r22, 0x04	; 4
    25d6:	80 e4       	ldi	r24, 0x40	; 64
    25d8:	96 e0       	ldi	r25, 0x06	; 6
    25da:	55 df       	rcall	.-342    	; 0x2486 <ioport_configure_port_pin>
    25dc:	43 e0       	ldi	r20, 0x03	; 3
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	68 e0       	ldi	r22, 0x08	; 8
    25e2:	80 e6       	ldi	r24, 0x60	; 96
    25e4:	96 e0       	ldi	r25, 0x06	; 6
    25e6:	4f df       	rcall	.-354    	; 0x2486 <ioport_configure_port_pin>
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	64 e0       	ldi	r22, 0x04	; 4
    25ee:	80 e6       	ldi	r24, 0x60	; 96
    25f0:	96 e0       	ldi	r25, 0x06	; 6
    25f2:	49 df       	rcall	.-366    	; 0x2486 <ioport_configure_port_pin>
    25f4:	43 e0       	ldi	r20, 0x03	; 3
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	68 e0       	ldi	r22, 0x08	; 8
    25fa:	80 e8       	ldi	r24, 0x80	; 128
    25fc:	96 e0       	ldi	r25, 0x06	; 6
    25fe:	43 df       	rcall	.-378    	; 0x2486 <ioport_configure_port_pin>
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	96 e0       	ldi	r25, 0x06	; 6
    260a:	3d cf       	rjmp	.-390    	; 0x2486 <ioport_configure_port_pin>
    260c:	08 95       	ret

0000260e <__portable_avr_delay_cycles>:

char receiveChar()
{
    while( !(USARTC0_STATUS & USART_RXCIF_bm) ); //Wait until receive finish
    return USARTC0_DATA;
}
    260e:	61 50       	subi	r22, 0x01	; 1
    2610:	71 09       	sbc	r23, r1
    2612:	81 09       	sbc	r24, r1
    2614:	91 09       	sbc	r25, r1
    2616:	d9 f7       	brne	.-10     	; 0x260e <__portable_avr_delay_cycles>
    2618:	08 95       	ret

0000261a <setUpSerial>:
    261a:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
    2624:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    262e:	88 e1       	ldi	r24, 0x18	; 24
    2630:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    2634:	08 95       	ret

00002636 <sendString>:
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	fc 01       	movw	r30, r24
    263c:	60 81       	ld	r22, Z
    263e:	66 23       	and	r22, r22
    2640:	41 f0       	breq	.+16     	; 0x2652 <sendString+0x1c>
    2642:	ec 01       	movw	r28, r24
    2644:	21 96       	adiw	r28, 0x01	; 1
    2646:	80 ea       	ldi	r24, 0xA0	; 160
    2648:	98 e0       	ldi	r25, 0x08	; 8
    264a:	49 d9       	rcall	.-3438   	; 0x18de <usart_putchar>
    264c:	69 91       	ld	r22, Y+
    264e:	61 11       	cpse	r22, r1
    2650:	fa cf       	rjmp	.-12     	; 0x2646 <sendString+0x10>
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <receiveString>:

void receiveString()
{
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	ce e6       	ldi	r28, 0x6E	; 110
    265e:	d2 e2       	ldi	r29, 0x22	; 34
    int i = 0;
    while(1){
        //char inp = receiveChar();
		char inp = usart_getchar(USART_SERIAL_EXAMPLE);
    2660:	80 ea       	ldi	r24, 0xA0	; 160
    2662:	98 e0       	ldi	r25, 0x08	; 8
    2664:	44 d9       	rcall	.-3448   	; 0x18ee <usart_getchar>
        if(inp=='\n') break;
    2666:	8a 30       	cpi	r24, 0x0A	; 10
    2668:	11 f0       	breq	.+4      	; 0x266e <receiveString+0x16>
        else reads[i++] = inp;
    266a:	89 93       	st	Y+, r24
    }
    266c:	f9 cf       	rjmp	.-14     	; 0x2660 <receiveString+0x8>
	if(strcmp(str1,reads) == 0){
    266e:	6e e6       	ldi	r22, 0x6E	; 110
    2670:	72 e2       	ldi	r23, 0x22	; 34
    2672:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <str1>
    2676:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <str1+0x1>
    267a:	bb d0       	rcall	.+374    	; 0x27f2 <strcmp>
    267c:	89 2b       	or	r24, r25
    267e:	21 f4       	brne	.+8      	; 0x2688 <receiveString+0x30>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    2686:	10 c0       	rjmp	.+32     	; 0x26a8 <receiveString+0x50>
		gpio_set_pin_high(J2_PIN0);
	}else if(strcmp(str2,reads) == 0){
    2688:	6e e6       	ldi	r22, 0x6E	; 110
    268a:	72 e2       	ldi	r23, 0x22	; 34
    268c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <str2>
    2690:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <str2+0x1>
    2694:	ae d0       	rcall	.+348    	; 0x27f2 <strcmp>
    2696:	89 2b       	or	r24, r25
    2698:	21 f4       	brne	.+8      	; 0x26a2 <receiveString+0x4a>
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <receiveString+0x50>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		gpio_set_pin_high(J2_PIN0);
	}else{
		gpio_set_pin_low(J2_PIN0);
	}
}
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	08 95       	ret

000026ae <receive>:


static void receive(void){
    26ae:	d4 df       	rcall	.-88     	; 0x2658 <receiveString>
    26b0:	62 e1       	ldi	r22, 0x12	; 18
    26b2:	70 e2       	ldi	r23, 0x20	; 32
    26b4:	8e e6       	ldi	r24, 0x6E	; 110
    26b6:	92 e2       	ldi	r25, 0x22	; 34
    26b8:	9c d0       	rcall	.+312    	; 0x27f2 <strcmp>
    26ba:	89 2b       	or	r24, r25
    26bc:	21 f4       	brne	.+8      	; 0x26c6 <receive+0x18>
    26be:	8e e6       	ldi	r24, 0x6E	; 110
    26c0:	92 e2       	ldi	r25, 0x22	; 34
    26c2:	b9 df       	rcall	.-142    	; 0x2636 <sendString>
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <receive+0x1e>
    26c6:	8e e6       	ldi	r24, 0x6E	; 110
    26c8:	92 e2       	ldi	r25, 0x22	; 34
    26ca:	b5 df       	rcall	.-150    	; 0x2636 <sendString>
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e2       	ldi	r19, 0x20	; 32
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	8e e6       	ldi	r24, 0x6E	; 110
    26d6:	92 e2       	ldi	r25, 0x22	; 34
    26d8:	a7 de       	rcall	.-690    	; 0x2428 <gfx_mono_draw_string>
    26da:	6a ea       	ldi	r22, 0xAA	; 170
    26dc:	71 e1       	ldi	r23, 0x11	; 17
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	95 cf       	rjmp	.-214    	; 0x260e <__portable_avr_delay_cycles>
    26e4:	08 95       	ret

000026e6 <freeHeap>:
    26e6:	b8 cf       	rjmp	.-144    	; 0x2658 <receiveString>
    26e8:	08 95       	ret

000026ea <setup_timer>:
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	99 e0       	ldi	r25, 0x09	; 9
    26ee:	56 d8       	rcall	.-3924   	; 0x179c <tc_enable>
    26f0:	67 e5       	ldi	r22, 0x57	; 87
    26f2:	73 e1       	ldi	r23, 0x13	; 19
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	99 e0       	ldi	r25, 0x09	; 9
    26f8:	b4 d8       	rcall	.-3736   	; 0x1862 <tc_set_overflow_interrupt_callback>
    26fa:	e0 e0       	ldi	r30, 0x00	; 0
    26fc:	f9 e0       	ldi	r31, 0x09	; 9
    26fe:	81 81       	ldd	r24, Z+1	; 0x01
    2700:	88 7f       	andi	r24, 0xF8	; 248
    2702:	81 83       	std	Z+1, r24	; 0x01
    2704:	80 ed       	ldi	r24, 0xD0	; 208
    2706:	97 e0       	ldi	r25, 0x07	; 7
    2708:	86 a3       	std	Z+38, r24	; 0x26
    270a:	97 a3       	std	Z+39, r25	; 0x27
    270c:	86 81       	ldd	r24, Z+6	; 0x06
    270e:	8c 7f       	andi	r24, 0xFC	; 252
    2710:	86 83       	std	Z+6, r24	; 0x06
    2712:	86 81       	ldd	r24, Z+6	; 0x06
    2714:	81 60       	ori	r24, 0x01	; 1
    2716:	86 83       	std	Z+6, r24	; 0x06
    2718:	80 81       	ld	r24, Z
    271a:	80 7f       	andi	r24, 0xF0	; 240
    271c:	87 60       	ori	r24, 0x07	; 7
    271e:	80 83       	st	Z, r24
    2720:	78 94       	sei
    2722:	08 95       	ret

00002724 <setup_timer1>:
    2724:	80 e4       	ldi	r24, 0x40	; 64
    2726:	99 e0       	ldi	r25, 0x09	; 9
    2728:	39 d8       	rcall	.-3982   	; 0x179c <tc_enable>
    272a:	63 e7       	ldi	r22, 0x73	; 115
    272c:	73 e1       	ldi	r23, 0x13	; 19
    272e:	80 e4       	ldi	r24, 0x40	; 64
    2730:	99 e0       	ldi	r25, 0x09	; 9
    2732:	97 d8       	rcall	.-3794   	; 0x1862 <tc_set_overflow_interrupt_callback>
    2734:	e0 e4       	ldi	r30, 0x40	; 64
    2736:	f9 e0       	ldi	r31, 0x09	; 9
    2738:	81 81       	ldd	r24, Z+1	; 0x01
    273a:	88 7f       	andi	r24, 0xF8	; 248
    273c:	81 83       	std	Z+1, r24	; 0x01
    273e:	88 ee       	ldi	r24, 0xE8	; 232
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	86 a3       	std	Z+38, r24	; 0x26
    2744:	97 a3       	std	Z+39, r25	; 0x27
    2746:	86 81       	ldd	r24, Z+6	; 0x06
    2748:	8c 7f       	andi	r24, 0xFC	; 252
    274a:	86 83       	std	Z+6, r24	; 0x06
    274c:	86 81       	ldd	r24, Z+6	; 0x06
    274e:	81 60       	ori	r24, 0x01	; 1
    2750:	86 83       	std	Z+6, r24	; 0x06
    2752:	80 81       	ld	r24, Z
    2754:	80 7f       	andi	r24, 0xF0	; 240
    2756:	87 60       	ori	r24, 0x07	; 7
    2758:	80 83       	st	Z, r24
    275a:	78 94       	sei
    275c:	08 95       	ret

0000275e <main>:
    275e:	ba de       	rcall	.-652    	; 0x24d4 <board_init>
    2760:	d2 dd       	rcall	.-1116   	; 0x2306 <sysclk_init>
    2762:	87 e0       	ldi	r24, 0x07	; 7
    2764:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2768:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <gfx_mono_st7565r_init>
    276c:	80 e1       	ldi	r24, 0x10	; 16
    276e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2772:	88 e0       	ldi	r24, 0x08	; 8
    2774:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    2778:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    277c:	84 e0       	ldi	r24, 0x04	; 4
    277e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    2782:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    2786:	49 df       	rcall	.-366    	; 0x261a <setUpSerial>
    2788:	64 e0       	ldi	r22, 0x04	; 4
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	e3 dd       	rcall	.-1082   	; 0x2354 <sysclk_enable_module>
    278e:	e0 e2       	ldi	r30, 0x20	; 32
    2790:	f4 e0       	ldi	r31, 0x04	; 4
    2792:	81 81       	ldd	r24, Z+1	; 0x01
    2794:	80 fd       	sbrc	r24, 0
    2796:	fd cf       	rjmp	.-6      	; 0x2792 <main+0x34>
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	70 e2       	ldi	r23, 0x20	; 32
    279c:	80 ea       	ldi	r24, 0xA0	; 160
    279e:	98 e0       	ldi	r25, 0x08	; 8
    27a0:	bb d9       	rcall	.-3210   	; 0x1b18 <usart_init_rs232>
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
    27a8:	a0 df       	rcall	.-192    	; 0x26ea <setup_timer>
    27aa:	bc df       	rcall	.-136    	; 0x2724 <setup_timer1>
    27ac:	ff cf       	rjmp	.-2      	; 0x27ac <main+0x4e>

000027ae <__udivmodsi4>:
    27ae:	a1 e2       	ldi	r26, 0x21	; 33
    27b0:	1a 2e       	mov	r1, r26
    27b2:	aa 1b       	sub	r26, r26
    27b4:	bb 1b       	sub	r27, r27
    27b6:	fd 01       	movw	r30, r26
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <__udivmodsi4_ep>

000027ba <__udivmodsi4_loop>:
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	ee 1f       	adc	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	a2 17       	cp	r26, r18
    27c4:	b3 07       	cpc	r27, r19
    27c6:	e4 07       	cpc	r30, r20
    27c8:	f5 07       	cpc	r31, r21
    27ca:	20 f0       	brcs	.+8      	; 0x27d4 <__udivmodsi4_ep>
    27cc:	a2 1b       	sub	r26, r18
    27ce:	b3 0b       	sbc	r27, r19
    27d0:	e4 0b       	sbc	r30, r20
    27d2:	f5 0b       	sbc	r31, r21

000027d4 <__udivmodsi4_ep>:
    27d4:	66 1f       	adc	r22, r22
    27d6:	77 1f       	adc	r23, r23
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	1a 94       	dec	r1
    27de:	69 f7       	brne	.-38     	; 0x27ba <__udivmodsi4_loop>
    27e0:	60 95       	com	r22
    27e2:	70 95       	com	r23
    27e4:	80 95       	com	r24
    27e6:	90 95       	com	r25
    27e8:	9b 01       	movw	r18, r22
    27ea:	ac 01       	movw	r20, r24
    27ec:	bd 01       	movw	r22, r26
    27ee:	cf 01       	movw	r24, r30
    27f0:	08 95       	ret

000027f2 <strcmp>:
    27f2:	fb 01       	movw	r30, r22
    27f4:	dc 01       	movw	r26, r24
    27f6:	8d 91       	ld	r24, X+
    27f8:	01 90       	ld	r0, Z+
    27fa:	80 19       	sub	r24, r0
    27fc:	01 10       	cpse	r0, r1
    27fe:	d9 f3       	breq	.-10     	; 0x27f6 <strcmp+0x4>
    2800:	99 0b       	sbc	r25, r25
    2802:	08 95       	ret

00002804 <_exit>:
    2804:	f8 94       	cli

00002806 <__stop_program>:
    2806:	ff cf       	rjmp	.-2      	; 0x2806 <__stop_program>

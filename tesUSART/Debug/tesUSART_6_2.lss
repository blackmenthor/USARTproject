
tesUSART_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  00001972  00001a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000266  00802036  00802036  00001a3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e178  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004bcb  00000000  00000000  0000ff48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007348  00000000  00000000  00014b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  0001be5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00030549  00000000  00000000  0001c780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005af5  00000000  00000000  0004ccc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  000527be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bb51  00000000  00000000  00052c0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e04>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65ec>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x65c4>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55ec>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1dc4>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e2 e7       	ldi	r30, 0x72	; 114
     4a6:	f9 e1       	ldi	r31, 0x19	; 25
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a6 33       	cpi	r26, 0x36	; 54
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a6 e3       	ldi	r26, 0x36	; 54
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ac 39       	cpi	r26, 0x9C	; 156
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 35 0c 	call	0x186a	; 0x186a <main>
     4cc:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     4d2:	61 50       	subi	r22, 0x01	; 1
     4d4:	71 09       	sbc	r23, r1
     4d6:	81 09       	sbc	r24, r1
     4d8:	91 09       	sbc	r25, r1
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <__portable_avr_delay_cycles>
}
     4dc:	08 95       	ret

000004de <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	1f 92       	push	r1
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	16 e0       	ldi	r17, 0x06	; 6
     4fa:	68 94       	set
     4fc:	ff 24       	eor	r15, r15
     4fe:	f3 f8       	bld	r15, 3
     500:	f8 01       	movw	r30, r16
     502:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     504:	65 e3       	ldi	r22, 0x35	; 53
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	e2 df       	rcall	.-60     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     50e:	f8 01       	movw	r30, r16
     510:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     512:	65 e3       	ldi	r22, 0x35	; 53
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	db df       	rcall	.-74     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     51c:	0f 2e       	mov	r0, r31
     51e:	fb e2       	ldi	r31, 0x2B	; 43
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     524:	b9 82       	std	Y+1, r11	; 0x01
     526:	80 ea       	ldi	r24, 0xA0	; 160
     528:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     52a:	ba d6       	rcall	.+3444   	; 0x12a0 <usart_spi_init>
     52c:	c1 2c       	mov	r12, r1
     52e:	d1 2c       	mov	r13, r1
     530:	76 01       	movw	r14, r12
     532:	00 e4       	ldi	r16, 0x40	; 64
     534:	12 e4       	ldi	r17, 0x42	; 66
     536:	2f e0       	ldi	r18, 0x0F	; 15
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	43 e0       	ldi	r20, 0x03	; 3
     53c:	be 01       	movw	r22, r28
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	80 ea       	ldi	r24, 0xA0	; 160
     544:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     546:	db d6       	rcall	.+3510   	; 0x12fe <usart_spi_setup_device>
     548:	00 e6       	ldi	r16, 0x60	; 96
     54a:	16 e0       	ldi	r17, 0x06	; 6
     54c:	ff 24       	eor	r15, r15
     54e:	f3 94       	inc	r15
     550:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     552:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     554:	b9 82       	std	Y+1, r11	; 0x01
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	80 ea       	ldi	r24, 0xA0	; 160
     55e:	99 e0       	ldi	r25, 0x09	; 9
     560:	e8 d6       	rcall	.+3536   	; 0x1332 <usart_spi_select_device>
     562:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     564:	f6 82       	std	Z+6, r15	; 0x06
     566:	e0 ea       	ldi	r30, 0xA0	; 160
     568:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     56a:	81 81       	ldd	r24, Z+1	; 0x01
     56c:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     56e:	fd cf       	rjmp	.-6      	; 0x56a <st7565r_init+0x8c>
     570:	80 ea       	ldi	r24, 0xA0	; 160
     572:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     57a:	81 81       	ldd	r24, Z+1	; 0x01
     57c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     57e:	fd cf       	rjmp	.-6      	; 0x57a <st7565r_init+0x9c>
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     586:	81 83       	std	Z+1, r24	; 0x01
     588:	80 81       	ld	r24, Z
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     592:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     594:	e4 d6       	rcall	.+3528   	; 0x135e <usart_spi_deselect_device>
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	be 01       	movw	r22, r28
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	99 e0       	ldi	r25, 0x09	; 9
     5a4:	c6 d6       	rcall	.+3468   	; 0x1332 <usart_spi_select_device>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5a8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     5ac:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5ae:	f9 e0       	ldi	r31, 0x09	; 9
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5b2:	85 ff       	sbrs	r24, 5
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <st7565r_init+0xd2>
     5b6:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5b8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     5bc:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5be:	f9 e0       	ldi	r31, 0x09	; 9
     5c0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5c2:	86 ff       	sbrs	r24, 6
     5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <st7565r_init+0xe2>
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	81 83       	std	Z+1, r24	; 0x01
     5ce:	80 81       	ld	r24, Z
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5d6:	80 ea       	ldi	r24, 0xA0	; 160
     5d8:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5da:	c1 d6       	rcall	.+3458   	; 0x135e <usart_spi_deselect_device>
     5dc:	8b e2       	ldi	r24, 0x2B	; 43
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	be 01       	movw	r22, r28
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	80 ea       	ldi	r24, 0xA0	; 160
     5e8:	99 e0       	ldi	r25, 0x09	; 9
     5ea:	a3 d6       	rcall	.+3398   	; 0x1332 <usart_spi_select_device>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ee:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     5f2:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5f4:	f9 e0       	ldi	r31, 0x09	; 9
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5f8:	85 ff       	sbrs	r24, 5
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <st7565r_init+0x118>
     5fc:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5fe:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     602:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     604:	f9 e0       	ldi	r31, 0x09	; 9
     606:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     608:	86 ff       	sbrs	r24, 6
     60a:	fd cf       	rjmp	.-6      	; 0x606 <st7565r_init+0x128>
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     60e:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	81 83       	std	Z+1, r24	; 0x01
     614:	80 81       	ld	r24, Z
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     61c:	80 ea       	ldi	r24, 0xA0	; 160
     61e:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     620:	9e d6       	rcall	.+3388   	; 0x135e <usart_spi_deselect_device>
     622:	8b e2       	ldi	r24, 0x2B	; 43
     624:	89 83       	std	Y+1, r24	; 0x01
     626:	be 01       	movw	r22, r28
     628:	6f 5f       	subi	r22, 0xFF	; 255
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	80 ea       	ldi	r24, 0xA0	; 160
     62e:	99 e0       	ldi	r25, 0x09	; 9
     630:	80 d6       	rcall	.+3328   	; 0x1332 <usart_spi_select_device>
     632:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     634:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     638:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     63a:	f9 e0       	ldi	r31, 0x09	; 9
     63c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     63e:	85 ff       	sbrs	r24, 5
     640:	fd cf       	rjmp	.-6      	; 0x63c <st7565r_init+0x15e>
     642:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     644:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     648:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     64a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     64c:	81 81       	ldd	r24, Z+1	; 0x01
     64e:	86 ff       	sbrs	r24, 6
     650:	fd cf       	rjmp	.-6      	; 0x64c <st7565r_init+0x16e>
     652:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     654:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     656:	80 e4       	ldi	r24, 0x40	; 64
     658:	81 83       	std	Z+1, r24	; 0x01
     65a:	80 81       	ld	r24, Z
     65c:	be 01       	movw	r22, r28
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     662:	80 ea       	ldi	r24, 0xA0	; 160
     664:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     666:	7b d6       	rcall	.+3318   	; 0x135e <usart_spi_deselect_device>
     668:	8b e2       	ldi	r24, 0x2B	; 43
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	80 ea       	ldi	r24, 0xA0	; 160
     674:	99 e0       	ldi	r25, 0x09	; 9
     676:	5d d6       	rcall	.+3258   	; 0x1332 <usart_spi_select_device>
     678:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     67a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     67e:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     680:	f9 e0       	ldi	r31, 0x09	; 9
     682:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     684:	85 ff       	sbrs	r24, 5
     686:	fd cf       	rjmp	.-6      	; 0x682 <st7565r_init+0x1a4>
     688:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     68a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     692:	81 81       	ldd	r24, Z+1	; 0x01
     694:	86 ff       	sbrs	r24, 6
     696:	fd cf       	rjmp	.-6      	; 0x692 <st7565r_init+0x1b4>
     698:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     69a:	f9 e0       	ldi	r31, 0x09	; 9
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	81 83       	std	Z+1, r24	; 0x01
     6a0:	80 81       	ld	r24, Z
     6a2:	be 01       	movw	r22, r28
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6aa:	99 e0       	ldi	r25, 0x09	; 9
     6ac:	58 d6       	rcall	.+3248   	; 0x135e <usart_spi_deselect_device>
     6ae:	8b e2       	ldi	r24, 0x2B	; 43
     6b0:	89 83       	std	Y+1, r24	; 0x01
     6b2:	be 01       	movw	r22, r28
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	80 ea       	ldi	r24, 0xA0	; 160
     6ba:	99 e0       	ldi	r25, 0x09	; 9
     6bc:	3a d6       	rcall	.+3188   	; 0x1332 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6c4:	e0 ea       	ldi	r30, 0xA0	; 160
     6c6:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6c8:	81 81       	ldd	r24, Z+1	; 0x01
     6ca:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <st7565r_init+0x1ea>
     6ce:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6d0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6d4:	e0 ea       	ldi	r30, 0xA0	; 160
     6d6:	f9 e0       	ldi	r31, 0x09	; 9
     6d8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6da:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <st7565r_init+0x1fa>
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
     6e2:	80 e4       	ldi	r24, 0x40	; 64
     6e4:	81 83       	std	Z+1, r24	; 0x01
     6e6:	80 81       	ld	r24, Z
     6e8:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ee:	80 ea       	ldi	r24, 0xA0	; 160
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	35 d6       	rcall	.+3178   	; 0x135e <usart_spi_deselect_device>
     6f4:	8b e2       	ldi	r24, 0x2B	; 43
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	80 ea       	ldi	r24, 0xA0	; 160
     700:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     702:	17 d6       	rcall	.+3118   	; 0x1332 <usart_spi_select_device>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     70a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     70c:	f9 e0       	ldi	r31, 0x09	; 9
     70e:	81 81       	ldd	r24, Z+1	; 0x01
     710:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     712:	fd cf       	rjmp	.-6      	; 0x70e <st7565r_init+0x230>
     714:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     718:	e0 ea       	ldi	r30, 0xA0	; 160
     71a:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     71c:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     71e:	86 ff       	sbrs	r24, 6
     720:	fd cf       	rjmp	.-6      	; 0x71c <st7565r_init+0x23e>
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
     726:	80 e4       	ldi	r24, 0x40	; 64
     728:	81 83       	std	Z+1, r24	; 0x01
     72a:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     72c:	be 01       	movw	r22, r28
     72e:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	80 ea       	ldi	r24, 0xA0	; 160
     734:	99 e0       	ldi	r25, 0x09	; 9
     736:	13 d6       	rcall	.+3110   	; 0x135e <usart_spi_deselect_device>
     738:	8b e2       	ldi	r24, 0x2B	; 43
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	be 01       	movw	r22, r28
     73e:	6f 5f       	subi	r22, 0xFF	; 255
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     744:	99 e0       	ldi	r25, 0x09	; 9
     746:	f5 d5       	rcall	.+3050   	; 0x1332 <usart_spi_select_device>
     748:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     74a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     74e:	e0 ea       	ldi	r30, 0xA0	; 160
     750:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	85 ff       	sbrs	r24, 5
     756:	fd cf       	rjmp	.-6      	; 0x752 <st7565r_init+0x274>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     758:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     75a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     75e:	e0 ea       	ldi	r30, 0xA0	; 160
     760:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     762:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     764:	86 ff       	sbrs	r24, 6
     766:	fd cf       	rjmp	.-6      	; 0x762 <st7565r_init+0x284>
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
     76c:	80 e4       	ldi	r24, 0x40	; 64
     76e:	81 83       	std	Z+1, r24	; 0x01
     770:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     772:	be 01       	movw	r22, r28
     774:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	80 ea       	ldi	r24, 0xA0	; 160
     77a:	99 e0       	ldi	r25, 0x09	; 9
     77c:	f0 d5       	rcall	.+3040   	; 0x135e <usart_spi_deselect_device>
     77e:	8b e2       	ldi	r24, 0x2B	; 43
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	be 01       	movw	r22, r28
     784:	6f 5f       	subi	r22, 0xFF	; 255
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     78a:	99 e0       	ldi	r25, 0x09	; 9
     78c:	d2 d5       	rcall	.+2980   	; 0x1332 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     794:	e0 ea       	ldi	r30, 0xA0	; 160
     796:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     79c:	fd cf       	rjmp	.-6      	; 0x798 <st7565r_init+0x2ba>
     79e:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7a0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     7a4:	e0 ea       	ldi	r30, 0xA0	; 160
     7a6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7a8:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7aa:	86 ff       	sbrs	r24, 6
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <st7565r_init+0x2ca>
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	80 e4       	ldi	r24, 0x40	; 64
     7b4:	81 83       	std	Z+1, r24	; 0x01
     7b6:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	80 ea       	ldi	r24, 0xA0	; 160
     7c0:	99 e0       	ldi	r25, 0x09	; 9
     7c2:	cd d5       	rcall	.+2970   	; 0x135e <usart_spi_deselect_device>
     7c4:	8b e2       	ldi	r24, 0x2B	; 43
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ce:	80 ea       	ldi	r24, 0xA0	; 160
     7d0:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7d2:	af d5       	rcall	.+2910   	; 0x1332 <usart_spi_select_device>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7d6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7da:	e0 ea       	ldi	r30, 0xA0	; 160
     7dc:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7de:	81 81       	ldd	r24, Z+1	; 0x01
     7e0:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <st7565r_init+0x300>
     7e4:	81 e2       	ldi	r24, 0x21	; 33
     7e6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ea:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ec:	f9 e0       	ldi	r31, 0x09	; 9
     7ee:	81 81       	ldd	r24, Z+1	; 0x01
     7f0:	86 ff       	sbrs	r24, 6
     7f2:	fd cf       	rjmp	.-6      	; 0x7ee <st7565r_init+0x310>
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7fa:	81 83       	std	Z+1, r24	; 0x01
     7fc:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fe:	be 01       	movw	r22, r28
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	80 ea       	ldi	r24, 0xA0	; 160
     806:	99 e0       	ldi	r25, 0x09	; 9
     808:	aa d5       	rcall	.+2900   	; 0x135e <usart_spi_deselect_device>
     80a:	8b e2       	ldi	r24, 0x2B	; 43
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	8c d5       	rcall	.+2840   	; 0x1332 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     820:	e0 ea       	ldi	r30, 0xA0	; 160
     822:	f9 e0       	ldi	r31, 0x09	; 9
     824:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     826:	85 ff       	sbrs	r24, 5
     828:	fd cf       	rjmp	.-6      	; 0x824 <st7565r_init+0x346>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     82a:	8f ea       	ldi	r24, 0xAF	; 175
     82c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     830:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     832:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	86 ff       	sbrs	r24, 6
     838:	fd cf       	rjmp	.-6      	; 0x834 <st7565r_init+0x356>
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     842:	80 81       	ld	r24, Z
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 ea       	ldi	r24, 0xA0	; 160
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	87 d5       	rcall	.+2830   	; 0x135e <usart_spi_deselect_device>
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	08 95       	ret

00000866 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	08 2f       	mov	r16, r24
     878:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     87a:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     87c:	8b d5       	rcall	.+2838   	; 0x1394 <gfx_mono_framebuffer_put_byte>
     87e:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     880:	00 6b       	ori	r16, 0xB0	; 176
     882:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	be 01       	movw	r22, r28
     888:	6f 5f       	subi	r22, 0xFF	; 255
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	80 ea       	ldi	r24, 0xA0	; 160
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	50 d5       	rcall	.+2720   	; 0x1332 <usart_spi_select_device>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     898:	e0 ea       	ldi	r30, 0xA0	; 160
     89a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <gfx_mono_st7565r_put_byte+0x36>
     8a2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8a6:	e0 ea       	ldi	r30, 0xA0	; 160
     8a8:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8aa:	81 81       	ldd	r24, Z+1	; 0x01
     8ac:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ae:	fd cf       	rjmp	.-6      	; 0x8aa <gfx_mono_st7565r_put_byte+0x44>
     8b0:	e0 ea       	ldi	r30, 0xA0	; 160
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8b6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8b8:	80 81       	ld	r24, Z
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	80 ea       	ldi	r24, 0xA0	; 160
     8c2:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8c4:	4c d5       	rcall	.+2712   	; 0x135e <usart_spi_deselect_device>
     8c6:	0f 2d       	mov	r16, r15
     8c8:	0f 77       	andi	r16, 0x7F	; 127
     8ca:	02 95       	swap	r16
     8cc:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ce:	00 61       	ori	r16, 0x10	; 16
     8d0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	be 01       	movw	r22, r28
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	80 ea       	ldi	r24, 0xA0	; 160
     8dc:	99 e0       	ldi	r25, 0x09	; 9
     8de:	29 d5       	rcall	.+2642   	; 0x1332 <usart_spi_select_device>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8e6:	e0 ea       	ldi	r30, 0xA0	; 160
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
     8ec:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <gfx_mono_st7565r_put_byte+0x84>
     8f0:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8f4:	e0 ea       	ldi	r30, 0xA0	; 160
     8f6:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <gfx_mono_st7565r_put_byte+0x92>
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     904:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     906:	80 81       	ld	r24, Z
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 ea       	ldi	r24, 0xA0	; 160
     910:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     912:	25 d5       	rcall	.+2634   	; 0x135e <usart_spi_deselect_device>
     914:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     916:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     918:	8b e2       	ldi	r24, 0x2B	; 43
     91a:	89 83       	std	Y+1, r24	; 0x01
     91c:	be 01       	movw	r22, r28
     91e:	6f 5f       	subi	r22, 0xFF	; 255
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	80 ea       	ldi	r24, 0xA0	; 160
     924:	99 e0       	ldi	r25, 0x09	; 9
     926:	05 d5       	rcall	.+2570   	; 0x1332 <usart_spi_select_device>
     928:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     92a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     92e:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     930:	f9 e0       	ldi	r31, 0x09	; 9
     932:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     934:	85 ff       	sbrs	r24, 5
     936:	fd cf       	rjmp	.-6      	; 0x932 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     938:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     942:	86 ff       	sbrs	r24, 6
     944:	fd cf       	rjmp	.-6      	; 0x940 <gfx_mono_st7565r_put_byte+0xda>
     946:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     948:	f9 e0       	ldi	r31, 0x09	; 9
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	81 83       	std	Z+1, r24	; 0x01
     94e:	80 81       	ld	r24, Z
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     954:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	01 d5       	rcall	.+2562   	; 0x135e <usart_spi_deselect_device>
     95c:	8b e2       	ldi	r24, 0x2B	; 43
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	be 01       	movw	r22, r28
     962:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	80 ea       	ldi	r24, 0xA0	; 160
     968:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     96a:	e3 d4       	rcall	.+2502   	; 0x1332 <usart_spi_select_device>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     972:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     974:	f9 e0       	ldi	r31, 0x09	; 9
     976:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     978:	85 ff       	sbrs	r24, 5
     97a:	fd cf       	rjmp	.-6      	; 0x976 <gfx_mono_st7565r_put_byte+0x110>
     97c:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     980:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     982:	f9 e0       	ldi	r31, 0x09	; 9
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	86 ff       	sbrs	r24, 6
     988:	fd cf       	rjmp	.-6      	; 0x984 <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     98e:	80 e4       	ldi	r24, 0x40	; 64
     990:	81 83       	std	Z+1, r24	; 0x01
     992:	80 81       	ld	r24, Z
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     99a:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	80 ea       	ldi	r24, 0xA0	; 160
     9a2:	99 e0       	ldi	r25, 0x09	; 9
     9a4:	dc d4       	rcall	.+2488   	; 0x135e <usart_spi_deselect_device>
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	08 95       	ret

000009b4 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	1f 92       	push	r1
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9c2:	86 e3       	ldi	r24, 0x36	; 54
     9c4:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9c6:	e1 d4       	rcall	.+2498   	; 0x138a <gfx_mono_set_framebuffer>
     9c8:	8a dd       	rcall	.-1260   	; 0x4de <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9ca:	8b e2       	ldi	r24, 0x2B	; 43
     9cc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9ce:	be 01       	movw	r22, r28
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	80 ea       	ldi	r24, 0xA0	; 160
     9d6:	99 e0       	ldi	r25, 0x09	; 9
     9d8:	ac d4       	rcall	.+2392   	; 0x1332 <usart_spi_select_device>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9e0:	e0 ea       	ldi	r30, 0xA0	; 160
     9e2:	f9 e0       	ldi	r31, 0x09	; 9
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9e6:	85 ff       	sbrs	r24, 5
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9ea:	80 e4       	ldi	r24, 0x40	; 64
     9ec:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9f0:	e0 ea       	ldi	r30, 0xA0	; 160
     9f2:	f9 e0       	ldi	r31, 0x09	; 9
     9f4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9f6:	86 ff       	sbrs	r24, 6
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a02:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	a7 d4       	rcall	.+2382   	; 0x135e <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a10:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a12:	0a c0       	rjmp	.+20     	; 0xa28 <gfx_mono_st7565r_init+0x74>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	61 2f       	mov	r22, r17
     a18:	80 2f       	mov	r24, r16
     a1a:	25 df       	rcall	.-438    	; 0x866 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a1c:	1f 5f       	subi	r17, 0xFF	; 255
     a1e:	10 38       	cpi	r17, 0x80	; 128
     a20:	c9 f7       	brne	.-14     	; 0xa14 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	04 30       	cpi	r16, 0x04	; 4
     a26:	11 f0       	breq	.+4      	; 0xa2c <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	f4 cf       	rjmp	.-24     	; 0xa14 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a42:	88 23       	and	r24, r24
     a44:	4c f1       	brlt	.+82     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x60>
     a46:	60 32       	cpi	r22, 0x20	; 32
     a48:	38 f5       	brcc	.+78     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x60>
     a4a:	d4 2f       	mov	r29, r20
     a4c:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a4e:	f6 2e       	mov	r15, r22
     a50:	f6 94       	lsr	r15
     a52:	f6 94       	lsr	r15
     a54:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	88 e0       	ldi	r24, 0x08	; 8
     a5a:	f8 9e       	mul	r15, r24
     a5c:	60 19       	sub	r22, r0
     a5e:	71 09       	sbc	r23, r1
     a60:	11 24       	eor	r1, r1
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	8c 01       	movw	r16, r24
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <gfx_mono_st7565r_draw_pixel+0x36>
     a6a:	00 0f       	add	r16, r16
     a6c:	11 1f       	adc	r17, r17
     a6e:	6a 95       	dec	r22
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a72:	6c 2f       	mov	r22, r28
     a74:	8f 2d       	mov	r24, r15
     a76:	9c d4       	rcall	.+2360   	; 0x13b0 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a78:	d1 30       	cpi	r29, 0x01	; 1
     a7a:	21 f0       	breq	.+8      	; 0xa84 <gfx_mono_st7565r_draw_pixel+0x4c>
     a7c:	28 f0       	brcs	.+10     	; 0xa88 <gfx_mono_st7565r_draw_pixel+0x50>
     a7e:	d2 30       	cpi	r29, 0x02	; 2
     a80:	31 f0       	breq	.+12     	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x56>
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a84:	80 2b       	or	r24, r16
		break;
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a88:	00 95       	com	r16
     a8a:	80 23       	and	r24, r16
		break;
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a8e:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a90:	48 2f       	mov	r20, r24
     a92:	6c 2f       	mov	r22, r28
     a94:	8f 2d       	mov	r24, r15
     a96:	e7 de       	rcall	.-562    	; 0x866 <gfx_mono_st7565r_put_byte>
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	08 95       	ret

00000aa4 <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     aa4:	85 c4       	rjmp	.+2314   	; 0x13b0 <gfx_mono_framebuffer_get_byte>
     aa6:	08 95       	ret

00000aa8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     aa8:	fc 01       	movw	r30, r24
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	95 ff       	sbrs	r25, 5
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <usart_putchar+0x2>
     ab0:	60 83       	st	Z, r22
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <usart_getchar>:
     ab8:	fc 01       	movw	r30, r24
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	99 23       	and	r25, r25
     abe:	ec f7       	brge	.-6      	; 0xaba <usart_getchar+0x2>
     ac0:	80 81       	ld	r24, Z
     ac2:	08 95       	ret

00000ac4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ac4:	4f 92       	push	r4
     ac6:	5f 92       	push	r5
     ac8:	6f 92       	push	r6
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	7c 01       	movw	r14, r24
     ae0:	4a 01       	movw	r8, r20
     ae2:	5b 01       	movw	r10, r22
     ae4:	28 01       	movw	r4, r16
     ae6:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ae8:	fc 01       	movw	r30, r24
     aea:	84 81       	ldd	r24, Z+4	; 0x04
     aec:	82 ff       	sbrs	r24, 2
     aee:	16 c0       	rjmp	.+44     	; 0xb1c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     af0:	d9 01       	movw	r26, r18
     af2:	c8 01       	movw	r24, r16
     af4:	68 94       	set
     af6:	12 f8       	bld	r1, 2
     af8:	b6 95       	lsr	r27
     afa:	a7 95       	ror	r26
     afc:	97 95       	ror	r25
     afe:	87 95       	ror	r24
     b00:	16 94       	lsr	r1
     b02:	d1 f7       	brne	.-12     	; 0xaf8 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     b04:	b9 01       	movw	r22, r18
     b06:	a8 01       	movw	r20, r16
     b08:	03 2e       	mov	r0, r19
     b0a:	36 e1       	ldi	r19, 0x16	; 22
     b0c:	76 95       	lsr	r23
     b0e:	67 95       	ror	r22
     b10:	57 95       	ror	r21
     b12:	47 95       	ror	r20
     b14:	3a 95       	dec	r19
     b16:	d1 f7       	brne	.-12     	; 0xb0c <usart_set_baudrate+0x48>
     b18:	30 2d       	mov	r19, r0
     b1a:	15 c0       	rjmp	.+42     	; 0xb46 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     b1c:	d9 01       	movw	r26, r18
     b1e:	c8 01       	movw	r24, r16
     b20:	68 94       	set
     b22:	13 f8       	bld	r1, 3
     b24:	b6 95       	lsr	r27
     b26:	a7 95       	ror	r26
     b28:	97 95       	ror	r25
     b2a:	87 95       	ror	r24
     b2c:	16 94       	lsr	r1
     b2e:	d1 f7       	brne	.-12     	; 0xb24 <usart_set_baudrate+0x60>
		min_rate /= 2;
     b30:	b9 01       	movw	r22, r18
     b32:	a8 01       	movw	r20, r16
     b34:	03 2e       	mov	r0, r19
     b36:	37 e1       	ldi	r19, 0x17	; 23
     b38:	76 95       	lsr	r23
     b3a:	67 95       	ror	r22
     b3c:	57 95       	ror	r21
     b3e:	47 95       	ror	r20
     b40:	3a 95       	dec	r19
     b42:	d1 f7       	brne	.-12     	; 0xb38 <usart_set_baudrate+0x74>
     b44:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b46:	88 15       	cp	r24, r8
     b48:	99 05       	cpc	r25, r9
     b4a:	aa 05       	cpc	r26, r10
     b4c:	bb 05       	cpc	r27, r11
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <usart_set_baudrate+0x8e>
     b50:	a2 c0       	rjmp	.+324    	; 0xc96 <usart_set_baudrate+0x1d2>
     b52:	84 16       	cp	r8, r20
     b54:	95 06       	cpc	r9, r21
     b56:	a6 06       	cpc	r10, r22
     b58:	b7 06       	cpc	r11, r23
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <usart_set_baudrate+0x9a>
     b5c:	9e c0       	rjmp	.+316    	; 0xc9a <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b5e:	f7 01       	movw	r30, r14
     b60:	84 81       	ldd	r24, Z+4	; 0x04
     b62:	82 fd       	sbrc	r24, 2
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <usart_set_baudrate+0xaa>
		baud *= 2;
     b66:	88 0c       	add	r8, r8
     b68:	99 1c       	adc	r9, r9
     b6a:	aa 1c       	adc	r10, r10
     b6c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b6e:	c3 01       	movw	r24, r6
     b70:	b2 01       	movw	r22, r4
     b72:	a5 01       	movw	r20, r10
     b74:	94 01       	movw	r18, r8
     b76:	d0 d6       	rcall	.+3488   	; 0x1918 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b78:	2f 3f       	cpi	r18, 0xFF	; 255
     b7a:	31 05       	cpc	r19, r1
     b7c:	41 05       	cpc	r20, r1
     b7e:	51 05       	cpc	r21, r1
     b80:	08 f4       	brcc	.+2      	; 0xb84 <usart_set_baudrate+0xc0>
     b82:	8d c0       	rjmp	.+282    	; 0xc9e <usart_set_baudrate+0x1da>
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	c9 ef       	ldi	r28, 0xF9	; 249
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <usart_set_baudrate+0xd6>
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	4a 07       	cpc	r20, r26
     b96:	5b 07       	cpc	r21, r27
     b98:	58 f0       	brcs	.+22     	; 0xbb0 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	aa 1f       	adc	r26, r26
     ba0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     ba2:	cd 3f       	cpi	r28, 0xFD	; 253
     ba4:	0c f4       	brge	.+2      	; 0xba8 <usart_set_baudrate+0xe4>
			limit |= 1;
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     baa:	c7 30       	cpi	r28, 0x07	; 7
     bac:	89 f7       	brne	.-30     	; 0xb90 <usart_set_baudrate+0xcc>
     bae:	4d c0       	rjmp	.+154    	; 0xc4a <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     bb0:	cc 23       	and	r28, r28
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <usart_set_baudrate+0xf2>
     bb4:	4a c0       	rjmp	.+148    	; 0xc4a <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     bb6:	d5 01       	movw	r26, r10
     bb8:	c4 01       	movw	r24, r8
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	aa 1f       	adc	r26, r26
     bc0:	bb 1f       	adc	r27, r27
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	48 1a       	sub	r4, r24
     bd4:	59 0a       	sbc	r5, r25
     bd6:	6a 0a       	sbc	r6, r26
     bd8:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     bda:	ce 3f       	cpi	r28, 0xFE	; 254
     bdc:	ec f4       	brge	.+58     	; 0xc18 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     bde:	8d ef       	ldi	r24, 0xFD	; 253
     be0:	9f ef       	ldi	r25, 0xFF	; 255
     be2:	8c 1b       	sub	r24, r28
     be4:	91 09       	sbc	r25, r1
     be6:	c7 fd       	sbrc	r28, 7
     be8:	93 95       	inc	r25
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <usart_set_baudrate+0x130>
     bec:	44 0c       	add	r4, r4
     bee:	55 1c       	adc	r5, r5
     bf0:	66 1c       	adc	r6, r6
     bf2:	77 1c       	adc	r7, r7
     bf4:	8a 95       	dec	r24
     bf6:	d2 f7       	brpl	.-12     	; 0xbec <usart_set_baudrate+0x128>
     bf8:	d5 01       	movw	r26, r10
     bfa:	c4 01       	movw	r24, r8
     bfc:	b6 95       	lsr	r27
     bfe:	a7 95       	ror	r26
     c00:	97 95       	ror	r25
     c02:	87 95       	ror	r24
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	64 0d       	add	r22, r4
     c0a:	75 1d       	adc	r23, r5
     c0c:	86 1d       	adc	r24, r6
     c0e:	97 1d       	adc	r25, r7
     c10:	a5 01       	movw	r20, r10
     c12:	94 01       	movw	r18, r8
     c14:	81 d6       	rcall	.+3330   	; 0x1918 <__udivmodsi4>
     c16:	35 c0       	rjmp	.+106    	; 0xc82 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	8c 0f       	add	r24, r28
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <usart_set_baudrate+0x166>
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	44 1f       	adc	r20, r20
     c28:	55 1f       	adc	r21, r21
     c2a:	8a 95       	dec	r24
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     c2e:	da 01       	movw	r26, r20
     c30:	c9 01       	movw	r24, r18
     c32:	b6 95       	lsr	r27
     c34:	a7 95       	ror	r26
     c36:	97 95       	ror	r25
     c38:	87 95       	ror	r24
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	64 0d       	add	r22, r4
     c40:	75 1d       	adc	r23, r5
     c42:	86 1d       	adc	r24, r6
     c44:	97 1d       	adc	r25, r7
     c46:	68 d6       	rcall	.+3280   	; 0x1918 <__udivmodsi4>
     c48:	1c c0       	rjmp	.+56     	; 0xc82 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	8c 0f       	add	r24, r28
     c4e:	a5 01       	movw	r20, r10
     c50:	94 01       	movw	r18, r8
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <usart_set_baudrate+0x198>
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	44 1f       	adc	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	8a 95       	dec	r24
     c5e:	d2 f7       	brpl	.-12     	; 0xc54 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     c60:	da 01       	movw	r26, r20
     c62:	c9 01       	movw	r24, r18
     c64:	b6 95       	lsr	r27
     c66:	a7 95       	ror	r26
     c68:	97 95       	ror	r25
     c6a:	87 95       	ror	r24
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	64 0d       	add	r22, r4
     c72:	75 1d       	adc	r23, r5
     c74:	86 1d       	adc	r24, r6
     c76:	97 1d       	adc	r25, r7
     c78:	4f d6       	rcall	.+3230   	; 0x1918 <__udivmodsi4>
     c7a:	21 50       	subi	r18, 0x01	; 1
     c7c:	31 09       	sbc	r19, r1
     c7e:	41 09       	sbc	r20, r1
     c80:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c82:	83 2f       	mov	r24, r19
     c84:	8f 70       	andi	r24, 0x0F	; 15
     c86:	c2 95       	swap	r28
     c88:	c0 7f       	andi	r28, 0xF0	; 240
     c8a:	c8 2b       	or	r28, r24
     c8c:	f7 01       	movw	r30, r14
     c8e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c90:	26 83       	std	Z+6, r18	; 0x06

	return true;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	18 c0       	rjmp	.+48     	; 0xcc6 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	16 c0       	rjmp	.+44     	; 0xcc6 <usart_set_baudrate+0x202>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c9e:	d5 01       	movw	r26, r10
     ca0:	c4 01       	movw	r24, r8
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	aa 1f       	adc	r26, r26
     ca8:	bb 1f       	adc	r27, r27
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	aa 1f       	adc	r26, r26
     cb0:	bb 1f       	adc	r27, r27
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	aa 1f       	adc	r26, r26
     cb8:	bb 1f       	adc	r27, r27
     cba:	48 1a       	sub	r4, r24
     cbc:	59 0a       	sbc	r5, r25
     cbe:	6a 0a       	sbc	r6, r26
     cc0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     cc2:	c9 ef       	ldi	r28, 0xF9	; 249
     cc4:	8c cf       	rjmp	.-232    	; 0xbde <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	7f 90       	pop	r7
     cda:	6f 90       	pop	r6
     cdc:	5f 90       	pop	r5
     cde:	4f 90       	pop	r4
     ce0:	08 95       	ret

00000ce2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
     cec:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <usart_init_rs232+0x12>
     cf2:	e6 c0       	rjmp	.+460    	; 0xec0 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     cf4:	80 3c       	cpi	r24, 0xC0	; 192
     cf6:	91 05       	cpc	r25, r1
     cf8:	21 f4       	brne	.+8      	; 0xd02 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     cfa:	60 e1       	ldi	r22, 0x10	; 16
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	09 d4       	rcall	.+2066   	; 0x1512 <sysclk_enable_module>
     d00:	df c0       	rjmp	.+446    	; 0xec0 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     d02:	c0 38       	cpi	r28, 0x80	; 128
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	d8 07       	cpc	r29, r24
     d08:	21 f4       	brne	.+8      	; 0xd12 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	01 d4       	rcall	.+2050   	; 0x1512 <sysclk_enable_module>
     d10:	d7 c0       	rjmp	.+430    	; 0xec0 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     d12:	c1 15       	cp	r28, r1
     d14:	e1 e0       	ldi	r30, 0x01	; 1
     d16:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d18:	21 f4       	brne	.+8      	; 0xd22 <usart_init_rs232+0x40>
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	f9 d3       	rcall	.+2034   	; 0x1512 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d20:	cf c0       	rjmp	.+414    	; 0xec0 <usart_init_rs232+0x1de>
     d22:	c0 38       	cpi	r28, 0x80	; 128
     d24:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d26:	df 07       	cpc	r29, r31
     d28:	21 f4       	brne	.+8      	; 0xd32 <usart_init_rs232+0x50>
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	f1 d3       	rcall	.+2018   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     d30:	c7 c0       	rjmp	.+398    	; 0xec0 <usart_init_rs232+0x1de>
     d32:	c0 39       	cpi	r28, 0x90	; 144
     d34:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     d36:	d8 07       	cpc	r29, r24
     d38:	21 f4       	brne	.+8      	; 0xd42 <usart_init_rs232+0x60>
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	e9 d3       	rcall	.+2002   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d40:	bf c0       	rjmp	.+382    	; 0xec0 <usart_init_rs232+0x1de>
     d42:	c1 15       	cp	r28, r1
     d44:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d46:	de 07       	cpc	r29, r30
     d48:	21 f4       	brne	.+8      	; 0xd52 <usart_init_rs232+0x70>
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d4e:	e1 d3       	rcall	.+1986   	; 0x1512 <sysclk_enable_module>
     d50:	b7 c0       	rjmp	.+366    	; 0xec0 <usart_init_rs232+0x1de>
     d52:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	df 07       	cpc	r29, r31
     d58:	21 f4       	brne	.+8      	; 0xd62 <usart_init_rs232+0x80>
     d5a:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	d9 d3       	rcall	.+1970   	; 0x1512 <sysclk_enable_module>
     d60:	af c0       	rjmp	.+350    	; 0xec0 <usart_init_rs232+0x1de>
     d62:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	d8 07       	cpc	r29, r24
     d68:	21 f4       	brne	.+8      	; 0xd72 <usart_init_rs232+0x90>
     d6a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	d1 d3       	rcall	.+1954   	; 0x1512 <sysclk_enable_module>
     d70:	a7 c0       	rjmp	.+334    	; 0xec0 <usart_init_rs232+0x1de>
     d72:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d74:	e8 e0       	ldi	r30, 0x08	; 8
     d76:	de 07       	cpc	r29, r30
     d78:	21 f4       	brne	.+8      	; 0xd82 <usart_init_rs232+0xa0>
     d7a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	c9 d3       	rcall	.+1938   	; 0x1512 <sysclk_enable_module>
     d80:	9f c0       	rjmp	.+318    	; 0xec0 <usart_init_rs232+0x1de>
     d82:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d84:	f9 e0       	ldi	r31, 0x09	; 9
     d86:	df 07       	cpc	r29, r31
     d88:	21 f4       	brne	.+8      	; 0xd92 <usart_init_rs232+0xb0>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	c1 d3       	rcall	.+1922   	; 0x1512 <sysclk_enable_module>
     d90:	97 c0       	rjmp	.+302    	; 0xec0 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d92:	c1 15       	cp	r28, r1
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	d8 07       	cpc	r29, r24
     d98:	21 f4       	brne	.+8      	; 0xda2 <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	b9 d3       	rcall	.+1906   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     da0:	8f c0       	rjmp	.+286    	; 0xec0 <usart_init_rs232+0x1de>
     da2:	c1 15       	cp	r28, r1
     da4:	eb e0       	ldi	r30, 0x0B	; 11
     da6:	de 07       	cpc	r29, r30
     da8:	21 f4       	brne	.+8      	; 0xdb2 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	b1 d3       	rcall	.+1890   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     db0:	87 c0       	rjmp	.+270    	; 0xec0 <usart_init_rs232+0x1de>
     db2:	c0 34       	cpi	r28, 0x40	; 64
     db4:	f8 e0       	ldi	r31, 0x08	; 8
     db6:	df 07       	cpc	r29, r31
     db8:	21 f4       	brne	.+8      	; 0xdc2 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	a9 d3       	rcall	.+1874   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     dc0:	7f c0       	rjmp	.+254    	; 0xec0 <usart_init_rs232+0x1de>
     dc2:	c0 34       	cpi	r28, 0x40	; 64
     dc4:	89 e0       	ldi	r24, 0x09	; 9
     dc6:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <usart_init_rs232+0xf0>
     dca:	62 e0       	ldi	r22, 0x02	; 2
     dcc:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     dce:	a1 d3       	rcall	.+1858   	; 0x1512 <sysclk_enable_module>
     dd0:	77 c0       	rjmp	.+238    	; 0xec0 <usart_init_rs232+0x1de>
     dd2:	c0 34       	cpi	r28, 0x40	; 64
     dd4:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     dd6:	de 07       	cpc	r29, r30
     dd8:	21 f4       	brne	.+8      	; 0xde2 <usart_init_rs232+0x100>
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     dde:	99 d3       	rcall	.+1842   	; 0x1512 <sysclk_enable_module>
     de0:	6f c0       	rjmp	.+222    	; 0xec0 <usart_init_rs232+0x1de>
     de2:	c0 39       	cpi	r28, 0x90	; 144
     de4:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     de6:	df 07       	cpc	r29, r31
     de8:	21 f4       	brne	.+8      	; 0xdf2 <usart_init_rs232+0x110>
     dea:	64 e0       	ldi	r22, 0x04	; 4
     dec:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     dee:	91 d3       	rcall	.+1826   	; 0x1512 <sysclk_enable_module>
     df0:	67 c0       	rjmp	.+206    	; 0xec0 <usart_init_rs232+0x1de>
     df2:	c0 39       	cpi	r28, 0x90	; 144
     df4:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     df6:	d8 07       	cpc	r29, r24
     df8:	21 f4       	brne	.+8      	; 0xe02 <usart_init_rs232+0x120>
     dfa:	64 e0       	ldi	r22, 0x04	; 4
     dfc:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     dfe:	89 d3       	rcall	.+1810   	; 0x1512 <sysclk_enable_module>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <usart_init_rs232+0x1de>
     e02:	c0 39       	cpi	r28, 0x90	; 144
     e04:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     e06:	de 07       	cpc	r29, r30
     e08:	21 f4       	brne	.+8      	; 0xe12 <usart_init_rs232+0x130>
     e0a:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	81 d3       	rcall	.+1794   	; 0x1512 <sysclk_enable_module>
     e10:	57 c0       	rjmp	.+174    	; 0xec0 <usart_init_rs232+0x1de>
     e12:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     e14:	fb e0       	ldi	r31, 0x0B	; 11
     e16:	df 07       	cpc	r29, r31
     e18:	21 f4       	brne	.+8      	; 0xe22 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	79 d3       	rcall	.+1778   	; 0x1512 <sysclk_enable_module>
     e20:	4f c0       	rjmp	.+158    	; 0xec0 <usart_init_rs232+0x1de>
     e22:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	d8 07       	cpc	r29, r24
     e28:	21 f4       	brne	.+8      	; 0xe32 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e2a:	68 e0       	ldi	r22, 0x08	; 8
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	71 d3       	rcall	.+1762   	; 0x1512 <sysclk_enable_module>
     e30:	47 c0       	rjmp	.+142    	; 0xec0 <usart_init_rs232+0x1de>
     e32:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e34:	e9 e0       	ldi	r30, 0x09	; 9
     e36:	de 07       	cpc	r29, r30
     e38:	21 f4       	brne	.+8      	; 0xe42 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e3a:	68 e0       	ldi	r22, 0x08	; 8
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	69 d3       	rcall	.+1746   	; 0x1512 <sysclk_enable_module>
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e42:	c0 3a       	cpi	r28, 0xA0	; 160
     e44:	f8 e0       	ldi	r31, 0x08	; 8
     e46:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e48:	21 f4       	brne	.+8      	; 0xe52 <usart_init_rs232+0x170>
     e4a:	60 e1       	ldi	r22, 0x10	; 16
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	61 d3       	rcall	.+1730   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e50:	37 c0       	rjmp	.+110    	; 0xec0 <usart_init_rs232+0x1de>
     e52:	c0 3a       	cpi	r28, 0xA0	; 160
     e54:	89 e0       	ldi	r24, 0x09	; 9
     e56:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e58:	21 f4       	brne	.+8      	; 0xe62 <usart_init_rs232+0x180>
     e5a:	60 e1       	ldi	r22, 0x10	; 16
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	59 d3       	rcall	.+1714   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e60:	2f c0       	rjmp	.+94     	; 0xec0 <usart_init_rs232+0x1de>
     e62:	c0 3a       	cpi	r28, 0xA0	; 160
     e64:	ea e0       	ldi	r30, 0x0A	; 10
     e66:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e68:	21 f4       	brne	.+8      	; 0xe72 <usart_init_rs232+0x190>
     e6a:	60 e1       	ldi	r22, 0x10	; 16
     e6c:	85 e0       	ldi	r24, 0x05	; 5
     e6e:	51 d3       	rcall	.+1698   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e70:	27 c0       	rjmp	.+78     	; 0xec0 <usart_init_rs232+0x1de>
     e72:	c0 3a       	cpi	r28, 0xA0	; 160
     e74:	fb e0       	ldi	r31, 0x0B	; 11
     e76:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e78:	21 f4       	brne	.+8      	; 0xe82 <usart_init_rs232+0x1a0>
     e7a:	60 e1       	ldi	r22, 0x10	; 16
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	49 d3       	rcall	.+1682   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e80:	1f c0       	rjmp	.+62     	; 0xec0 <usart_init_rs232+0x1de>
     e82:	c0 3b       	cpi	r28, 0xB0	; 176
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e88:	21 f4       	brne	.+8      	; 0xe92 <usart_init_rs232+0x1b0>
     e8a:	60 e2       	ldi	r22, 0x20	; 32
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	41 d3       	rcall	.+1666   	; 0x1512 <sysclk_enable_module>
     e90:	17 c0       	rjmp	.+46     	; 0xec0 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     e92:	c0 3b       	cpi	r28, 0xB0	; 176
     e94:	e9 e0       	ldi	r30, 0x09	; 9
     e96:	de 07       	cpc	r29, r30
     e98:	21 f4       	brne	.+8      	; 0xea2 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     e9a:	60 e2       	ldi	r22, 0x20	; 32
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	39 d3       	rcall	.+1650   	; 0x1512 <sysclk_enable_module>
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <usart_init_rs232+0x1de>
     ea2:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ea4:	f4 e0       	ldi	r31, 0x04	; 4
     ea6:	df 07       	cpc	r29, r31
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     eaa:	60 e4       	ldi	r22, 0x40	; 64
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	31 d3       	rcall	.+1634   	; 0x1512 <sysclk_enable_module>
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     eb2:	c0 3a       	cpi	r28, 0xA0	; 160
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     eb8:	19 f4       	brne	.+6      	; 0xec0 <usart_init_rs232+0x1de>
     eba:	60 e4       	ldi	r22, 0x40	; 64
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	29 d3       	rcall	.+1618   	; 0x1512 <sysclk_enable_module>
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	8f 73       	andi	r24, 0x3F	; 63
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	f8 01       	movw	r30, r16
     ec8:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     eca:	84 81       	ldd	r24, Z+4	; 0x04
     ecc:	89 2b       	or	r24, r25
     ece:	96 81       	ldd	r25, Z+6	; 0x06
     ed0:	91 11       	cpse	r25, r1
     ed2:	98 e0       	ldi	r25, 0x08	; 8
     ed4:	89 2b       	or	r24, r25
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	f8 01       	movw	r30, r16
     eda:	40 81       	ld	r20, Z
     edc:	51 81       	ldd	r21, Z+1	; 0x01
     ede:	62 81       	ldd	r22, Z+2	; 0x02
     ee0:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	18 e4       	ldi	r17, 0x48	; 72
     ee6:	28 ee       	ldi	r18, 0xE8	; 232
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     ee8:	31 e0       	ldi	r19, 0x01	; 1
     eea:	ce 01       	movw	r24, r28
     eec:	eb dd       	rcall	.-1066   	; 0xac4 <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	98 60       	ori	r25, 0x08	; 8
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	90 61       	ori	r25, 0x10	; 16
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     f16:	d9 01       	movw	r26, r18
     f18:	c8 01       	movw	r24, r16
     f1a:	b6 95       	lsr	r27
     f1c:	a7 95       	ror	r26
     f1e:	97 95       	ror	r25
     f20:	87 95       	ror	r24
     f22:	48 17       	cp	r20, r24
     f24:	59 07       	cpc	r21, r25
     f26:	6a 07       	cpc	r22, r26
     f28:	7b 07       	cpc	r23, r27
     f2a:	70 f4       	brcc	.+28     	; 0xf48 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     f2c:	6a 01       	movw	r12, r20
     f2e:	7b 01       	movw	r14, r22
     f30:	cc 0c       	add	r12, r12
     f32:	dd 1c       	adc	r13, r13
     f34:	ee 1c       	adc	r14, r14
     f36:	ff 1c       	adc	r15, r15
     f38:	c9 01       	movw	r24, r18
     f3a:	b8 01       	movw	r22, r16
     f3c:	a7 01       	movw	r20, r14
     f3e:	96 01       	movw	r18, r12
     f40:	eb d4       	rcall	.+2518   	; 0x1918 <__udivmodsi4>
     f42:	21 50       	subi	r18, 0x01	; 1
     f44:	31 09       	sbc	r19, r1
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     f4c:	83 2f       	mov	r24, r19
     f4e:	8f 70       	andi	r24, 0x0F	; 15
     f50:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     f52:	2e 83       	std	Y+6, r18	; 0x06
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	08 95       	ret

00000f66 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
     f74:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	09 f4       	brne	.+2      	; 0xf7c <usart_init_spi+0x16>
     f7a:	7b c1       	rjmp	.+758    	; 0x1272 <usart_init_spi+0x30c>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     f7c:	80 3c       	cpi	r24, 0xC0	; 192
     f7e:	91 05       	cpc	r25, r1
     f80:	21 f4       	brne	.+8      	; 0xf8a <usart_init_spi+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     f82:	60 e1       	ldi	r22, 0x10	; 16
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	c5 d2       	rcall	.+1418   	; 0x1512 <sysclk_enable_module>
     f88:	74 c1       	rjmp	.+744    	; 0x1272 <usart_init_spi+0x30c>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     f8a:	80 38       	cpi	r24, 0x80	; 128
     f8c:	91 40       	sbci	r25, 0x01	; 1
     f8e:	21 f4       	brne	.+8      	; 0xf98 <usart_init_spi+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	be d2       	rcall	.+1404   	; 0x1512 <sysclk_enable_module>
     f96:	6d c1       	rjmp	.+730    	; 0x1272 <usart_init_spi+0x30c>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     f98:	c1 15       	cp	r28, r1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <usart_init_spi+0x42>
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	b6 d2       	rcall	.+1388   	; 0x1512 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     fa6:	65 c1       	rjmp	.+714    	; 0x1272 <usart_init_spi+0x30c>
     fa8:	c0 38       	cpi	r28, 0x80	; 128
     faa:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     fac:	de 07       	cpc	r29, r30
     fae:	21 f4       	brne	.+8      	; 0xfb8 <usart_init_spi+0x52>
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	ae d2       	rcall	.+1372   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     fb6:	5d c1       	rjmp	.+698    	; 0x1272 <usart_init_spi+0x30c>
     fb8:	c0 39       	cpi	r28, 0x90	; 144
     fba:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     fbc:	df 07       	cpc	r29, r31
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <usart_init_spi+0x62>
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	a6 d2       	rcall	.+1356   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     fc6:	55 c1       	rjmp	.+682    	; 0x1272 <usart_init_spi+0x30c>
     fc8:	c1 15       	cp	r28, r1
     fca:	32 e0       	ldi	r19, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     fcc:	d3 07       	cpc	r29, r19
     fce:	21 f4       	brne	.+8      	; 0xfd8 <usart_init_spi+0x72>
     fd0:	62 e0       	ldi	r22, 0x02	; 2
     fd2:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     fd4:	9e d2       	rcall	.+1340   	; 0x1512 <sysclk_enable_module>
     fd6:	4d c1       	rjmp	.+666    	; 0x1272 <usart_init_spi+0x30c>
     fd8:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	d8 07       	cpc	r29, r24
     fde:	21 f4       	brne	.+8      	; 0xfe8 <usart_init_spi+0x82>
     fe0:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	96 d2       	rcall	.+1324   	; 0x1512 <sysclk_enable_module>
     fe6:	45 c1       	rjmp	.+650    	; 0x1272 <usart_init_spi+0x30c>
     fe8:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     fea:	e3 e0       	ldi	r30, 0x03	; 3
     fec:	de 07       	cpc	r29, r30
     fee:	21 f4       	brne	.+8      	; 0xff8 <usart_init_spi+0x92>
     ff0:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	8e d2       	rcall	.+1308   	; 0x1512 <sysclk_enable_module>
     ff6:	3d c1       	rjmp	.+634    	; 0x1272 <usart_init_spi+0x30c>
     ff8:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     ffa:	f8 e0       	ldi	r31, 0x08	; 8
     ffc:	df 07       	cpc	r29, r31
     ffe:	21 f4       	brne	.+8      	; 0x1008 <usart_init_spi+0xa2>
    1000:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	86 d2       	rcall	.+1292   	; 0x1512 <sysclk_enable_module>
    1006:	35 c1       	rjmp	.+618    	; 0x1272 <usart_init_spi+0x30c>
    1008:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    100a:	39 e0       	ldi	r19, 0x09	; 9
    100c:	d3 07       	cpc	r29, r19
    100e:	21 f4       	brne	.+8      	; 0x1018 <usart_init_spi+0xb2>
    1010:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	7e d2       	rcall	.+1276   	; 0x1512 <sysclk_enable_module>
    1016:	2d c1       	rjmp	.+602    	; 0x1272 <usart_init_spi+0x30c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1018:	c1 15       	cp	r28, r1
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	d8 07       	cpc	r29, r24
    101e:	21 f4       	brne	.+8      	; 0x1028 <usart_init_spi+0xc2>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	76 d2       	rcall	.+1260   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1026:	25 c1       	rjmp	.+586    	; 0x1272 <usart_init_spi+0x30c>
    1028:	c1 15       	cp	r28, r1
    102a:	eb e0       	ldi	r30, 0x0B	; 11
    102c:	de 07       	cpc	r29, r30
    102e:	21 f4       	brne	.+8      	; 0x1038 <usart_init_spi+0xd2>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	86 e0       	ldi	r24, 0x06	; 6
    1034:	6e d2       	rcall	.+1244   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1036:	1d c1       	rjmp	.+570    	; 0x1272 <usart_init_spi+0x30c>
    1038:	c0 34       	cpi	r28, 0x40	; 64
    103a:	f8 e0       	ldi	r31, 0x08	; 8
    103c:	df 07       	cpc	r29, r31
    103e:	21 f4       	brne	.+8      	; 0x1048 <usart_init_spi+0xe2>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1040:	62 e0       	ldi	r22, 0x02	; 2
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	66 d2       	rcall	.+1228   	; 0x1512 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1046:	15 c1       	rjmp	.+554    	; 0x1272 <usart_init_spi+0x30c>
    1048:	c0 34       	cpi	r28, 0x40	; 64
    104a:	39 e0       	ldi	r19, 0x09	; 9
    104c:	d3 07       	cpc	r29, r19
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    104e:	21 f4       	brne	.+8      	; 0x1058 <usart_init_spi+0xf2>
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1054:	5e d2       	rcall	.+1212   	; 0x1512 <sysclk_enable_module>
    1056:	0d c1       	rjmp	.+538    	; 0x1272 <usart_init_spi+0x30c>
    1058:	c0 34       	cpi	r28, 0x40	; 64
    105a:	8a e0       	ldi	r24, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    105c:	d8 07       	cpc	r29, r24
    105e:	21 f4       	brne	.+8      	; 0x1068 <usart_init_spi+0x102>
    1060:	62 e0       	ldi	r22, 0x02	; 2
    1062:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1064:	56 d2       	rcall	.+1196   	; 0x1512 <sysclk_enable_module>
    1066:	05 c1       	rjmp	.+522    	; 0x1272 <usart_init_spi+0x30c>
    1068:	c0 39       	cpi	r28, 0x90	; 144
    106a:	e8 e0       	ldi	r30, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    106c:	de 07       	cpc	r29, r30
    106e:	21 f4       	brne	.+8      	; 0x1078 <usart_init_spi+0x112>
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1074:	4e d2       	rcall	.+1180   	; 0x1512 <sysclk_enable_module>
    1076:	fd c0       	rjmp	.+506    	; 0x1272 <usart_init_spi+0x30c>
    1078:	c0 39       	cpi	r28, 0x90	; 144
    107a:	f9 e0       	ldi	r31, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    107c:	df 07       	cpc	r29, r31
    107e:	21 f4       	brne	.+8      	; 0x1088 <usart_init_spi+0x122>
    1080:	64 e0       	ldi	r22, 0x04	; 4
    1082:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1084:	46 d2       	rcall	.+1164   	; 0x1512 <sysclk_enable_module>
    1086:	f5 c0       	rjmp	.+490    	; 0x1272 <usart_init_spi+0x30c>
    1088:	c0 39       	cpi	r28, 0x90	; 144
    108a:	3a e0       	ldi	r19, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    108c:	d3 07       	cpc	r29, r19
    108e:	21 f4       	brne	.+8      	; 0x1098 <usart_init_spi+0x132>
    1090:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1092:	85 e0       	ldi	r24, 0x05	; 5
    1094:	3e d2       	rcall	.+1148   	; 0x1512 <sysclk_enable_module>
    1096:	ed c0       	rjmp	.+474    	; 0x1272 <usart_init_spi+0x30c>
    1098:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    109a:	8b e0       	ldi	r24, 0x0B	; 11
    109c:	d8 07       	cpc	r29, r24
    109e:	21 f4       	brne	.+8      	; 0x10a8 <usart_init_spi+0x142>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    10a0:	64 e0       	ldi	r22, 0x04	; 4
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	36 d2       	rcall	.+1132   	; 0x1512 <sysclk_enable_module>
    10a6:	e5 c0       	rjmp	.+458    	; 0x1272 <usart_init_spi+0x30c>
    10a8:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    10aa:	e8 e0       	ldi	r30, 0x08	; 8
    10ac:	de 07       	cpc	r29, r30
    10ae:	21 f4       	brne	.+8      	; 0x10b8 <usart_init_spi+0x152>
    10b0:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	2e d2       	rcall	.+1116   	; 0x1512 <sysclk_enable_module>
    10b6:	dd c0       	rjmp	.+442    	; 0x1272 <usart_init_spi+0x30c>
    10b8:	c0 3c       	cpi	r28, 0xC0	; 192
    10ba:	f9 e0       	ldi	r31, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    10bc:	df 07       	cpc	r29, r31
    10be:	21 f4       	brne	.+8      	; 0x10c8 <usart_init_spi+0x162>
    10c0:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    10c2:	84 e0       	ldi	r24, 0x04	; 4
    10c4:	26 d2       	rcall	.+1100   	; 0x1512 <sysclk_enable_module>
    10c6:	d5 c0       	rjmp	.+426    	; 0x1272 <usart_init_spi+0x30c>
    10c8:	c0 3a       	cpi	r28, 0xA0	; 160
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    10ca:	38 e0       	ldi	r19, 0x08	; 8
    10cc:	d3 07       	cpc	r29, r19
    10ce:	61 f4       	brne	.+24     	; 0x10e8 <usart_init_spi+0x182>
    10d0:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    10d2:	83 e0       	ldi	r24, 0x03	; 3
    10d4:	1e d2       	rcall	.+1084   	; 0x1512 <sysclk_enable_module>
    10d6:	e0 ea       	ldi	r30, 0xA0	; 160
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10d8:	f8 e0       	ldi	r31, 0x08	; 8
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	8f 7e       	andi	r24, 0xEF	; 239
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10de:	84 83       	std	Z+4, r24	; 0x04
    10e0:	f7 01       	movw	r30, r14
    10e2:	24 81       	ldd	r18, Z+4	; 0x04
    10e4:	22 50       	subi	r18, 0x02	; 2
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    10e6:	43 c0       	rjmp	.+134    	; 0x116e <usart_init_spi+0x208>
    10e8:	c0 3a       	cpi	r28, 0xA0	; 160
    10ea:	f9 e0       	ldi	r31, 0x09	; 9
    10ec:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <usart_init_spi+0x192>
    10f0:	60 e1       	ldi	r22, 0x10	; 16
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	0e d2       	rcall	.+1052   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    10f6:	bd c0       	rjmp	.+378    	; 0x1272 <usart_init_spi+0x30c>
    10f8:	c0 3a       	cpi	r28, 0xA0	; 160
    10fa:	3a e0       	ldi	r19, 0x0A	; 10
    10fc:	d3 07       	cpc	r29, r19
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    10fe:	21 f4       	brne	.+8      	; 0x1108 <usart_init_spi+0x1a2>
    1100:	60 e1       	ldi	r22, 0x10	; 16
    1102:	85 e0       	ldi	r24, 0x05	; 5
    1104:	06 d2       	rcall	.+1036   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1106:	b5 c0       	rjmp	.+362    	; 0x1272 <usart_init_spi+0x30c>
    1108:	c0 3a       	cpi	r28, 0xA0	; 160
    110a:	8b e0       	ldi	r24, 0x0B	; 11
    110c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    110e:	21 f4       	brne	.+8      	; 0x1118 <usart_init_spi+0x1b2>
    1110:	60 e1       	ldi	r22, 0x10	; 16
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	fe d1       	rcall	.+1020   	; 0x1512 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1116:	ad c0       	rjmp	.+346    	; 0x1272 <usart_init_spi+0x30c>
    1118:	c0 3b       	cpi	r28, 0xB0	; 176
    111a:	e8 e0       	ldi	r30, 0x08	; 8
    111c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    111e:	21 f4       	brne	.+8      	; 0x1128 <usart_init_spi+0x1c2>
    1120:	60 e2       	ldi	r22, 0x20	; 32
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	f6 d1       	rcall	.+1004   	; 0x1512 <sysclk_enable_module>
    1126:	a5 c0       	rjmp	.+330    	; 0x1272 <usart_init_spi+0x30c>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1128:	c0 3b       	cpi	r28, 0xB0	; 176
    112a:	f9 e0       	ldi	r31, 0x09	; 9
    112c:	df 07       	cpc	r29, r31
    112e:	21 f4       	brne	.+8      	; 0x1138 <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1130:	60 e2       	ldi	r22, 0x20	; 32
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	ee d1       	rcall	.+988    	; 0x1512 <sysclk_enable_module>
    1136:	9d c0       	rjmp	.+314    	; 0x1272 <usart_init_spi+0x30c>
    1138:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    113a:	34 e0       	ldi	r19, 0x04	; 4
    113c:	d3 07       	cpc	r29, r19
    113e:	21 f4       	brne	.+8      	; 0x1148 <usart_init_spi+0x1e2>
    1140:	60 e4       	ldi	r22, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	e6 d1       	rcall	.+972    	; 0x1512 <sysclk_enable_module>
    1146:	95 c0       	rjmp	.+298    	; 0x1272 <usart_init_spi+0x30c>
    1148:	c0 3a       	cpi	r28, 0xA0	; 160
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	d8 07       	cpc	r29, r24
    114e:	21 f4       	brne	.+8      	; 0x1158 <usart_init_spi+0x1f2>
    1150:	60 e4       	ldi	r22, 0x40	; 64
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	de d1       	rcall	.+956    	; 0x1512 <sysclk_enable_module>
    1156:	8d c0       	rjmp	.+282    	; 0x1272 <usart_init_spi+0x30c>
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	8f 7e       	andi	r24, 0xEF	; 239
    115c:	8c 83       	std	Y+4, r24	; 0x04
    115e:	fb 01       	movw	r30, r22
    1160:	24 81       	ldd	r18, Z+4	; 0x04
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1162:	22 50       	subi	r18, 0x02	; 2
    1164:	ce 01       	movw	r24, r28
    1166:	c0 3a       	cpi	r28, 0xA0	; 160
    1168:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    116a:	df 07       	cpc	r29, r31
    116c:	31 f4       	brne	.+12     	; 0x117a <usart_init_spi+0x214>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    116e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1172:	84 fd       	sbrc	r24, 4
    1174:	86 c0       	rjmp	.+268    	; 0x1282 <usart_init_spi+0x31c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1176:	11 e1       	ldi	r17, 0x11	; 17
    1178:	85 c0       	rjmp	.+266    	; 0x1284 <usart_init_spi+0x31e>
    117a:	80 3b       	cpi	r24, 0xB0	; 176
    117c:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    117e:	93 07       	cpc	r25, r19
    1180:	79 f0       	breq	.+30     	; 0x11a0 <usart_init_spi+0x23a>
    1182:	80 3a       	cpi	r24, 0xA0	; 160
    1184:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1186:	9e 07       	cpc	r25, r30
    1188:	31 f4       	brne	.+12     	; 0x1196 <usart_init_spi+0x230>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    118a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    118e:	34 fd       	sbrc	r19, 4
    1190:	7c c0       	rjmp	.+248    	; 0x128a <usart_init_spi+0x324>
    1192:	19 e1       	ldi	r17, 0x19	; 25
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1194:	10 c0       	rjmp	.+32     	; 0x11b6 <usart_init_spi+0x250>
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1196:	80 3b       	cpi	r24, 0xB0	; 176
    1198:	f9 e0       	ldi	r31, 0x09	; 9
    119a:	9f 07       	cpc	r25, r31
    119c:	a9 f0       	breq	.+42     	; 0x11c8 <usart_init_spi+0x262>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <usart_init_spi+0x23c>
    11a0:	15 e1       	ldi	r17, 0x15	; 21
    11a2:	80 3a       	cpi	r24, 0xA0	; 160
    11a4:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    11a6:	93 07       	cpc	r25, r19
    11a8:	31 f4       	brne	.+12     	; 0x11b6 <usart_init_spi+0x250>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    11aa:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    11ae:	84 fd       	sbrc	r24, 4
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    11b0:	6e c0       	rjmp	.+220    	; 0x128e <usart_init_spi+0x328>
    11b2:	11 e2       	ldi	r17, 0x21	; 33
    11b4:	0c c0       	rjmp	.+24     	; 0x11ce <usart_init_spi+0x268>
    11b6:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    11b8:	9b 40       	sbci	r25, 0x0B	; 11
    11ba:	49 f4       	brne	.+18     	; 0x11ce <usart_init_spi+0x268>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    11bc:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    11c0:	84 fd       	sbrc	r24, 4
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <usart_init_spi+0x266>
    11c4:	19 e2       	ldi	r17, 0x29	; 41
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <usart_init_spi+0x268>
    11c8:	1d e1       	ldi	r17, 0x1D	; 29
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <usart_init_spi+0x268>
    11cc:	1d e2       	ldi	r17, 0x2D	; 45
    11ce:	e1 2f       	mov	r30, r17
    11d0:	e6 95       	lsr	r30
    11d2:	e6 95       	lsr	r30
    11d4:	e6 95       	lsr	r30
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    11d6:	30 e2       	ldi	r19, 0x20	; 32
    11d8:	e3 9f       	mul	r30, r19
    11da:	f0 01       	movw	r30, r0
    11dc:	11 24       	eor	r1, r1
    11de:	fa 5f       	subi	r31, 0xFA	; 250
    11e0:	17 70       	andi	r17, 0x07	; 7
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    11e6:	01 2e       	mov	r0, r17
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <usart_init_spi+0x288>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <usart_init_spi+0x284>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    11f2:	81 83       	std	Z+1, r24	; 0x01
    11f4:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <usart_init_spi+0x296>
    11f8:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <usart_init_spi+0x298>
	cpu_irq_disable();
    11fc:	40 e4       	ldi	r20, 0x40	; 64
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    11fe:	df 01       	movw	r26, r30
    1200:	50 96       	adiw	r26, 0x10	; 16
    1202:	a1 0f       	add	r26, r17
	*pin_ctrl |= mode;
    1204:	b1 1d       	adc	r27, r1
    1206:	3f b7       	in	r19, 0x3f	; 63
    1208:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    120a:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    120c:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    120e:	2c 93       	st	X, r18
    1210:	9c 91       	ld	r25, X
    1212:	94 2b       	or	r25, r20
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1214:	9c 93       	st	X, r25
    1216:	3f bf       	out	0x3f, r19	; 63
    1218:	85 83       	std	Z+5, r24	; 0x05
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
		usart->CTRLC |= USART_UCPHA_bm;
    121c:	80 6c       	ori	r24, 0xC0	; 192
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	f7 01       	movw	r30, r14
    1222:	84 81       	ldd	r24, Z+4	; 0x04
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1224:	8d 7f       	andi	r24, 0xFD	; 253
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	21 f4       	brne	.+8      	; 0x1232 <usart_init_spi+0x2cc>
	}
	if (opt->data_order) {
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <usart_init_spi+0x2d2>
		(usart)->CTRLC |= USART_DORD_bm;
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	8d 7f       	andi	r24, 0xFD	; 253
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	f7 01       	movw	r30, r14
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    123a:	85 81       	ldd	r24, Z+5	; 0x05
    123c:	88 23       	and	r24, r24
    123e:	21 f0       	breq	.+8      	; 0x1248 <usart_init_spi+0x2e2>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	84 60       	ori	r24, 0x04	; 4
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	03 c0       	rjmp	.+6      	; 0x124e <usart_init_spi+0x2e8>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	8b 7f       	andi	r24, 0xFB	; 251
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	f7 01       	movw	r30, r14
    1250:	40 81       	ld	r20, Z
    1252:	51 81       	ldd	r21, Z+1	; 0x01
    1254:	62 81       	ldd	r22, Z+2	; 0x02
    1256:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1258:	00 e0       	ldi	r16, 0x00	; 0
    125a:	18 e4       	ldi	r17, 0x48	; 72
    125c:	28 ee       	ldi	r18, 0xE8	; 232
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    125e:	31 e0       	ldi	r19, 0x01	; 1
    1260:	ce 01       	movw	r24, r28
    1262:	50 de       	rcall	.-864    	; 0xf04 <usart_spi_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8c 83       	std	Y+4, r24	; 0x04
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	8c 83       	std	Y+4, r24	; 0x04
    1270:	10 c0       	rjmp	.+32     	; 0x1292 <usart_init_spi+0x32c>
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1276:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1278:	f7 01       	movw	r30, r14
    127a:	24 81       	ldd	r18, Z+4	; 0x04
    127c:	22 50       	subi	r18, 0x02	; 2
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    127e:	ce 01       	movw	r24, r28
    1280:	7c cf       	rjmp	.-264    	; 0x117a <usart_init_spi+0x214>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1282:	15 e1       	ldi	r17, 0x15	; 21
    1284:	80 ea       	ldi	r24, 0xA0	; 160
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1286:	98 e0       	ldi	r25, 0x08	; 8
    1288:	86 cf       	rjmp	.-244    	; 0x1196 <usart_init_spi+0x230>
    128a:	1d e1       	ldi	r17, 0x1D	; 29
    128c:	94 cf       	rjmp	.-216    	; 0x11b6 <usart_init_spi+0x250>
    128e:	15 e2       	ldi	r17, 0x25	; 37
    1290:	9e cf       	rjmp	.-196    	; 0x11ce <usart_init_spi+0x268>
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	08 95       	ret

000012a0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    12a0:	80 3a       	cpi	r24, 0xA0	; 160
    12a2:	28 e0       	ldi	r18, 0x08	; 8
    12a4:	92 07       	cpc	r25, r18
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <usart_spi_init+0x10>
    12a8:	60 e1       	ldi	r22, 0x10	; 16
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	32 c1       	rjmp	.+612    	; 0x1512 <sysclk_enable_module>
    12ae:	08 95       	ret
    12b0:	80 3b       	cpi	r24, 0xB0	; 176
    12b2:	28 e0       	ldi	r18, 0x08	; 8
    12b4:	92 07       	cpc	r25, r18
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <usart_spi_init+0x20>
    12b8:	60 e2       	ldi	r22, 0x20	; 32
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	2a c1       	rjmp	.+596    	; 0x1512 <sysclk_enable_module>
    12be:	08 95       	ret
    12c0:	80 3a       	cpi	r24, 0xA0	; 160
    12c2:	29 e0       	ldi	r18, 0x09	; 9
    12c4:	92 07       	cpc	r25, r18
    12c6:	21 f4       	brne	.+8      	; 0x12d0 <usart_spi_init+0x30>
    12c8:	60 e1       	ldi	r22, 0x10	; 16
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	22 c1       	rjmp	.+580    	; 0x1512 <sysclk_enable_module>
    12ce:	08 95       	ret
    12d0:	80 3b       	cpi	r24, 0xB0	; 176
    12d2:	29 e0       	ldi	r18, 0x09	; 9
    12d4:	92 07       	cpc	r25, r18
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <usart_spi_init+0x40>
    12d8:	60 e2       	ldi	r22, 0x20	; 32
    12da:	84 e0       	ldi	r24, 0x04	; 4
    12dc:	1a c1       	rjmp	.+564    	; 0x1512 <sysclk_enable_module>
    12de:	08 95       	ret
    12e0:	80 3a       	cpi	r24, 0xA0	; 160
    12e2:	2a e0       	ldi	r18, 0x0A	; 10
    12e4:	92 07       	cpc	r25, r18
    12e6:	21 f4       	brne	.+8      	; 0x12f0 <usart_spi_init+0x50>
    12e8:	60 e1       	ldi	r22, 0x10	; 16
    12ea:	85 e0       	ldi	r24, 0x05	; 5
    12ec:	12 c1       	rjmp	.+548    	; 0x1512 <sysclk_enable_module>
    12ee:	08 95       	ret
    12f0:	80 3a       	cpi	r24, 0xA0	; 160
    12f2:	9b 40       	sbci	r25, 0x0B	; 11
    12f4:	19 f4       	brne	.+6      	; 0x12fc <usart_spi_init+0x5c>
    12f6:	60 e1       	ldi	r22, 0x10	; 16
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	0b c1       	rjmp	.+534    	; 0x1512 <sysclk_enable_module>
    12fc:	08 95       	ret

000012fe <usart_spi_setup_device>:
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 d0       	rcall	.+0      	; 0x1308 <usart_spi_setup_device+0xa>
    1308:	00 d0       	rcall	.+0      	; 0x130a <usart_spi_setup_device+0xc>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	09 83       	std	Y+1, r16	; 0x01
    1310:	1a 83       	std	Y+2, r17	; 0x02
    1312:	2b 83       	std	Y+3, r18	; 0x03
    1314:	3c 83       	std	Y+4, r19	; 0x04
    1316:	4d 83       	std	Y+5, r20	; 0x05
    1318:	1e 82       	std	Y+6, r1	; 0x06
    131a:	be 01       	movw	r22, r28
    131c:	6f 5f       	subi	r22, 0xFF	; 255
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	22 de       	rcall	.-956    	; 0xf66 <usart_init_spi>
    1322:	26 96       	adiw	r28, 0x06	; 6
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1332:	fb 01       	movw	r30, r22
    1334:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1336:	e8 2f       	mov	r30, r24
    1338:	e6 95       	lsr	r30
    133a:	e6 95       	lsr	r30
    133c:	e6 95       	lsr	r30
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	e4 9f       	mul	r30, r20
    1342:	f0 01       	movw	r30, r0
    1344:	11 24       	eor	r1, r1
    1346:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1348:	87 70       	andi	r24, 0x07	; 7
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <usart_spi_select_device+0x24>
    1352:	44 0f       	add	r20, r20
    1354:	55 1f       	adc	r21, r21
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    135a:	46 83       	std	Z+6, r20	; 0x06
    135c:	08 95       	ret

0000135e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    135e:	fb 01       	movw	r30, r22
    1360:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1362:	e8 2f       	mov	r30, r24
    1364:	e6 95       	lsr	r30
    1366:	e6 95       	lsr	r30
    1368:	e6 95       	lsr	r30
    136a:	40 e2       	ldi	r20, 0x20	; 32
    136c:	e4 9f       	mul	r30, r20
    136e:	f0 01       	movw	r30, r0
    1370:	11 24       	eor	r1, r1
    1372:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1374:	87 70       	andi	r24, 0x07	; 7
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	a9 01       	movw	r20, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <usart_spi_deselect_device+0x24>
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1386:	45 83       	std	Z+5, r20	; 0x05
    1388:	08 95       	ret

0000138a <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    138a:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <fbpointer>
    138e:	90 93 37 22 	sts	0x2237, r25	; 0x802237 <fbpointer+0x1>
    1392:	08 95       	ret

00001394 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1394:	20 91 36 22 	lds	r18, 0x2236	; 0x802236 <fbpointer>
    1398:	30 91 37 22 	lds	r19, 0x2237	; 0x802237 <fbpointer+0x1>
    139c:	90 e8       	ldi	r25, 0x80	; 128
    139e:	89 9f       	mul	r24, r25
    13a0:	20 0d       	add	r18, r0
    13a2:	31 1d       	adc	r19, r1
    13a4:	11 24       	eor	r1, r1
    13a6:	f9 01       	movw	r30, r18
    13a8:	e6 0f       	add	r30, r22
    13aa:	f1 1d       	adc	r31, r1
    13ac:	40 83       	st	Z, r20
    13ae:	08 95       	ret

000013b0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    13b0:	20 91 36 22 	lds	r18, 0x2236	; 0x802236 <fbpointer>
    13b4:	30 91 37 22 	lds	r19, 0x2237	; 0x802237 <fbpointer+0x1>
    13b8:	90 e8       	ldi	r25, 0x80	; 128
    13ba:	89 9f       	mul	r24, r25
    13bc:	20 0d       	add	r18, r0
    13be:	31 1d       	adc	r19, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	f9 01       	movw	r30, r18
    13c4:	e6 0f       	add	r30, r22
    13c6:	f1 1d       	adc	r31, r1
}
    13c8:	80 81       	ld	r24, Z
    13ca:	08 95       	ret

000013cc <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	e4 2f       	mov	r30, r20
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	e8 0f       	add	r30, r24
    13dc:	f1 1d       	adc	r31, r1
    13de:	e1 38       	cpi	r30, 0x81	; 129
    13e0:	f1 05       	cpc	r31, r1
    13e2:	1c f0       	brlt	.+6      	; 0x13ea <gfx_mono_generic_draw_horizontal_line+0x1e>
    13e4:	c0 e8       	ldi	r28, 0x80	; 128
    13e6:	4c 2f       	mov	r20, r28
    13e8:	48 1b       	sub	r20, r24
    13ea:	44 23       	and	r20, r20
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <gfx_mono_generic_draw_horizontal_line+0x24>
    13ee:	4a c0       	rjmp	.+148    	; 0x1484 <gfx_mono_generic_draw_horizontal_line+0xb8>
    13f0:	d6 2f       	mov	r29, r22
    13f2:	d6 95       	lsr	r29
    13f4:	d6 95       	lsr	r29
    13f6:	d6 95       	lsr	r29
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	98 e0       	ldi	r25, 0x08	; 8
    13fc:	d9 9f       	mul	r29, r25
    13fe:	60 19       	sub	r22, r0
    1400:	71 09       	sbc	r23, r1
    1402:	11 24       	eor	r1, r1
    1404:	e1 e0       	ldi	r30, 0x01	; 1
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	df 01       	movw	r26, r30
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <gfx_mono_generic_draw_horizontal_line+0x44>
    140c:	aa 0f       	add	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	6a 95       	dec	r22
    1412:	e2 f7       	brpl	.-8      	; 0x140c <gfx_mono_generic_draw_horizontal_line+0x40>
    1414:	fa 2e       	mov	r15, r26
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	21 f0       	breq	.+8      	; 0x1422 <gfx_mono_generic_draw_horizontal_line+0x56>
    141a:	98 f0       	brcs	.+38     	; 0x1442 <gfx_mono_generic_draw_horizontal_line+0x76>
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	19 f1       	breq	.+70     	; 0x1466 <gfx_mono_generic_draw_horizontal_line+0x9a>
    1420:	31 c0       	rjmp	.+98     	; 0x1484 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1422:	c4 2f       	mov	r28, r20
    1424:	1f ef       	ldi	r17, 0xFF	; 255
    1426:	18 0f       	add	r17, r24
    1428:	01 2f       	mov	r16, r17
    142a:	0c 0f       	add	r16, r28
    142c:	60 2f       	mov	r22, r16
    142e:	8d 2f       	mov	r24, r29
    1430:	39 db       	rcall	.-2446   	; 0xaa4 <gfx_mono_st7565r_get_byte>
    1432:	4f 2d       	mov	r20, r15
    1434:	48 2b       	or	r20, r24
    1436:	60 2f       	mov	r22, r16
    1438:	8d 2f       	mov	r24, r29
    143a:	15 da       	rcall	.-3030   	; 0x866 <gfx_mono_st7565r_put_byte>
    143c:	c1 50       	subi	r28, 0x01	; 1
    143e:	a1 f7       	brne	.-24     	; 0x1428 <gfx_mono_generic_draw_horizontal_line+0x5c>
    1440:	21 c0       	rjmp	.+66     	; 0x1484 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1442:	c4 2f       	mov	r28, r20
    1444:	1f ef       	ldi	r17, 0xFF	; 255
    1446:	18 0f       	add	r17, r24
    1448:	fa 2e       	mov	r15, r26
    144a:	f0 94       	com	r15
    144c:	01 2f       	mov	r16, r17
    144e:	0c 0f       	add	r16, r28
    1450:	60 2f       	mov	r22, r16
    1452:	8d 2f       	mov	r24, r29
    1454:	27 db       	rcall	.-2482   	; 0xaa4 <gfx_mono_st7565r_get_byte>
    1456:	4f 2d       	mov	r20, r15
    1458:	48 23       	and	r20, r24
    145a:	60 2f       	mov	r22, r16
    145c:	8d 2f       	mov	r24, r29
    145e:	03 da       	rcall	.-3066   	; 0x866 <gfx_mono_st7565r_put_byte>
    1460:	c1 50       	subi	r28, 0x01	; 1
    1462:	a1 f7       	brne	.-24     	; 0x144c <gfx_mono_generic_draw_horizontal_line+0x80>
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1466:	c4 2f       	mov	r28, r20
    1468:	1f ef       	ldi	r17, 0xFF	; 255
    146a:	18 0f       	add	r17, r24
    146c:	01 2f       	mov	r16, r17
    146e:	0c 0f       	add	r16, r28
    1470:	60 2f       	mov	r22, r16
    1472:	8d 2f       	mov	r24, r29
    1474:	17 db       	rcall	.-2514   	; 0xaa4 <gfx_mono_st7565r_get_byte>
    1476:	4f 2d       	mov	r20, r15
    1478:	48 27       	eor	r20, r24
    147a:	60 2f       	mov	r22, r16
    147c:	8d 2f       	mov	r24, r29
    147e:	f3 d9       	rcall	.-3098   	; 0x866 <gfx_mono_st7565r_put_byte>
    1480:	c1 50       	subi	r28, 0x01	; 1
    1482:	a1 f7       	brne	.-24     	; 0x146c <gfx_mono_generic_draw_horizontal_line+0xa0>
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	08 95       	ret

00001490 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
	if (height == 0) {
    149a:	22 23       	and	r18, r18
    149c:	69 f0       	breq	.+26     	; 0x14b8 <gfx_mono_generic_draw_filled_rect+0x28>
    149e:	f4 2e       	mov	r15, r20
    14a0:	18 2f       	mov	r17, r24
    14a2:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    14a4:	df ef       	ldi	r29, 0xFF	; 255
    14a6:	d6 0f       	add	r29, r22
    14a8:	6d 2f       	mov	r22, r29
    14aa:	6c 0f       	add	r22, r28
    14ac:	20 2f       	mov	r18, r16
    14ae:	4f 2d       	mov	r20, r15
    14b0:	81 2f       	mov	r24, r17
    14b2:	8c df       	rcall	.-232    	; 0x13cc <gfx_mono_generic_draw_horizontal_line>
    14b4:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    14b6:	c1 f7       	brne	.-16     	; 0x14a8 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	08 95       	ret

000014c4 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    14ca:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    14ce:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    14d2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    14d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    14da:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    14de:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14e2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    14e4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    14e6:	e0 e5       	ldi	r30, 0x50	; 80
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14f0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	fd cf       	rjmp	.-6      	; 0x14f2 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	80 e4       	ldi	r24, 0x40	; 64
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9b d0       	rcall	.+310    	; 0x1636 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1500:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1502:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1504:	e0 e5       	ldi	r30, 0x50	; 80
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    150e:	9f bf       	out	0x3f, r25	; 63
    1510:	08 95       	ret

00001512 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1512:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1514:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1516:	e8 2f       	mov	r30, r24
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e0 59       	subi	r30, 0x90	; 144
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	60 95       	com	r22
    1520:	80 81       	ld	r24, Z
    1522:	68 23       	and	r22, r24
    1524:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1526:	9f bf       	out	0x3f, r25	; 63
    1528:	08 95       	ret

0000152a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	c8 2f       	mov	r28, r24
    1540:	e6 2e       	mov	r14, r22
    1542:	b4 2e       	mov	r11, r20
    1544:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	f9 01       	movw	r30, r18
    154a:	24 81       	ldd	r18, Z+4	; 0x04
    154c:	43 81       	ldd	r20, Z+3	; 0x03
    154e:	6b 2d       	mov	r22, r11
    1550:	8e 2d       	mov	r24, r14
    1552:	9e df       	rcall	.-196    	; 0x1490 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1554:	f6 01       	movw	r30, r12
    1556:	80 81       	ld	r24, Z
    1558:	81 11       	cpse	r24, r1
    155a:	39 c0       	rjmp	.+114    	; 0x15ce <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    155c:	83 81       	ldd	r24, Z+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	26 95       	lsr	r18
    1562:	26 95       	lsr	r18
    1564:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1566:	87 70       	andi	r24, 0x07	; 7
    1568:	09 f0       	breq	.+2      	; 0x156c <gfx_mono_draw_char+0x42>
		char_row_size++;
    156a:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    156c:	f6 01       	movw	r30, r12
    156e:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1570:	8c 2f       	mov	r24, r28
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	35 81       	ldd	r19, Z+5	; 0x05
    1576:	83 1b       	sub	r24, r19
    1578:	91 09       	sbc	r25, r1
    157a:	2a 9d       	mul	r18, r10
    157c:	90 01       	movw	r18, r0
    157e:	11 24       	eor	r1, r1
    1580:	82 9f       	mul	r24, r18
    1582:	a0 01       	movw	r20, r0
    1584:	83 9f       	mul	r24, r19
    1586:	50 0d       	add	r21, r0
    1588:	92 9f       	mul	r25, r18
    158a:	50 0d       	add	r21, r0
    158c:	11 24       	eor	r1, r1
    158e:	01 81       	ldd	r16, Z+1	; 0x01
    1590:	12 81       	ldd	r17, Z+2	; 0x02
    1592:	04 0f       	add	r16, r20
    1594:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1596:	f6 01       	movw	r30, r12
    1598:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    159a:	ff 20       	and	r15, r15
    159c:	a1 f0       	breq	.+40     	; 0x15c6 <gfx_mono_draw_char+0x9c>
    159e:	d0 e0       	ldi	r29, 0x00	; 0
    15a0:	c0 e0       	ldi	r28, 0x00	; 0
    15a2:	8e 2d       	mov	r24, r14
    15a4:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    15a6:	9c 2f       	mov	r25, r28
    15a8:	97 70       	andi	r25, 0x07	; 7
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    15ac:	f8 01       	movw	r30, r16
    15ae:	d4 91       	lpm	r29, Z
				glyph_data++;
    15b0:	0f 5f       	subi	r16, 0xFF	; 255
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    15b4:	dd 23       	and	r29, r29
    15b6:	1c f4       	brge	.+6      	; 0x15be <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	6b 2d       	mov	r22, r11
    15bc:	3d da       	rcall	.-2950   	; 0xa38 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    15be:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    15c0:	cf 5f       	subi	r28, 0xFF	; 255
    15c2:	fc 12       	cpse	r15, r28
    15c4:	ee cf       	rjmp	.-36     	; 0x15a2 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    15c6:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    15c8:	aa 94       	dec	r10
	} while (rows_left > 0);
    15ca:	a1 10       	cpse	r10, r1
    15cc:	e4 cf       	rjmp	.-56     	; 0x1596 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	08 95       	ret

000015e4 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	d6 2e       	mov	r13, r22
    15f4:	04 2f       	mov	r16, r20
    15f6:	79 01       	movw	r14, r18
    15f8:	ec 01       	movw	r28, r24
    15fa:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    15fc:	89 91       	ld	r24, Y+
    15fe:	8a 30       	cpi	r24, 0x0A	; 10
    1600:	31 f4       	brne	.+12     	; 0x160e <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1602:	f7 01       	movw	r30, r14
    1604:	84 81       	ldd	r24, Z+4	; 0x04
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    160a:	1d 2d       	mov	r17, r13
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    160e:	8d 30       	cpi	r24, 0x0D	; 13
    1610:	39 f0       	breq	.+14     	; 0x1620 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1612:	97 01       	movw	r18, r14
    1614:	40 2f       	mov	r20, r16
    1616:	61 2f       	mov	r22, r17
    1618:	88 df       	rcall	.-240    	; 0x152a <gfx_mono_draw_char>
			x += font->width;
    161a:	f7 01       	movw	r30, r14
    161c:	83 81       	ldd	r24, Z+3	; 0x03
    161e:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1620:	88 81       	ld	r24, Y
    1622:	81 11       	cpse	r24, r1
    1624:	eb cf       	rjmp	.-42     	; 0x15fc <gfx_mono_draw_string+0x18>
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	08 95       	ret

00001636 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1636:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1638:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    163a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    163c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    163e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1640:	08 95       	ret

00001642 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    164c:	c6 2f       	mov	r28, r22
    164e:	d0 e0       	ldi	r29, 0x00	; 0
    1650:	de 01       	movw	r26, r28
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <ioport_configure_port_pin+0x18>
    1656:	b5 95       	asr	r27
    1658:	a7 95       	ror	r26
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <ioport_configure_port_pin+0x14>
    165e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1660:	50 8b       	std	Z+16, r21	; 0x10
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1668:	28 30       	cpi	r18, 0x08	; 8
    166a:	31 05       	cpc	r19, r1
    166c:	89 f7       	brne	.-30     	; 0x1650 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    166e:	40 ff       	sbrs	r20, 0
    1670:	0a c0       	rjmp	.+20     	; 0x1686 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1672:	41 ff       	sbrs	r20, 1
    1674:	03 c0       	rjmp	.+6      	; 0x167c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1676:	fc 01       	movw	r30, r24
    1678:	65 83       	std	Z+5, r22	; 0x05
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    167c:	fc 01       	movw	r30, r24
    167e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1680:	fc 01       	movw	r30, r24
    1682:	61 83       	std	Z+1, r22	; 0x01
    1684:	02 c0       	rjmp	.+4      	; 0x168a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1686:	fc 01       	movw	r30, r24
    1688:	62 83       	std	Z+2, r22	; 0x02
	}
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1690:	43 e0       	ldi	r20, 0x03	; 3
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	80 ee       	ldi	r24, 0xE0	; 224
    1698:	97 e0       	ldi	r25, 0x07	; 7
    169a:	d3 df       	rcall	.-90     	; 0x1642 <ioport_configure_port_pin>
    169c:	43 e0       	ldi	r20, 0x03	; 3
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	80 ee       	ldi	r24, 0xE0	; 224
    16a4:	97 e0       	ldi	r25, 0x07	; 7
    16a6:	cd df       	rcall	.-102    	; 0x1642 <ioport_configure_port_pin>
    16a8:	43 e0       	ldi	r20, 0x03	; 3
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	60 e1       	ldi	r22, 0x10	; 16
    16ae:	80 e6       	ldi	r24, 0x60	; 96
    16b0:	96 e0       	ldi	r25, 0x06	; 6
    16b2:	c7 df       	rcall	.-114    	; 0x1642 <ioport_configure_port_pin>
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	50 e4       	ldi	r21, 0x40	; 64
    16b8:	60 e2       	ldi	r22, 0x20	; 32
    16ba:	80 e6       	ldi	r24, 0x60	; 96
    16bc:	96 e0       	ldi	r25, 0x06	; 6
    16be:	c1 df       	rcall	.-126    	; 0x1642 <ioport_configure_port_pin>
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	5b e1       	ldi	r21, 0x1B	; 27
    16c4:	60 e2       	ldi	r22, 0x20	; 32
    16c6:	80 e8       	ldi	r24, 0x80	; 128
    16c8:	96 e0       	ldi	r25, 0x06	; 6
    16ca:	bb df       	rcall	.-138    	; 0x1642 <ioport_configure_port_pin>
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	5b e1       	ldi	r21, 0x1B	; 27
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	80 ea       	ldi	r24, 0xA0	; 160
    16d4:	96 e0       	ldi	r25, 0x06	; 6
    16d6:	b5 df       	rcall	.-150    	; 0x1642 <ioport_configure_port_pin>
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	5b e1       	ldi	r21, 0x1B	; 27
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	80 ea       	ldi	r24, 0xA0	; 160
    16e0:	96 e0       	ldi	r25, 0x06	; 6
    16e2:	af df       	rcall	.-162    	; 0x1642 <ioport_configure_port_pin>
    16e4:	43 e0       	ldi	r20, 0x03	; 3
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	80 e6       	ldi	r24, 0x60	; 96
    16ec:	96 e0       	ldi	r25, 0x06	; 6
    16ee:	a9 df       	rcall	.-174    	; 0x1642 <ioport_configure_port_pin>
    16f0:	43 e0       	ldi	r20, 0x03	; 3
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	68 e0       	ldi	r22, 0x08	; 8
    16f6:	80 e6       	ldi	r24, 0x60	; 96
    16f8:	96 e0       	ldi	r25, 0x06	; 6
    16fa:	a3 df       	rcall	.-186    	; 0x1642 <ioport_configure_port_pin>
    16fc:	43 e0       	ldi	r20, 0x03	; 3
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	68 e0       	ldi	r22, 0x08	; 8
    1702:	80 ea       	ldi	r24, 0xA0	; 160
    1704:	96 e0       	ldi	r25, 0x06	; 6
    1706:	9d df       	rcall	.-198    	; 0x1642 <ioport_configure_port_pin>
    1708:	43 e0       	ldi	r20, 0x03	; 3
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	80 e6       	ldi	r24, 0x60	; 96
    1710:	96 e0       	ldi	r25, 0x06	; 6
    1712:	97 df       	rcall	.-210    	; 0x1642 <ioport_configure_port_pin>
    1714:	43 e0       	ldi	r20, 0x03	; 3
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	68 e0       	ldi	r22, 0x08	; 8
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	96 e0       	ldi	r25, 0x06	; 6
    171e:	91 df       	rcall	.-222    	; 0x1642 <ioport_configure_port_pin>
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	60 e1       	ldi	r22, 0x10	; 16
    1726:	80 e8       	ldi	r24, 0x80	; 128
    1728:	96 e0       	ldi	r25, 0x06	; 6
    172a:	8b df       	rcall	.-234    	; 0x1642 <ioport_configure_port_pin>
    172c:	43 e0       	ldi	r20, 0x03	; 3
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	80 e6       	ldi	r24, 0x60	; 96
    1734:	96 e0       	ldi	r25, 0x06	; 6
    1736:	85 df       	rcall	.-246    	; 0x1642 <ioport_configure_port_pin>
    1738:	43 e0       	ldi	r20, 0x03	; 3
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	68 e0       	ldi	r22, 0x08	; 8
    173e:	80 e6       	ldi	r24, 0x60	; 96
    1740:	96 e0       	ldi	r25, 0x06	; 6
    1742:	7f df       	rcall	.-258    	; 0x1642 <ioport_configure_port_pin>
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	64 e0       	ldi	r22, 0x04	; 4
    174a:	80 e6       	ldi	r24, 0x60	; 96
    174c:	96 e0       	ldi	r25, 0x06	; 6
    174e:	79 df       	rcall	.-270    	; 0x1642 <ioport_configure_port_pin>
    1750:	43 e0       	ldi	r20, 0x03	; 3
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	60 e1       	ldi	r22, 0x10	; 16
    1756:	80 ea       	ldi	r24, 0xA0	; 160
    1758:	96 e0       	ldi	r25, 0x06	; 6
    175a:	73 df       	rcall	.-282    	; 0x1642 <ioport_configure_port_pin>
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	96 e0       	ldi	r25, 0x06	; 6
    1766:	6d df       	rcall	.-294    	; 0x1642 <ioport_configure_port_pin>
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	96 e0       	ldi	r25, 0x06	; 6
    1772:	67 df       	rcall	.-306    	; 0x1642 <ioport_configure_port_pin>
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	96 e0       	ldi	r25, 0x06	; 6
    177e:	61 df       	rcall	.-318    	; 0x1642 <ioport_configure_port_pin>
    1780:	43 e0       	ldi	r20, 0x03	; 3
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	68 e0       	ldi	r22, 0x08	; 8
    1786:	80 e4       	ldi	r24, 0x40	; 64
    1788:	96 e0       	ldi	r25, 0x06	; 6
    178a:	5b df       	rcall	.-330    	; 0x1642 <ioport_configure_port_pin>
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	80 e4       	ldi	r24, 0x40	; 64
    1794:	96 e0       	ldi	r25, 0x06	; 6
    1796:	55 df       	rcall	.-342    	; 0x1642 <ioport_configure_port_pin>
    1798:	43 e0       	ldi	r20, 0x03	; 3
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	68 e0       	ldi	r22, 0x08	; 8
    179e:	80 e6       	ldi	r24, 0x60	; 96
    17a0:	96 e0       	ldi	r25, 0x06	; 6
    17a2:	4f df       	rcall	.-354    	; 0x1642 <ioport_configure_port_pin>
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	64 e0       	ldi	r22, 0x04	; 4
    17aa:	80 e6       	ldi	r24, 0x60	; 96
    17ac:	96 e0       	ldi	r25, 0x06	; 6
    17ae:	49 df       	rcall	.-366    	; 0x1642 <ioport_configure_port_pin>
    17b0:	43 e0       	ldi	r20, 0x03	; 3
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	68 e0       	ldi	r22, 0x08	; 8
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	96 e0       	ldi	r25, 0x06	; 6
    17ba:	43 df       	rcall	.-378    	; 0x1642 <ioport_configure_port_pin>
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	64 e0       	ldi	r22, 0x04	; 4
    17c2:	80 e8       	ldi	r24, 0x80	; 128
    17c4:	96 e0       	ldi	r25, 0x06	; 6
    17c6:	3d cf       	rjmp	.-390    	; 0x1642 <ioport_configure_port_pin>
    17c8:	08 95       	ret

000017ca <__portable_avr_delay_cycles>:

char receiveChar()
{
    while( !(USARTC0_STATUS & USART_RXCIF_bm) ); //Wait until receive finish
    return USARTC0_DATA;
}
    17ca:	61 50       	subi	r22, 0x01	; 1
    17cc:	71 09       	sbc	r23, r1
    17ce:	81 09       	sbc	r24, r1
    17d0:	91 09       	sbc	r25, r1
    17d2:	d9 f7       	brne	.-10     	; 0x17ca <__portable_avr_delay_cycles>
    17d4:	08 95       	ret

000017d6 <setUpSerial>:
    17d6:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    17da:	8c e0       	ldi	r24, 0x0C	; 12
    17dc:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
    17e0:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    17f0:	08 95       	ret

000017f2 <sendString>:
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	fc 01       	movw	r30, r24
    17f8:	60 81       	ld	r22, Z
    17fa:	66 23       	and	r22, r22
    17fc:	41 f0       	breq	.+16     	; 0x180e <sendString+0x1c>
    17fe:	ec 01       	movw	r28, r24
    1800:	21 96       	adiw	r28, 0x01	; 1
    1802:	80 ea       	ldi	r24, 0xA0	; 160
    1804:	98 e0       	ldi	r25, 0x08	; 8
    1806:	50 d9       	rcall	.-3424   	; 0xaa8 <usart_putchar>
    1808:	69 91       	ld	r22, Y+
    180a:	61 11       	cpse	r22, r1
    180c:	fa cf       	rjmp	.-12     	; 0x1802 <sendString+0x10>
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <receiveString>:

void receiveString()
{
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	c8 e3       	ldi	r28, 0x38	; 56
    181a:	d2 e2       	ldi	r29, 0x22	; 34
    int i = 0;
    while(1){
        //char inp = receiveChar();
		char inp = usart_getchar(USART_SERIAL_EXAMPLE);
    181c:	80 ea       	ldi	r24, 0xA0	; 160
    181e:	98 e0       	ldi	r25, 0x08	; 8
    1820:	4b d9       	rcall	.-3434   	; 0xab8 <usart_getchar>
        if(inp=='\n') break;
    1822:	8a 30       	cpi	r24, 0x0A	; 10
    1824:	11 f0       	breq	.+4      	; 0x182a <receiveString+0x16>
        else reads[i++] = inp;
    1826:	89 93       	st	Y+, r24
    }
    1828:	f9 cf       	rjmp	.-14     	; 0x181c <receiveString+0x8>
	if(strcmp(str1,reads) == 0){
    182a:	68 e3       	ldi	r22, 0x38	; 56
    182c:	72 e2       	ldi	r23, 0x22	; 34
    182e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <str1>
    1832:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <str1+0x1>
    1836:	92 d0       	rcall	.+292    	; 0x195c <strcmp>
    1838:	89 2b       	or	r24, r25
    183a:	21 f4       	brne	.+8      	; 0x1844 <receiveString+0x30>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    1842:	10 c0       	rjmp	.+32     	; 0x1864 <receiveString+0x50>
		gpio_set_pin_high(J2_PIN0);
	}else if(strcmp(str2,reads) == 0){
    1844:	68 e3       	ldi	r22, 0x38	; 56
    1846:	72 e2       	ldi	r23, 0x22	; 34
    1848:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <str2>
    184c:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <str2+0x1>
    1850:	85 d0       	rcall	.+266    	; 0x195c <strcmp>
    1852:	89 2b       	or	r24, r25
    1854:	21 f4       	brne	.+8      	; 0x185e <receiveString+0x4a>
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <receiveString+0x50>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
		gpio_set_pin_high(J2_PIN0);
	}else{
		gpio_set_pin_low(J2_PIN0);
	}
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <main>:
    186a:	12 df       	rcall	.-476    	; 0x1690 <board_init>
    186c:	2b de       	rcall	.-938    	; 0x14c4 <sysclk_init>
    186e:	a2 d8       	rcall	.-3772   	; 0x9b4 <gfx_mono_st7565r_init>
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    187c:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    1880:	84 e0       	ldi	r24, 0x04	; 4
    1882:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1886:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    188a:	a5 df       	rcall	.-182    	; 0x17d6 <setUpSerial>
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	70 e2       	ldi	r23, 0x20	; 32
    1890:	80 ea       	ldi	r24, 0xA0	; 160
    1892:	98 e0       	ldi	r25, 0x08	; 8
    1894:	26 da       	rcall	.-2996   	; 0xce2 <usart_init_rs232>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
    189c:	c0 ea       	ldi	r28, 0xA0	; 160
    189e:	d6 e0       	ldi	r29, 0x06	; 6
    18a0:	00 e6       	ldi	r16, 0x60	; 96
    18a2:	16 e0       	ldi	r17, 0x06	; 6
    18a4:	68 94       	set
    18a6:	ee 24       	eor	r14, r14
    18a8:	e5 f8       	bld	r14, 5
    18aa:	68 94       	set
    18ac:	ff 24       	eor	r15, r15
    18ae:	f4 f8       	bld	r15, 4
    18b0:	88 85       	ldd	r24, Y+8	; 0x08
    18b2:	81 fd       	sbrc	r24, 1
    18b4:	0a c0       	rjmp	.+20     	; 0x18ca <main+0x60>
    18b6:	88 85       	ldd	r24, Y+8	; 0x08
    18b8:	82 ff       	sbrs	r24, 2
    18ba:	07 c0       	rjmp	.+14     	; 0x18ca <main+0x60>
    18bc:	f8 01       	movw	r30, r16
    18be:	f6 82       	std	Z+6, r15	; 0x06
    18c0:	e5 82       	std	Z+5, r14	; 0x05
    18c2:	82 e1       	ldi	r24, 0x12	; 18
    18c4:	90 e2       	ldi	r25, 0x20	; 32
    18c6:	95 df       	rcall	.-214    	; 0x17f2 <sendString>
    18c8:	19 c0       	rjmp	.+50     	; 0x18fc <main+0x92>
    18ca:	88 85       	ldd	r24, Y+8	; 0x08
    18cc:	82 fd       	sbrc	r24, 2
    18ce:	0a c0       	rjmp	.+20     	; 0x18e4 <main+0x7a>
    18d0:	88 85       	ldd	r24, Y+8	; 0x08
    18d2:	81 ff       	sbrs	r24, 1
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <main+0x7a>
    18d6:	f8 01       	movw	r30, r16
    18d8:	e6 82       	std	Z+6, r14	; 0x06
    18da:	f5 82       	std	Z+5, r15	; 0x05
    18dc:	89 e1       	ldi	r24, 0x19	; 25
    18de:	90 e2       	ldi	r25, 0x20	; 32
    18e0:	88 df       	rcall	.-240    	; 0x17f2 <sendString>
    18e2:	0c c0       	rjmp	.+24     	; 0x18fc <main+0x92>
    18e4:	88 85       	ldd	r24, Y+8	; 0x08
    18e6:	81 ff       	sbrs	r24, 1
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <main+0x92>
    18ea:	88 85       	ldd	r24, Y+8	; 0x08
    18ec:	82 ff       	sbrs	r24, 2
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <main+0x92>
    18f0:	f8 01       	movw	r30, r16
    18f2:	e5 82       	std	Z+5, r14	; 0x05
    18f4:	f5 82       	std	Z+5, r15	; 0x05
    18f6:	81 e2       	ldi	r24, 0x21	; 33
    18f8:	90 e2       	ldi	r25, 0x20	; 32
    18fa:	7b df       	rcall	.-266    	; 0x17f2 <sendString>
    18fc:	8b df       	rcall	.-234    	; 0x1814 <receiveString>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e2       	ldi	r19, 0x20	; 32
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	88 e3       	ldi	r24, 0x38	; 56
    1908:	92 e2       	ldi	r25, 0x22	; 34
    190a:	6c de       	rcall	.-808    	; 0x15e4 <gfx_mono_draw_string>
    190c:	6a ea       	ldi	r22, 0xAA	; 170
    190e:	71 e1       	ldi	r23, 0x11	; 17
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	5a df       	rcall	.-332    	; 0x17ca <__portable_avr_delay_cycles>
    1916:	cc cf       	rjmp	.-104    	; 0x18b0 <main+0x46>

00001918 <__udivmodsi4>:
    1918:	a1 e2       	ldi	r26, 0x21	; 33
    191a:	1a 2e       	mov	r1, r26
    191c:	aa 1b       	sub	r26, r26
    191e:	bb 1b       	sub	r27, r27
    1920:	fd 01       	movw	r30, r26
    1922:	0d c0       	rjmp	.+26     	; 0x193e <__udivmodsi4_ep>

00001924 <__udivmodsi4_loop>:
    1924:	aa 1f       	adc	r26, r26
    1926:	bb 1f       	adc	r27, r27
    1928:	ee 1f       	adc	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	a2 17       	cp	r26, r18
    192e:	b3 07       	cpc	r27, r19
    1930:	e4 07       	cpc	r30, r20
    1932:	f5 07       	cpc	r31, r21
    1934:	20 f0       	brcs	.+8      	; 0x193e <__udivmodsi4_ep>
    1936:	a2 1b       	sub	r26, r18
    1938:	b3 0b       	sbc	r27, r19
    193a:	e4 0b       	sbc	r30, r20
    193c:	f5 0b       	sbc	r31, r21

0000193e <__udivmodsi4_ep>:
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	1a 94       	dec	r1
    1948:	69 f7       	brne	.-38     	; 0x1924 <__udivmodsi4_loop>
    194a:	60 95       	com	r22
    194c:	70 95       	com	r23
    194e:	80 95       	com	r24
    1950:	90 95       	com	r25
    1952:	9b 01       	movw	r18, r22
    1954:	ac 01       	movw	r20, r24
    1956:	bd 01       	movw	r22, r26
    1958:	cf 01       	movw	r24, r30
    195a:	08 95       	ret

0000195c <strcmp>:
    195c:	fb 01       	movw	r30, r22
    195e:	dc 01       	movw	r26, r24
    1960:	8d 91       	ld	r24, X+
    1962:	01 90       	ld	r0, Z+
    1964:	80 19       	sub	r24, r0
    1966:	01 10       	cpse	r0, r1
    1968:	d9 f3       	breq	.-10     	; 0x1960 <strcmp+0x4>
    196a:	99 0b       	sbc	r25, r25
    196c:	08 95       	ret

0000196e <_exit>:
    196e:	f8 94       	cli

00001970 <__stop_program>:
    1970:	ff cf       	rjmp	.-2      	; 0x1970 <__stop_program>
